import{_ as n}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as c,D as i,o as r,c as l,I as D,w as _,k as o,a as h,R as m,b as u,e as p}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const x=JSON.parse('{"title":"DDD学习随笔","description":"","frontmatter":{"title":"DDD学习随笔","author":"Ray","date":"2022/10/22 21:25","categories":["工程架构"],"tags":["DDD"]},"headers":[],"relativePath":"courses/egarchitecture/01-DDD学习随笔.md","filePath":"courses/egarchitecture/01-DDD学习随笔.md","lastUpdated":1743870828000}'),f={name:"courses/egarchitecture/01-DDD学习随笔.md"},g=o("h1",{id:"ddd学习随笔",tabindex:"-1"},[h("DDD学习随笔 "),o("a",{class:"header-anchor",href:"#ddd学习随笔","aria-label":'Permalink to "DDD学习随笔"'},"​")],-1),b=m('<h2 id="从mvc到ddd" tabindex="-1">从MVC到DDD <a class="header-anchor" href="#从mvc到ddd" aria-label="Permalink to &quot;从MVC到DDD&quot;">​</a></h2><p>首先，MVC是一种优秀的设计模式，但是随着时代的发展一些弊病也逐渐暴露出来。例如在微服务的场景下如果将服务拆分过细的话那么每次开发功能都需要上线一大批的微服务，这样不仅发版风险高，并且和其他团队进行配合的时候需要沟通的成本也高。还有就是随着业务的迭代，各个服务里面的对象也会膨胀。</p><h3 id="ddd是什么" tabindex="-1">DDD是什么 <a class="header-anchor" href="#ddd是什么" aria-label="Permalink to &quot;DDD是什么&quot;">​</a></h3><h2 id="ddd的概念" tabindex="-1">DDD的概念 <a class="header-anchor" href="#ddd的概念" aria-label="Permalink to &quot;DDD的概念&quot;">​</a></h2><h3 id="领域模型与充血模型" tabindex="-1">领域模型与充血模型 <a class="header-anchor" href="#领域模型与充血模型" aria-label="Permalink to &quot;领域模型与充血模型&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/rayliu445/blogImage/master/blogImage/ddd%E6%A8%A1%E5%BC%8F%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B20250402.png" alt="img"></p><p>上面这张图我们可以看到一个充血对象将自己的职责纳入到其中，例如，放在过去，AB服务中要是都使用同一个Redis的key，那么就需要在各自的服务中进行RedisKey的拼接。现在，我们将提供Key的功能划分给key所对应的充血模型，AB服务只需要关注自己业务即可。</p>',7);function k(e,A,C,V,y,E){const d=n,s=i("ClientOnly");return r(),l("div",null,[g,D(s,null,{default:_(()=>{var a,t;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=e.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(r(),u(d,{key:0,article:e.$frontmatter},null,8,["article"])):p("",!0)]}),_:1}),b])}const N=c(f,[["render",k]]);export{x as __pageData,N as default};
