import{_ as l}from"./chunks/ArticleMetadata.d4_nZKBO.js";import{_ as r,D as k,o as e,c as p,I as o,w as d,k as t,a as c,R as u,b as g,e as A}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const v=JSON.parse('{"title":"01-实战Java高并发程序设计随笔","description":"","frontmatter":{"title":"01-实战Java高并发程序设计随笔","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/02-Java并发编程/01-实战Java高并发程序设计学习笔记.md","filePath":"courses/java/02-Java并发编程/01-实战Java高并发程序设计学习笔记.md","lastUpdated":1745032042000}'),y={name:"courses/java/02-Java并发编程/01-实战Java高并发程序设计学习笔记.md"},b=t("h1",{id:"实战java高并发程序设计随笔",tabindex:"-1"},[c("实战Java高并发程序设计随笔 "),t("a",{class:"header-anchor",href:"#实战java高并发程序设计随笔","aria-label":'Permalink to "实战Java高并发程序设计随笔"'},"​")],-1),D=u(`<h2 id="第一章-走入并行" tabindex="-1">第一章 走入并行 <a class="header-anchor" href="#第一章-走入并行" aria-label="Permalink to &quot;第一章 走入并行&quot;">​</a></h2><h3 id="必须知道的几个概念" tabindex="-1">必须知道的几个概念 <a class="header-anchor" href="#必须知道的几个概念" aria-label="Permalink to &quot;必须知道的几个概念&quot;">​</a></h3><h6 id="同步和异步" tabindex="-1">同步和异步 <a class="header-anchor" href="#同步和异步" aria-label="Permalink to &quot;同步和异步&quot;">​</a></h6><p>同步:串行执行，必须得等前面的执行完以后后面的任务才能执行。 异步:调用方法后立即返回，然后调用者可以立即执行后面的任务，而等被调用的方法完成之后会通知调用者。</p><h6 id="并发与并行" tabindex="-1">并发与并行 <a class="header-anchor" href="#并发与并行" aria-label="Permalink to &quot;并发与并行&quot;">​</a></h6><p>并发:短时间内还是串行。 并行:真正意义上的同时执行。</p><h6 id="临界区" tabindex="-1">临界区 <a class="header-anchor" href="#临界区" aria-label="Permalink to &quot;临界区&quot;">​</a></h6><p>多个线程共享的公共资源或者是共享数据。每一次只能有一个线程占用。</p><h6 id="阻塞与非阻塞" tabindex="-1">阻塞与非阻塞 <a class="header-anchor" href="#阻塞与非阻塞" aria-label="Permalink to &quot;阻塞与非阻塞&quot;">​</a></h6><p>阻塞:如果其他线程占用了临界区资源，那么当前线程会在临界区挂起,这种情况称为阻塞。</p><h6 id="死锁、饥饿、活锁" tabindex="-1">死锁、饥饿、活锁 <a class="header-anchor" href="#死锁、饥饿、活锁" aria-label="Permalink to &quot;死锁、饥饿、活锁&quot;">​</a></h6><h6 id="死锁" tabindex="-1">死锁 <a class="header-anchor" href="#死锁" aria-label="Permalink to &quot;死锁&quot;">​</a></h6><p>死锁:如果多个线程循环等待,那么就会出现死锁。 死锁产生的三个条件: 1.互斥条件：同一资源同一时刻只能被一个线程占有。 2.请求与保持条件：拿到了资源以后,如果因为请求资源而阻塞,那么就会持有资源不释放。 3.不可剥夺条件:资源在被一个线程拿走之后，其他线程就不能剥夺这个线程的资源。 4.循环等待条件:线程之间会等待其他线程的资源从而形成一个等待循环。 破坏死锁: 1.破坏请求与保持条件:一次性申请所有资源。 2.破坏不可剥夺条件:占用部分资源的线程去申请其他资源，如果申请不到的话那么就释放掉持有的资源。 3.破坏循环等待条件:按序申请资源,资源反序释放。这样就能保证一个线程从头到尾获得资源。</p><h6 id="饥饿" tabindex="-1">饥饿 <a class="header-anchor" href="#饥饿" aria-label="Permalink to &quot;饥饿&quot;">​</a></h6><p>某一线程或者多个线程以为请求不到资源导致一直无法运行(猜测是以时间来判断???),比如因为线程优先级过低，一直有高优先级线程执行。</p><h6 id="活锁" tabindex="-1">活锁 <a class="header-anchor" href="#活锁" aria-label="Permalink to &quot;活锁&quot;">​</a></h6><p>活锁则是因为过于“谦让“而导致线程无法拿到全部资源。想象的场景是:两个人不停为对方让路。</p><h3 id="并发级别" tabindex="-1">并发级别 <a class="header-anchor" href="#并发级别" aria-label="Permalink to &quot;并发级别&quot;">​</a></h3><h6 id="阻塞" tabindex="-1">阻塞 <a class="header-anchor" href="#阻塞" aria-label="Permalink to &quot;阻塞&quot;">​</a></h6><p>采用的是悲观策略。</p><h6 id="无饥饿" tabindex="-1">无饥饿 <a class="header-anchor" href="#无饥饿" aria-label="Permalink to &quot;无饥饿&quot;">​</a></h6><p>尽量采用公平的线程队列，好让所有线程都能够有机会执行。</p><h6 id="无障碍" tabindex="-1">无障碍 <a class="header-anchor" href="#无障碍" aria-label="Permalink to &quot;无障碍&quot;">​</a></h6><p>首先是一种乐观的策略,所有线程都可以进入临界区,当多个线程共同修改数据而导致数据破坏时会采用<strong>回滚</strong>策略(侧面也可以看出这种级别认为不会有过多的线程同时修改资源导致并发问题)。 可行的无障碍实现是依赖一个&quot;一致性标记&quot;来实现。线程在操作之前,先读取并保存这个标记,在操作完成以后,再次读取，检查这个标记是否被修改过。</p><h6 id="无锁" tabindex="-1">无锁 <a class="header-anchor" href="#无锁" aria-label="Permalink to &quot;无锁&quot;">​</a></h6><p>无锁是无障碍的。 无锁会有多个线程在临界区内修改资源,但是总有一个会成功???</p><h6 id="无等待" tabindex="-1">无等待 <a class="header-anchor" href="#无等待" aria-label="Permalink to &quot;无等待&quot;">​</a></h6><p>无等待要求线程在有限步内完成操作,这样不会引起饥饿问题(饥饿就是因为一直不执行)。 典型的无等待结构RCU (Read-Copy-Update)。它的基本思想是,对数据的读不加修改。因此,所有的线程都是无等待的,它们既不会被锁定等待也不会引起任何冲突。</p><h3 id="并行有关的两个定律" tabindex="-1">并行有关的两个定律 <a class="header-anchor" href="#并行有关的两个定律" aria-label="Permalink to &quot;并行有关的两个定律&quot;">​</a></h3><h6 id="amdahal定律" tabindex="-1">Amdahal定律 <a class="header-anchor" href="#amdahal定律" aria-label="Permalink to &quot;Amdahal定律&quot;">​</a></h6><h6 id="gustafson定律" tabindex="-1">Gustafson定律 <a class="header-anchor" href="#gustafson定律" aria-label="Permalink to &quot;Gustafson定律&quot;">​</a></h6><h3 id="回到java-jmm" tabindex="-1">回到Java:JMM <a class="header-anchor" href="#回到java-jmm" aria-label="Permalink to &quot;回到Java:JMM&quot;">​</a></h3><p>JMM:Java内存模型(和JVM关注的点不一样)。由于Java并发的复杂性,所以导致了线程不安全的问题,如何保证下面这些特性也是我们关注的重点:</p><h6 id="原子性-atomicity" tabindex="-1">原子性(Atomicity) <a class="header-anchor" href="#原子性-atomicity" aria-label="Permalink to &quot;原子性(Atomicity)&quot;">​</a></h6><p>指的是<strong>一个操作还没完成前,其他线程无法干扰</strong>。如果Java虚拟机是32位的话,那么long类型的变量赋值就有可能发生问题(因为long类型是64位,我猜测需要两个线程来完成赋值操作???),所以就会导致值和预期不一致的情况。</p><h6 id="可见性-visibility" tabindex="-1">可见性(Visibility) <a class="header-anchor" href="#可见性-visibility" aria-label="Permalink to &quot;可见性(Visibility)&quot;">​</a></h6><p><strong>如果在一个线程中修改了某个变量的值,其他共享的线程是否知道</strong>。一般来说,其他线程观察当前线程(是否观察到、何时观察到)是无法保证的。</p><h6 id="有序性-ordering" tabindex="-1">有序性(Ordering) <a class="header-anchor" href="#有序性-ordering" aria-label="Permalink to &quot;有序性(Ordering)&quot;">​</a></h6><p>按照书上的说法来说,干扰有序性的主要因素就是指令重排。指令重排出现的问题就是减少操作系统<strong>流水线</strong>机制的中断从而提升性能。指令重排也得满足<strong>语义串行性</strong>,但是没有义务保证多线程间的语义也一致(书上的例子是线程1给a赋值,线程2对a的值做修改,但是线程2有可能先执行)。</p><h5 id="哪些指令不能重排" tabindex="-1">哪些指令不能重排 <a class="header-anchor" href="#哪些指令不能重排" aria-label="Permalink to &quot;哪些指令不能重排&quot;">​</a></h5><h6 id="程序顺序原则" tabindex="-1">程序顺序原则 <a class="header-anchor" href="#程序顺序原则" aria-label="Permalink to &quot;程序顺序原则&quot;">​</a></h6><p>一个线程内保证语义的串行性</p><h6 id="volatile规则" tabindex="-1">volatile规则 <a class="header-anchor" href="#volatile规则" aria-label="Permalink to &quot;volatile规则&quot;">​</a></h6><p><strong>volatile变量</strong>的写,先发生于读,这保证了volatile变量的可见性</p><h6 id="锁规则" tabindex="-1">锁规则 <a class="header-anchor" href="#锁规则" aria-label="Permalink to &quot;锁规则&quot;">​</a></h6><p>解锁(unlock)必然发生在随后的加锁前。</p><h6 id="传递性" tabindex="-1">传递性 <a class="header-anchor" href="#传递性" aria-label="Permalink to &quot;传递性&quot;">​</a></h6><p>a=b; b=c; A必然要先于C</p><h6 id="线程的start-先于它的每一个动作" tabindex="-1">线程的start()先于它的每一个动作 <a class="header-anchor" href="#线程的start-先于它的每一个动作" aria-label="Permalink to &quot;线程的start()先于它的每一个动作&quot;">​</a></h6><p>也就是说start方法会先执行。</p><h6 id="线程的所有操作先于线程的终结-thread-join" tabindex="-1">线程的所有操作先于线程的终结(Thread.join()) <a class="header-anchor" href="#线程的所有操作先于线程的终结-thread-join" aria-label="Permalink to &quot;线程的所有操作先于线程的终结(Thread.join())&quot;">​</a></h6><h6 id="线程的中断-interrupt-先于被中断线程的代码" tabindex="-1">线程的中断(interrupt())先于被中断线程的代码 <a class="header-anchor" href="#线程的中断-interrupt-先于被中断线程的代码" aria-label="Permalink to &quot;线程的中断(interrupt())先于被中断线程的代码&quot;">​</a></h6><h6 id="对象的构造函数执行、结束于finalize-方法" tabindex="-1">对象的构造函数执行、结束于finalize()方法 <a class="header-anchor" href="#对象的构造函数执行、结束于finalize-方法" aria-label="Permalink to &quot;对象的构造函数执行、结束于finalize()方法&quot;">​</a></h6><p>finalize()方法在JVM中看到过,可达性分析时会有一次标记,实例在finalize()方法中可以拯救自己一次(和可达链搭上关系)。</p><h2 id="第二章-java并行程序基础" tabindex="-1">第二章 Java并行程序基础 <a class="header-anchor" href="#第二章-java并行程序基础" aria-label="Permalink to &quot;第二章 Java并行程序基础&quot;">​</a></h2><h3 id="有关线程必知的事" tabindex="-1">有关线程必知的事 <a class="header-anchor" href="#有关线程必知的事" aria-label="Permalink to &quot;有关线程必知的事&quot;">​</a></h3><h6 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h6><p>进程资源分配和调度的<strong>基本单位</strong>。 线程是程序的<strong>最小执行单位</strong>。 线程的状态6种，记住并且能说出具体干了什么</p><h6 id="线程的6种状态" tabindex="-1">线程的6种状态 <a class="header-anchor" href="#线程的6种状态" aria-label="Permalink to &quot;线程的6种状态&quot;">​</a></h6><h3 id="初始线程-线程的基本操作" tabindex="-1">初始线程：线程的基本操作 <a class="header-anchor" href="#初始线程-线程的基本操作" aria-label="Permalink to &quot;初始线程：线程的基本操作&quot;">​</a></h3><h6 id="新建" tabindex="-1">新建 <a class="header-anchor" href="#新建" aria-label="Permalink to &quot;新建&quot;">​</a></h6><h6 id="中止" tabindex="-1">中止 <a class="header-anchor" href="#中止" aria-label="Permalink to &quot;中止&quot;">​</a></h6><h6 id="中断" tabindex="-1">中断 <a class="header-anchor" href="#中断" aria-label="Permalink to &quot;中断&quot;">​</a></h6><h6 id="等待-wait-与唤醒-通知-notify" tabindex="-1">等待(wait)与唤醒(通知 notify) <a class="header-anchor" href="#等待-wait-与唤醒-通知-notify" aria-label="Permalink to &quot;等待(wait)与唤醒(通知 notify)&quot;">​</a></h6><p>来自于Object的方法,Object类下面还有许多的方法也是面试经常会问到的</p><p>为什么会被问到，因为涉及到线程间的通信</p><h6 id="挂起-suspend-与继续执行-resume" tabindex="-1">挂起(suspend)与继续执行(resume) <a class="header-anchor" href="#挂起-suspend-与继续执行-resume" aria-label="Permalink to &quot;挂起(suspend)与继续执行(resume)&quot;">​</a></h6><h6 id="等待线程结束-join-与谦让-yield" tabindex="-1">等待线程结束(join)与谦让(yield) <a class="header-anchor" href="#等待线程结束-join-与谦让-yield" aria-label="Permalink to &quot;等待线程结束(join)与谦让(yield)&quot;">​</a></h6><h3 id="volatile与jmm-java内存模型" tabindex="-1">volatile与JMM(Java内存模型) <a class="header-anchor" href="#volatile与jmm-java内存模型" aria-label="Permalink to &quot;volatile与JMM(Java内存模型)&quot;">​</a></h3><p>在B站看了视频之后回来做一下补充首先需要先知道CPU缓存架构(操作系统)每个线程都有一个从主存中获取的副本变量,那么就会导致一个问题,线程中修改自己的副本变量不会对主存生效第一章的末尾描述了多线程环境下JMM产生的问题</p><ol><li>原子性 多线程针对同一变量做修改的话,可能引起变量与期望值不一致</li><li>可见性 计算机对于经常访问的数据可能会放入cache或者寄存器中,A线程修改了变量值之后,B线程访问的还是缓存中的值</li><li>有序性 同一个线程中,语义的串行话是能够保证的,但是A线程并不清楚B线程的执行顺序 volatile关键字能够保证有序性和可见性,但是复杂的原子操作并不能保证</li></ol><h3 id="分门别类的管理-线程组" tabindex="-1">分门别类的管理(线程组) <a class="header-anchor" href="#分门别类的管理-线程组" aria-label="Permalink to &quot;分门别类的管理(线程组)&quot;">​</a></h3><h3 id="驻守后台的线程-守护线程" tabindex="-1">驻守后台的线程(守护线程) <a class="header-anchor" href="#驻守后台的线程-守护线程" aria-label="Permalink to &quot;驻守后台的线程(守护线程)&quot;">​</a></h3><h3 id="先干重要的事-线程优先级" tabindex="-1">先干重要的事(线程优先级) <a class="header-anchor" href="#先干重要的事-线程优先级" aria-label="Permalink to &quot;先干重要的事(线程优先级)&quot;">​</a></h3><h3 id="线程安全的概念与synchronized" tabindex="-1">线程安全的概念与synchronized <a class="header-anchor" href="#线程安全的概念与synchronized" aria-label="Permalink to &quot;线程安全的概念与synchronized&quot;">​</a></h3><h4 id="方法加锁" tabindex="-1">方法加锁 <a class="header-anchor" href="#方法加锁" aria-label="Permalink to &quot;方法加锁&quot;">​</a></h4><p>就是给当前实例对象加锁</p><h4 id="实例信息加锁" tabindex="-1">实例信息加锁 <a class="header-anchor" href="#实例信息加锁" aria-label="Permalink to &quot;实例信息加锁&quot;">​</a></h4><h4 id="静态代码块加锁" tabindex="-1">静态代码块加锁 <a class="header-anchor" href="#静态代码块加锁" aria-label="Permalink to &quot;静态代码块加锁&quot;">​</a></h4><p>给当前类对象加锁(注:JVM中每种类型的类都是唯一的)</p><h3 id="程序中的幽灵-隐蔽的错误" tabindex="-1">程序中的幽灵(隐蔽的错误) <a class="header-anchor" href="#程序中的幽灵-隐蔽的错误" aria-label="Permalink to &quot;程序中的幽灵(隐蔽的错误)&quot;">​</a></h3><h2 id="第三章-jdk下的并发包" tabindex="-1">第三章 JDK下的并发包 <a class="header-anchor" href="#第三章-jdk下的并发包" aria-label="Permalink to &quot;第三章 JDK下的并发包&quot;">​</a></h2><h3 id="同步控制" tabindex="-1">同步控制 <a class="header-anchor" href="#同步控制" aria-label="Permalink to &quot;同步控制&quot;">​</a></h3><h4 id="synchronized" tabindex="-1">Synchronized <a class="header-anchor" href="#synchronized" aria-label="Permalink to &quot;Synchronized&quot;">​</a></h4><p>这应该是我们最为熟知的同步方式，也就是针对竞态资源加锁的方式，它有两种方式去加锁，一种是针对类来加锁，还有针对对象进行加锁</p><h4 id="reentrantlock-可重入锁-synchronized的功能扩展" tabindex="-1">ReentrantLock(可重入锁)-synchronized的功能扩展 <a class="header-anchor" href="#reentrantlock-可重入锁-synchronized的功能扩展" aria-label="Permalink to &quot;ReentrantLock(可重入锁)-synchronized的功能扩展&quot;">​</a></h4><h5 id="中断响应" tabindex="-1">中断响应 <a class="header-anchor" href="#中断响应" aria-label="Permalink to &quot;中断响应&quot;">​</a></h5><p>这里需要着重强调的是<strong>lockInterruptibly</strong>方法,<strong>获取当前锁定,除非当前线程为interrupted</strong>。 如果锁没有被另一个线程占用并且立即返回,则将锁定计数设置为1。 如果当前线程已经保存此锁,则保持计数将递增1,该方法立即返回。 如果该锁被另一个线程保存，则当前线程将被禁用,并且处于休眠状态之一,直到发生两件事情之一: 1.锁是由当前线程获得的-&gt;则锁定保持计数器设置为1。 2.其他线程当前线程interrupts</p><h5 id="锁申请等待限时" tabindex="-1">锁申请等待限时 <a class="header-anchor" href="#锁申请等待限时" aria-label="Permalink to &quot;锁申请等待限时&quot;">​</a></h5><h5 id="公平锁" tabindex="-1">公平锁 <a class="header-anchor" href="#公平锁" aria-label="Permalink to &quot;公平锁&quot;">​</a></h5><h5 id="reentrantlock常用api" tabindex="-1">ReentrantLock常用API <a class="header-anchor" href="#reentrantlock常用api" aria-label="Permalink to &quot;ReentrantLock常用API&quot;">​</a></h5><h6 id="lock" tabindex="-1">lock() <a class="header-anchor" href="#lock" aria-label="Permalink to &quot;lock()&quot;">​</a></h6><p>获得锁，如果锁已经被占用,则等待</p><h6 id="lockinterruptibly" tabindex="-1">lockInterruptibly() <a class="header-anchor" href="#lockinterruptibly" aria-label="Permalink to &quot;lockInterruptibly()&quot;">​</a></h6><p>获得锁,但优先响应中断</p><h6 id="trylock" tabindex="-1">tryLock() <a class="header-anchor" href="#trylock" aria-label="Permalink to &quot;tryLock()&quot;">​</a></h6><p>尝试获得锁,如果成功,返回true,失败返回false。该方法不等待,立即返回。</p><h6 id="trylock-long-time-timeunit-unit" tabindex="-1">tryLock(long time,TimeUnit unit) <a class="header-anchor" href="#trylock-long-time-timeunit-unit" aria-label="Permalink to &quot;tryLock(long time,TimeUnit unit)&quot;">​</a></h6><p>在给定时间内尝试获得锁</p><h6 id="unlock" tabindex="-1">unlock() <a class="header-anchor" href="#unlock" aria-label="Permalink to &quot;unlock()&quot;">​</a></h6><p>释放锁</p><h4 id="重入锁的搭档-condition条件" tabindex="-1">重入锁的搭档:Condition条件 <a class="header-anchor" href="#重入锁的搭档-condition条件" aria-label="Permalink to &quot;重入锁的搭档:Condition条件&quot;">​</a></h4><h5 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="await" tabindex="-1">await() <a class="header-anchor" href="#await" aria-label="Permalink to &quot;await()&quot;">​</a></h6><p><strong>使当前线程等待,同时释放当前锁</strong>,当其他线程中使用signal()或者signalAll()方法时,线程会重新获得锁并继续执行。线程中断时跳出等待。与Object.wait()方法类似</p><h6 id="awaituniterruptibly" tabindex="-1">awaitUniterruptibly() <a class="header-anchor" href="#awaituniterruptibly" aria-label="Permalink to &quot;awaitUniterruptibly()&quot;">​</a></h6><p>与await()基本类似，但是不会响应中断</p><h6 id="singal" tabindex="-1">singal() <a class="header-anchor" href="#singal" aria-label="Permalink to &quot;singal()&quot;">​</a></h6><p>用于唤醒一个在等待中的线程。与Object.notify()方法类似</p><h4 id="arrayblockingqueue的put方法" tabindex="-1">ArrayBlockingQueue的put方法 <a class="header-anchor" href="#arrayblockingqueue的put方法" aria-label="Permalink to &quot;ArrayBlockingQueue的put方法&quot;">​</a></h4><h4 id="允许多个线程同时访问-信号量-semaphore" tabindex="-1">允许多个线程同时访问:信号量(Semaphore) <a class="header-anchor" href="#允许多个线程同时访问-信号量-semaphore" aria-label="Permalink to &quot;允许多个线程同时访问:信号量(Semaphore)&quot;">​</a></h4><h5 id="常用api-1" tabindex="-1">常用API <a class="header-anchor" href="#常用api-1" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><p>构造方法</p><h6 id="public-semaphore-int-permits" tabindex="-1">public Semaphore(int permits) <a class="header-anchor" href="#public-semaphore-int-permits" aria-label="Permalink to &quot;public Semaphore(int permits)&quot;">​</a></h6><h6 id="public-semaphore-int-permits-boolean-fair" tabindex="-1">public Semaphore(int permits,boolean fair) <a class="header-anchor" href="#public-semaphore-int-permits-boolean-fair" aria-label="Permalink to &quot;public Semaphore(int permits,boolean fair)&quot;">​</a></h6><p>构造信号量对象时,必须要指定信号量的<strong>准入数</strong>,即同时能申请多少个许可。如果每个只申请一个许可,相当于有多少个线程可以访问某一个资源。 逻辑方法</p><h6 id="public-void-acquire" tabindex="-1">public void acquire() <a class="header-anchor" href="#public-void-acquire" aria-label="Permalink to &quot;public void acquire()&quot;">​</a></h6><p>尝试获取一个准入的许可,若无法获得</p><h6 id="public-void-acquireuninterruptibly" tabindex="-1">public void acquireUninterruptibly() <a class="header-anchor" href="#public-void-acquireuninterruptibly" aria-label="Permalink to &quot;public void acquireUninterruptibly()&quot;">​</a></h6><p>与acquire方法相似，不响应中断。</p><h6 id="public-boolean-tryacquire" tabindex="-1">public boolean tryAcquire() <a class="header-anchor" href="#public-boolean-tryacquire" aria-label="Permalink to &quot;public boolean tryAcquire()&quot;">​</a></h6><p>尝试获得一个许可,如果成功返回true，失败立即返回false。</p><h6 id="public-boolean-tryacquire-long-timeout-timeunit-unit" tabindex="-1">public boolean tryAcquire(long timeout,TimeUnit unit) <a class="header-anchor" href="#public-boolean-tryacquire-long-timeout-timeunit-unit" aria-label="Permalink to &quot;public boolean tryAcquire(long timeout,TimeUnit unit)&quot;">​</a></h6><h6 id="public-void-release" tabindex="-1">public void release() <a class="header-anchor" href="#public-void-release" aria-label="Permalink to &quot;public void release()&quot;">​</a></h6><p>线程访问结束后，释放一个许可。</p><h4 id="readwritelock读写锁" tabindex="-1">ReadWriteLock读写锁 <a class="header-anchor" href="#readwritelock读写锁" aria-label="Permalink to &quot;ReadWriteLock读写锁&quot;">​</a></h4><p>获取读锁 private static Lock readLock=readWriteLock.readLock(); 获取写锁 private static Lock writeLock=readWriteLock.writeLock();</p><h4 id="倒计时器countdownlatch" tabindex="-1">倒计时器CountDownLatch <a class="header-anchor" href="#倒计时器countdownlatch" aria-label="Permalink to &quot;倒计时器CountDownLatch&quot;">​</a></h4><p>顾名思义，计时器。书上举的例子的场景是火箭倒计时发射，火箭发射前要保证所有检查线程都结束。</p><h5 id="常用api-2" tabindex="-1">常用API <a class="header-anchor" href="#常用api-2" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="countdown" tabindex="-1">countDown() <a class="header-anchor" href="#countdown" aria-label="Permalink to &quot;countDown()&quot;">​</a></h6><h6 id="countdownlatch-int-count" tabindex="-1">CountDownLatch(int count) <a class="header-anchor" href="#countdownlatch-int-count" aria-label="Permalink to &quot;CountDownLatch(int count)&quot;">​</a></h6><h4 id="循环栅栏-cyclicbarrier" tabindex="-1">循环栅栏:CyclicBarrier <a class="header-anchor" href="#循环栅栏-cyclicbarrier" aria-label="Permalink to &quot;循环栅栏:CyclicBarrier&quot;">​</a></h4><p>阻止线程继续执行，要求线程在栅栏处等待。书上的场景是10个士兵一组去完成任务 但是书上的例子对于await()方法没有解释</p><h5 id="常用api-3" tabindex="-1">常用API <a class="header-anchor" href="#常用api-3" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="await-1" tabindex="-1">await() <a class="header-anchor" href="#await-1" aria-label="Permalink to &quot;await()&quot;">​</a></h6><p>等待所有parties已经在这个障碍上调用了await</p><h4 id="线程阻塞工具类locksupport" tabindex="-1">线程阻塞工具类LockSupport <a class="header-anchor" href="#线程阻塞工具类locksupport" aria-label="Permalink to &quot;线程阻塞工具类LockSupport&quot;">​</a></h4><p>可以在线程内任意位置让线程阻塞。 和Thread.suspend()相比,它弥补了由于resume()在之前发生导致线程无法继续执行的情况(第二章讨论的指令顺序的问题) 和Object.wait()相比,它不需要先获得某个对象的锁,也不会抛出Interruption的异常。</p><h5 id="常用api-4" tabindex="-1">常用API <a class="header-anchor" href="#常用api-4" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="park" tabindex="-1">park() <a class="header-anchor" href="#park" aria-label="Permalink to &quot;park()&quot;">​</a></h6><p>阻塞当前线程</p><h6 id="parknanos" tabindex="-1">parkNanos() <a class="header-anchor" href="#parknanos" aria-label="Permalink to &quot;parkNanos()&quot;">​</a></h6><h6 id="parkuntil" tabindex="-1">parkUntil() <a class="header-anchor" href="#parkuntil" aria-label="Permalink to &quot;parkUntil()&quot;">​</a></h6><p>限时等待</p><h3 id="线程复用-线程池" tabindex="-1">线程复用:线程池 <a class="header-anchor" href="#线程复用-线程池" aria-label="Permalink to &quot;线程复用:线程池&quot;">​</a></h3><p>为什么使用线程池？</p><ol><li>创建和小会线程都会花费时间</li><li>线程本身也会占用内存空间 所以,线程的使用必须掌握一个度,在有限的范围内,增加线程的数量可以明显提高系统的吞吐量</li></ol><h4 id="什么是线程池" tabindex="-1">什么是线程池 <a class="header-anchor" href="#什么是线程池" aria-label="Permalink to &quot;什么是线程池&quot;">​</a></h4><p>和数据库连接池类似,维护一些数据库连接。</p><h4 id="不要重复发明轮子-jdk对线程池的支持" tabindex="-1">不要重复发明轮子:JDK对线程池的支持 <a class="header-anchor" href="#不要重复发明轮子-jdk对线程池的支持" aria-label="Permalink to &quot;不要重复发明轮子:JDK对线程池的支持&quot;">​</a></h4><p>jdk提供了Executor框架，其本质就是一个线程池。 <img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/%E6%88%AA%E5%B1%8F2022-08-23%20%E4%B8%8B%E5%8D%882.01.00.png" alt=""> 上面的都是juc包中的核心类 ThreadPoolExecutor表示一个<strong>线程池</strong>。 Executors类则扮演着<strong>线程池工厂</strong>的的角色,通过Executors可以取得一个拥有特定功能的线程池。</p><h5 id="常用api-5" tabindex="-1">常用API <a class="header-anchor" href="#常用api-5" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="public-static-executorservice-newfixedthreadpool" tabindex="-1">public static ExecutorService newFixedThreadPool() <a class="header-anchor" href="#public-static-executorservice-newfixedthreadpool" aria-label="Permalink to &quot;public static ExecutorService newFixedThreadPool()&quot;">​</a></h6><p>该方法返回一个固定线程数量的线程池, 有新的任务提交时，如果池中有空闲线程则立即执行。</p><h6 id="public-static-executorservice-newsinglethreadexecutor" tabindex="-1">public static ExecutorService newSingleThreadExecutor() <a class="header-anchor" href="#public-static-executorservice-newsinglethreadexecutor" aria-label="Permalink to &quot;public static ExecutorService newSingleThreadExecutor()&quot;">​</a></h6><p>返回一个只有一个线程的线程池。多个任务提交的话，会有一个等待队列。</p><h6 id="public-static-executorservice-newcachedthreadpool" tabindex="-1">public static ExecutorService newCachedThreadPool() <a class="header-anchor" href="#public-static-executorservice-newcachedthreadpool" aria-label="Permalink to &quot;public static ExecutorService newCachedThreadPool()&quot;">​</a></h6><p>返回一个可根据实际情况调整线程数量的线程池。如果空闲线程可以复用，则优先使用。如果没有线程可以复用，则创建新的线程。</p><h6 id="public-static-scheduledexecutorservice-newsinglethreadscheduledexecutors" tabindex="-1">public static ScheduledExecutorService newSingleThreadScheduledExecutorS() <a class="header-anchor" href="#public-static-scheduledexecutorservice-newsinglethreadscheduledexecutors" aria-label="Permalink to &quot;public static ScheduledExecutorService newSingleThreadScheduledExecutorS()&quot;">​</a></h6><p>返回一个ScheduleExecutorService对象，线程池大小为1，这个对象可以周期性执行某个任务。</p><h6 id="public-static-scheduledexecutorservice-newscheduledthreadpool-int-corepoolsize" tabindex="-1">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) <a class="header-anchor" href="#public-static-scheduledexecutorservice-newscheduledthreadpool-int-corepoolsize" aria-label="Permalink to &quot;public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)&quot;">​</a></h6><p>也返回一个ScheduleExecutorService对象，但是可以指定线程数量。</p><h5 id="核心线程池的内部实现" tabindex="-1">核心线程池的内部实现 <a class="header-anchor" href="#核心线程池的内部实现" aria-label="Permalink to &quot;核心线程池的内部实现&quot;">​</a></h5><p>三种模式的线程池内部都实现了ThreadPoolExecutor</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nThreads){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(nThreads,nThreads,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,TimeUnit.MILLISECONDS,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LinkedBlokingQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>ThreadPoolExecutor最重要的构造函数</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> corePoolSize,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> maximumPoolSize,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> keepAliveTime,TimeUnit unit,BlockingQueue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Runnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span></code></pre></div><p>来看一下参数 <strong>corePoolSize</strong>:指定了线程池中的线程数量<strong>maximumPoolSize</strong>:指定了线程池中的最大线程数量<strong>keepAliveTime</strong>:当线程池数量超过corePoolSize时多余的线程存活的时间<strong>unit</strong>:keepAliveTime的单位<strong>workQueue</strong>:任务队列,被提交但尚未被执行的任务<strong>threadFactory</strong>:线程工厂,用于创建线程,一般用默认的即可<strong>handler</strong>:拒绝策略。当任务太多来来不及处理,如何拒绝任务需要着重关注的是workQueue和handler参数 workQueue是被提交但未执行的<strong>任务队列</strong>,它是一个BlockingQueue接口的对象,仅用于存放Runnable对象。根据队列的狗功能分类,在ThreadPoolExecutor的构造函数中可以使用以下几种BlockingQueue。</p><ol><li>直接提交的队列该功能由SynchronousQueue对象提供。任务不会真实的保存,总是将新任务提交给线程执行(后面书上的描述???)</li><li>有界的任务队列ArrauBlockingQueue(int capacity)由ArrayBlockingQueue实现。如果线程池的实际线程数小于corePoolSize,则会优先创建新的线程。如果大于corePoolSize,则会将新任务加入等待队列。若等待队列已满,无法加入。</li><li>无界的任务队列无界的任务队列:无界任务队列可以通过LinkedBlockingQueue类实现,与有界的任务队列相比,除非系统资源耗尽,不存在入队失败的情况。</li><li>优先任务队列 带着优先级的无界队列,通过PriorityBlockingQueue实现。</li></ol><h6 id="超过负载之后的拒绝策略" tabindex="-1">超过负载之后的拒绝策略 <a class="header-anchor" href="#超过负载之后的拒绝策略" aria-label="Permalink to &quot;超过负载之后的拒绝策略&quot;">​</a></h6><p>ThreadPoolExecutor的最后一个参数指定了拒绝策略。当线程池中的线程用完了,无法为新任务服务,同时,等待队列中已经排满了,无法容纳新的任务。 JDK内置了四种拒绝策略</p><ol><li>AbortPolicy策略:该策略会直接抛出异常,阻止系统正常工作。</li><li>CallerRunsPolicy策略:只要线程池未关闭,改策略直接在调用者线程中，运行当前被丢弃任务。</li><li>DiscardOledestPolicy策略:该策略将丢弃最老的一个请求,也是就是即将被执行的任务。</li><li>DiscardPolicy:默默丢弃无法处理的任务。 以上策略均实现了RejectExectionHandler接口，也可以自己扩展接口。</li></ol><h5 id="自定义线程的创建-threadfactory" tabindex="-1">自定义线程的创建:ThreadFactory <a class="header-anchor" href="#自定义线程的创建-threadfactory" aria-label="Permalink to &quot;自定义线程的创建:ThreadFactory&quot;">​</a></h5><h6 id="扩展线程池" tabindex="-1">扩展线程池 <a class="header-anchor" href="#扩展线程池" aria-label="Permalink to &quot;扩展线程池&quot;">​</a></h6><p>ThreadPoolExecutor也是一个可以扩展到线程池。它提供了三个接口对线程池进行控制: beforeExecute() afterExecute() terminate() ThreadPoolExecutor.Worker是ThreadPoolExecutor的<strong>内部类</strong>,它是一个<strong>实现了Runnable接口的类</strong>。ThreadPoolExecutor线程中的工作线程也是Worker实例。通过beforeExecute()和afterExecute()可以帮助我们输出一些调试的信息。 按照书上的说法对于应用程序的调试和诊断是非常有帮助的。</p><h6 id="优化线程池线程数量" tabindex="-1">优化线程池线程数量 <a class="header-anchor" href="#优化线程池线程数量" aria-label="Permalink to &quot;优化线程池线程数量&quot;">​</a></h6><h6 id="线程池中的堆栈" tabindex="-1">线程池中的堆栈 <a class="header-anchor" href="#线程池中的堆栈" aria-label="Permalink to &quot;线程池中的堆栈&quot;">​</a></h6><p>对于我们查看多线程程序的运行情况的了解非常有帮助。 使用execute()或者Future类型,如: Future re=pools.submit(new DivTask(100,i)); re.get(); 更进一步,我们可以找到任务是在哪里提交的,这就需要我们来动手扩展线程池 其实和上面的Runnable扩展一样，本质上是输出堆栈信息。</p><h4 id="分而治之-fork-join框架" tabindex="-1">分而治之:Fork/Join框架 <a class="header-anchor" href="#分而治之-fork-join框架" aria-label="Permalink to &quot;分而治之:Fork/Join框架&quot;">​</a></h4><p>将大任务分割成若干个小任务。</p><h5 id="常用api-6" tabindex="-1">常用API <a class="header-anchor" href="#常用api-6" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="public-t-forkjointask-t-submit-forjointask-t-task" tabindex="-1">public <code>&lt;T&gt;</code> ForkJoinTask <code>&lt;T&gt;</code> submit(ForJoinTask <code>&lt;T&gt;</code> task) <a class="header-anchor" href="#public-t-forkjointask-t-submit-forjointask-t-task" aria-label="Permalink to &quot;public \`&lt;T&gt;\` ForkJoinTask \`&lt;T&gt;\` submit(ForJoinTask \`&lt;T&gt;\` task)&quot;">​</a></h6><p>可以向ForkJoinPool线程池提交一个ForkJoinTask任务.</p><h3 id="jdk的并发容器" tabindex="-1">JDK的并发容器 <a class="header-anchor" href="#jdk的并发容器" aria-label="Permalink to &quot;JDK的并发容器&quot;">​</a></h3><p>JDK提供大量好用的容器类</p><h4 id="并发集合简介" tabindex="-1">并发集合简介 <a class="header-anchor" href="#并发集合简介" aria-label="Permalink to &quot;并发集合简介&quot;">​</a></h4><ol><li>ConcurrentHashMap:这是一个高效的并发HashMap。<strong>线程安全的HashMap</strong>。</li><li>CopyOnWriteArrayList:适合<strong>读多写少</strong>的场合。</li><li>ConcurrentLinkedQueue:高效的并发队列,使用链表实现。可以看做是一个<strong>线程安全的Linkedlist</strong>。</li><li>BlockingQueue：这是一个接口,JDK内部通过链表和数组实现。表示阻塞队列,适合作为<strong>数据共享的通道</strong>。</li><li>ConcurrentSkipListMap:跳表的实现。Map,使用跳表的数据结构进行快速查找。</li></ol><h4 id="map的安全集合concurrenthashmap" tabindex="-1">Map的安全集合ConcurrentHashMap <a class="header-anchor" href="#map的安全集合concurrenthashmap" aria-label="Permalink to &quot;Map的安全集合ConcurrentHashMap&quot;">​</a></h4><h4 id="list的线程安全vector" tabindex="-1">List的线程安全Vector <a class="header-anchor" href="#list的线程安全vector" aria-label="Permalink to &quot;List的线程安全Vector&quot;">​</a></h4><h4 id="高效的读写队列-concurrentlinkedqueue" tabindex="-1">高效的读写队列:ConcurrentLinkedQueue <a class="header-anchor" href="#高效的读写队列-concurrentlinkedqueue" aria-label="Permalink to &quot;高效的读写队列:ConcurrentLinkedQueue&quot;">​</a></h4><h4 id="不变模式下的copyonwritearraylist" tabindex="-1">不变模式下的CopyOnWriteArrayList <a class="header-anchor" href="#不变模式下的copyonwritearraylist" aria-label="Permalink to &quot;不变模式下的CopyOnWriteArrayList&quot;">​</a></h4><h4 id="数据共享通道blockingqueue" tabindex="-1">数据共享通道BlockingQueue <a class="header-anchor" href="#数据共享通道blockingqueue" aria-label="Permalink to &quot;数据共享通道BlockingQueue&quot;">​</a></h4><h4 id="随机数据结构-跳表-skiplist" tabindex="-1">随机数据结构:跳表(SkipList) <a class="header-anchor" href="#随机数据结构-跳表-skiplist" aria-label="Permalink to &quot;随机数据结构:跳表(SkipList)&quot;">​</a></h4><h2 id="第四章-关于锁和锁的优化" tabindex="-1">第四章 关于锁和锁的优化 <a class="header-anchor" href="#第四章-关于锁和锁的优化" aria-label="Permalink to &quot;第四章 关于锁和锁的优化&quot;">​</a></h2><p>对于多线程来说，系统除了处理功能需求以外，还需要维护和多线程相关的信息，例如，线程本身的<strong>元数据</strong>(???并不是很懂),线程的调度和线程上下问的切换。 这一章主要围绕如何优化锁来展开，采用的手段有：避免死锁、减小锁的粒度和锁分离等</p><h3 id="提升锁性能的建议" tabindex="-1">提升锁性能的建议 <a class="header-anchor" href="#提升锁性能的建议" aria-label="Permalink to &quot;提升锁性能的建议&quot;">​</a></h3><h4 id="减少锁的持有时间" tabindex="-1">减少锁的持有时间 <a class="header-anchor" href="#减少锁的持有时间" aria-label="Permalink to &quot;减少锁的持有时间&quot;">​</a></h4><p>书上举的例子是100个人排队填写表格，如果每个人都拿着笔才开始思考要填什么，那么话费时间肯定会过长。 对应到代码上应该进行如下优化(以jdk并发包中的正则表达式类Pattern为例)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Matcher </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CharSequence input){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">complied){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        synchornized</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">complied){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//个人猜测为了一种可能为了线程安全，还有一种可能为了代码的健壮性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                complied</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Mathcer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,input);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="减少锁的粒度" tabindex="-1">减少锁的粒度 <a class="header-anchor" href="#减少锁的粒度" aria-label="Permalink to &quot;减少锁的粒度&quot;">​</a></h4><p>这里以ConcurrentHashMap为例(还是1.7的版本,不过不影响学习其锁优化的过程)，其中最为重要的就是put方法和get方法，因为增删的时候最需要保证并发的安全性。 1.7采取的策略是在类内部又有16个HashMap,每个称之为段,这样一个实例的不同段就可被不同的线程持有。 下面这段是put方法(其中有一部分暂时还看不懂)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> V </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(K key,V value){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Segment</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //先处理空指针</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NullPointExeception</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //对key进行hash处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hsah</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //获得对应的段的序号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">segmentShift)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">segmentMask;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Segment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">K,V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)UNSAFE.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(segments,(j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SSHIFT)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">SBASE))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //上面的if进行了一次非可变性的检验，确保在确认的段里(过于拗口)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ensureSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(j);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key,hash,value,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><p>但是另一个问题随之而来，就是在获取全局锁的时候消耗资源会更大。 ConcurrentHashMap中的size()方法就是获取全部的有效表项之和,为了达成这一目的，就需要去获取全部的锁,那么在计算时就需要对每个段进行加锁。 但是如果每次计算size的都需要加锁肯定消耗过大,所以首先用采用无锁的策略,只有失败之后才会尝试加锁。 综上: 只有size()这种全局方法调用不频繁时,加锁才能提供并发吞吐量。</p><h4 id="读写分离锁来替换独占锁" tabindex="-1">读写分离锁来替换独占锁 <a class="header-anchor" href="#读写分离锁来替换独占锁" aria-label="Permalink to &quot;读写分离锁来替换独占锁&quot;">​</a></h4><p>这个之前有学习过，先掌握ReadWriterLock的API即可。</p><h4 id="锁分离" tabindex="-1">锁分离 <a class="header-anchor" href="#锁分离" aria-label="Permalink to &quot;锁分离&quot;">​</a></h4><p>在读写锁的思想上进一步延伸，就是锁分离。 根据应用程序的功能,采用类似锁分离的思想,将独占锁替换为可分离的锁。 书上的例子是BlockingLinkQueue这个数据结构，众所周知，所有的数据结构最基本的数据操作就是创建销毁和增删改查。从这个角度出发，将take()和put()用两个锁来分离。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> takeLock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//被take,poll操作线程持有的锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> notEmpty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">takeLock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> putLock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//被put,offer操作线程持有的锁。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> notFull</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">putLock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>take和put之间并不存在锁竞争的关系。 下面来看一下take方法的源码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"></span></code></pre></div><h4 id="锁粗化" tabindex="-1">锁粗化 <a class="header-anchor" href="#锁粗化" aria-label="Permalink to &quot;锁粗化&quot;">​</a></h4><p>如果代码中有多个代码块加锁,那么JVM虚拟机会尝试将能够合并的锁进行合并。</p><h3 id="java对锁优化的努力" tabindex="-1">Java对锁优化的努力 <a class="header-anchor" href="#java对锁优化的努力" aria-label="Permalink to &quot;Java对锁优化的努力&quot;">​</a></h3><h4 id="锁偏向" tabindex="-1">锁偏向 <a class="header-anchor" href="#锁偏向" aria-label="Permalink to &quot;锁偏向&quot;">​</a></h4><p>实例对象已经被当前线程lock了,那么实例对象的头部信息里会有一个标志来进行锁偏向的记录,就可以减少加锁的资源开销。</p><h4 id="轻量级锁" tabindex="-1">轻量级锁 <a class="header-anchor" href="#轻量级锁" aria-label="Permalink to &quot;轻量级锁&quot;">​</a></h4><p>如果线程获取偏向锁失败,虚拟机并不会立即挂起线程,它还会使用一种被称为轻量级锁的优化手段。这个操作将对象的头部作为指针指向持有锁的线程堆栈的内部,来判断一个对象是否持有对象锁。如果轻量级锁加锁失败,则表示其他线程争夺到了锁,那么当前线程的锁请求就膨胀为重量级锁。</p><h4 id="自旋锁" tabindex="-1">自旋锁 <a class="header-anchor" href="#自旋锁" aria-label="Permalink to &quot;自旋锁&quot;">​</a></h4><p>重量级锁前的最后尝试,虚拟机会让当前线程几个空循环,如果还不能获取锁,才会真实地在操作系统层面挂起。</p><h4 id="锁的消除" tabindex="-1">锁的消除 <a class="header-anchor" href="#锁的消除" aria-label="Permalink to &quot;锁的消除&quot;">​</a></h4><p>Java虚拟机在JIT编译时,通过对运行上下文的扫描,去除不可能存在共享资源竞争的锁。 书上的例子很简单</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createStrings</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Vector＜String＞ v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Vector＜String＞();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;i＜</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]{});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>函数有自己方法栈,也就是说v是局部变量,属于线程私有的数据,因此<strong>不可能被其他线程访问</strong>,内部所有加锁同步都是没有必要的。如果虚拟机检测到这种情况,就会将这些无用的锁操作去除。 锁消除涉及的一项关键技术为<strong>逃逸分析</strong>,所谓逃逸分析就是观察某个变量是否会逃出某个作用域。 也就是如果上面的上面的方法返回的是v,那么认为局部变量v逃逸。所以虚拟机中就不能消除v中的操作。</p><h3 id="threadlocal线程私有变量" tabindex="-1">ThreadLocal线程私有变量 <a class="header-anchor" href="#threadlocal线程私有变量" aria-label="Permalink to &quot;ThreadLocal线程私有变量&quot;">​</a></h3><p>这个类就是将变量存储到线程的<strong>存值区域(ThreadLocalMap)</strong>，也就是说会随着线程的生命周期存在，但是现代化的框架中都会有线程池，所以用完之后需要将线程的存值区域清空掉。</p><h4 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-label="Permalink to &quot;简单使用&quot;">​</a></h4><h4 id="threadlocal的实现原理" tabindex="-1">ThreadLocal的实现原理 <a class="header-anchor" href="#threadlocal的实现原理" aria-label="Permalink to &quot;ThreadLocal的实现原理&quot;">​</a></h4><h4 id="对性能有何帮助" tabindex="-1">对性能有何帮助 <a class="header-anchor" href="#对性能有何帮助" aria-label="Permalink to &quot;对性能有何帮助&quot;">​</a></h4><h3 id="无锁-1" tabindex="-1">无锁 <a class="header-anchor" href="#无锁-1" aria-label="Permalink to &quot;无锁&quot;">​</a></h3><h4 id="比较交换cas" tabindex="-1">比较交换CAS <a class="header-anchor" href="#比较交换cas" aria-label="Permalink to &quot;比较交换CAS&quot;">​</a></h4><h5 id="原子类-atomicinteger" tabindex="-1">原子类(AtomicInteger) <a class="header-anchor" href="#原子类-atomicinteger" aria-label="Permalink to &quot;原子类(AtomicInteger)&quot;">​</a></h5><h5 id="java中的指针unsafe类" tabindex="-1">Java中的指针Unsafe类 <a class="header-anchor" href="#java中的指针unsafe类" aria-label="Permalink to &quot;Java中的指针Unsafe类&quot;">​</a></h5><h5 id="无锁的对象引用-atomicreference" tabindex="-1">无锁的对象引用:AtomicReference <a class="header-anchor" href="#无锁的对象引用-atomicreference" aria-label="Permalink to &quot;无锁的对象引用:AtomicReference&quot;">​</a></h5><h5 id="带有时间戳的对象引用" tabindex="-1">带有时间戳的对象引用 <a class="header-anchor" href="#带有时间戳的对象引用" aria-label="Permalink to &quot;带有时间戳的对象引用&quot;">​</a></h5><h5 id="无锁数组-atomicintegerarray" tabindex="-1">无锁数组:AtomicIntegerArray <a class="header-anchor" href="#无锁数组-atomicintegerarray" aria-label="Permalink to &quot;无锁数组:AtomicIntegerArray&quot;">​</a></h5><h5 id="让普通变量也享受原子操作-atomicintegerfieldupdater" tabindex="-1">让普通变量也享受原子操作:AtomicIntegerFieldUpdater <a class="header-anchor" href="#让普通变量也享受原子操作-atomicintegerfieldupdater" aria-label="Permalink to &quot;让普通变量也享受原子操作:AtomicIntegerFieldUpdater&quot;">​</a></h5><h5 id="无锁的vector实现" tabindex="-1">无锁的Vector实现 <a class="header-anchor" href="#无锁的vector实现" aria-label="Permalink to &quot;无锁的Vector实现&quot;">​</a></h5><h5 id="细看synchronousqueue的实现" tabindex="-1">细看SynchronousQueue的实现 <a class="header-anchor" href="#细看synchronousqueue的实现" aria-label="Permalink to &quot;细看SynchronousQueue的实现&quot;">​</a></h5><h3 id="有关死锁" tabindex="-1">有关死锁 <a class="header-anchor" href="#有关死锁" aria-label="Permalink to &quot;有关死锁&quot;">​</a></h3><h2 id="并行模式与算法" tabindex="-1">并行模式与算法 <a class="header-anchor" href="#并行模式与算法" aria-label="Permalink to &quot;并行模式与算法&quot;">​</a></h2><h3 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h3><h3 id="不变模式-final关键字" tabindex="-1">不变模式(final关键字) <a class="header-anchor" href="#不变模式-final关键字" aria-label="Permalink to &quot;不变模式(final关键字)&quot;">​</a></h3><h3 id="生产者-消费者模式" tabindex="-1">生产者-消费者模式 <a class="header-anchor" href="#生产者-消费者模式" aria-label="Permalink to &quot;生产者-消费者模式&quot;">​</a></h3><h3 id="高性能的无锁的实现" tabindex="-1">高性能的无锁的实现 <a class="header-anchor" href="#高性能的无锁的实现" aria-label="Permalink to &quot;高性能的无锁的实现&quot;">​</a></h3><h3 id="future模式" tabindex="-1">Future模式 <a class="header-anchor" href="#future模式" aria-label="Permalink to &quot;Future模式&quot;">​</a></h3><p>异步调用机制,虽然它无法立即返回需要的数据,但是会返回一个契约,将来凭借这个契约去重新获取你需要的信息。</p><h4 id="future模式的主要角色" tabindex="-1">Future模式的主要角色 <a class="header-anchor" href="#future模式的主要角色" aria-label="Permalink to &quot;Future模式的主要角色&quot;">​</a></h4><ol><li>Main 系统启动,调用Client发出请求</li><li>Client 返回Data对象,立即返回FutureData,并开启ClientThread线程装配RealData</li><li>Data 返回数据的接口</li><li>FutureData Future数据,构造很快,但是一个虚拟的数据,需要装配RealData</li><li>真实数据,其构造是比较慢的</li></ol><h3 id="并行流水线" tabindex="-1">并行流水线 <a class="header-anchor" href="#并行流水线" aria-label="Permalink to &quot;并行流水线&quot;">​</a></h3><h3 id="并行搜索" tabindex="-1">并行搜索 <a class="header-anchor" href="#并行搜索" aria-label="Permalink to &quot;并行搜索&quot;">​</a></h3><h3 id="并行排序" tabindex="-1">并行排序 <a class="header-anchor" href="#并行排序" aria-label="Permalink to &quot;并行排序&quot;">​</a></h3><h3 id="并行算法-矩阵算法" tabindex="-1">并行算法:矩阵算法 <a class="header-anchor" href="#并行算法-矩阵算法" aria-label="Permalink to &quot;并行算法:矩阵算法&quot;">​</a></h3><h3 id="nio-准备好了再通知我" tabindex="-1">NIO(准备好了再通知我) <a class="header-anchor" href="#nio-准备好了再通知我" aria-label="Permalink to &quot;NIO(准备好了再通知我)&quot;">​</a></h3><p>书上的例子是从编写一个NIO服务器为例,但是在此之前我们需要对于unix网络编程有一定的了解。 本地进程通信的方式,其中一种就是socket(套接字,也就是将IP与端口号集合起来的抽象概念)。 首先实现了用tcp的Socket编写服务器(这部分可以参考基础部分),然后进阶到NIO编程。 NewIO,通过知乎的文章 <a href="https://zhuanlan.zhihu.com/p/25004921" target="_blank" rel="noreferrer">知乎_25004921</a>, 我们可以对于unix编程提供的接口有一定的了解,再去看书上的例子可以更加清晰。</p><h4 id="操作系统提供soket编程的接口" tabindex="-1">操作系统提供Soket编程的接口 <a class="header-anchor" href="#操作系统提供soket编程的接口" aria-label="Permalink to &quot;操作系统提供Soket编程的接口&quot;">​</a></h4><h5 id="socket-函数" tabindex="-1">socket()函数 <a class="header-anchor" href="#socket-函数" aria-label="Permalink to &quot;socket()函数&quot;">​</a></h5><p>int socket(int domain,int type,int protocol) socket函数对应于普通文件打开操作,返回一个文件描述字,socket()用于创建一个socket描述符 domain:协议族。AF_INET、AF_INET6,协议族决定了socket的地址类型,例如ANF_INET决定了要用ipv4(32位)与端口号的组合。 type:指定socket类型。 protocol:顾名思义，就是指定协议。</p><h5 id="bind-函数" tabindex="-1">bind()函数 <a class="header-anchor" href="#bind-函数" aria-label="Permalink to &quot;bind()函数&quot;">​</a></h5><p>int bind(int sockfd,const struct sockaddr *addr ,socklen_t addrlen) 把一个地址族中的特定地址赋给socket</p><h5 id="listen-、connect-函数" tabindex="-1">listen()、connect()函数 <a class="header-anchor" href="#listen-、connect-函数" aria-label="Permalink to &quot;listen()、connect()函数&quot;">​</a></h5><p>listen()服务端在调用socket()、bind()之后调用listen()来监听这个socket 如果客户端调用connect()发出连接请求,服务端就会接收到这个请求</p><h5 id="accept-函数" tabindex="-1">accept()函数 <a class="header-anchor" href="#accept-函数" aria-label="Permalink to &quot;accept()函数&quot;">​</a></h5><p>TCP服务器监听到这个请求之后,就会调用accept()函数接收请求,这样连接就建立好了。</p><h5 id="read-、write" tabindex="-1">read()、write() <a class="header-anchor" href="#read-、write" aria-label="Permalink to &quot;read()、write()&quot;">​</a></h5><p>网络I/O操作</p><h5 id="close-函数" tabindex="-1">close()函数 <a class="header-anchor" href="#close-函数" aria-label="Permalink to &quot;close()函数&quot;">​</a></h5><p>完成了读写操作之后就要关闭相应的socket描述字。</p><h4 id="jdk中的对应的nio类" tabindex="-1">JDK中的对应的NIO类 <a class="header-anchor" href="#jdk中的对应的nio类" aria-label="Permalink to &quot;JDK中的对应的NIO类&quot;">​</a></h4><p>两台计算机连接:</p><ol><li>服务器实例化一个<strong>ServerSocket对象</strong>,表示通过服务器上的端口通信。</li><li>服务器调用ServerSocket类的<strong>accept</strong>方法,该方法将一直等待,直到客户端连接到服务器上给定的端口。</li><li>服务器正在等待时,一个客户端实例化一个Socket对象,指定服务器名称和端口号来请求连接。</li><li>Socket类的构造函数将客户端连接到指定的服务器和端口号,如果通信被建立,则在客户端创建一个Socket对象能够与服务器进行通信(和3在同一步骤)。</li><li>在服务器,accept()方法返回服务器上的一个新的socket引用,该socket连接到客户端的socket。此外还有一个数据结构<strong>ByteBuffer</strong>,本质上就是一个数组。几个重要的参数:</li><li>容量(Capacity)缓冲区能够容纳的数据元素的最大数量。容量在缓冲区创建时被设定,并且永远不能改变。</li><li>上界(Limit)缓冲区里的数据的总数,代表了当前缓冲区一共有多少数据(这个参数下文会反复提到,filp()函数中会对这个值做修改)。</li><li>位置(Position)下一个要被读或写的元素的位置。Position会自动由相应的get()和put()函数更新。</li><li>标记(Mark)一个备忘位置。用于记录上一次读写的位置。 如果在ByteBuffer中放入了数据,然后想从中读取的话,就需要position这个字段放到想读的位置(那为什么不放这个字段呢？)</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Buffer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newPosition){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newPosition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (newPosition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IllegalArgumentExcetion;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newPosition;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> position){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            mark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/bytebuffer%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9A%84limit.png" alt=""> 其中limit代表可写或者可读的总数。一个新创建的bytebuffer,它可写的总数就是它的capacity。如果写入了一些数据以后,想从头开始读的话,这时候的<strong>limit就是当前ByteBuffer数据的长度</strong>。 为了从写数据变成读数据的情况,还需要修改limit,这就要用到limit方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Buffer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newLimit){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (newLimit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IllegalArgumentExcetion;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newLimit;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(postion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> limit) position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">limit;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">limit) mark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>然后就是执行方法 byteBuffer.limit(byteBuffer.position()); byteBuffer.position(0); 由于这个方法操作非常频繁,jdk为此封装了一个方法flip()</p><hr><p><strong>注意</strong>:</p><ol><li>客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流</li><li>TCP双向通信,同一时刻可由客户端发送到服务器端,也可由服务器端发送到客户端。</li></ol><hr><h5 id="serversocket" tabindex="-1">ServerSocket <a class="header-anchor" href="#serversocket" aria-label="Permalink to &quot;ServerSocket&quot;">​</a></h5><p>服务器端用这个类创建Socket,并监听客户端请求</p><h5 id="socket" tabindex="-1">Socket <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;Socket&quot;">​</a></h5><p>客户端用的Socket</p><h5 id="inetaddress" tabindex="-1">InetAddress <a class="header-anchor" href="#inetaddress" aria-label="Permalink to &quot;InetAddress&quot;">​</a></h5><p>表示IP地址的类</p><h5 id="再看nio服务器" tabindex="-1">再看NIO服务器 <a class="header-anchor" href="#再看nio服务器" aria-label="Permalink to &quot;再看NIO服务器&quot;">​</a></h5><p>这次我们从IO模型出发,其实Java代码最终也是通过JNI调用系统接口。 知乎上这篇专栏讲得很好,用C语言手写了一个服务端,再通过Java客户端去进行访问。</p><h5 id="为什么会有selector" tabindex="-1">为什么会有Selector??? <a class="header-anchor" href="#为什么会有selector" aria-label="Permalink to &quot;为什么会有Selector???&quot;">​</a></h5><p>看书的时候会有疑问 第一个疑问是书上只说了用Selector来管理Channnel,但是却没有说明为什么使用。 第二个疑问是注册是设置感兴趣的事件。 为了回答上面的问题,还是得从IO模型出发,5种模型有一种模型叫做IO多路复用模型。 先来回答第一个问题,Selector其实就是select/poll/epoll的包装类。 上面的回答狗看了直摇头,这是什么玩意儿... 先回答第二个问题 <img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8A%E5%8D%889.38.17.png" alt=""> 最常用的I/O<strong>事件通知机制</strong>就是IO复用(I/O multiplexing),<strong>I/O复用接口本身是阻塞的</strong>,在应用程序中通过I/O复用接口<strong>向内核注册fd(描述符)<strong>所关注的事件(回头看Java中的API也就能理解了),当事件触发时,通过I/O复用接口的返回值通知到应用程序。I/O复用接口可以同时监听</strong>多个I/O事件</strong>提升处理效率。</p><h3 id="aio-读完了再通知我" tabindex="-1">AIO(读完了再通知我) <a class="header-anchor" href="#aio-读完了再通知我" aria-label="Permalink to &quot;AIO(读完了再通知我)&quot;">​</a></h3><p>在开始学习之前,我们需要了解一下unix编程的5种IO模型 <a href="https://zhuanlan.zhihu.com/p/27382996" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/27382996</a> NIO和AIO分别对应的是非阻塞模型和异步IO模型(其他的可以在unix网络编程中进行了解) 来看一下start()方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //客户端请求的处理和接收</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;server listen on&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PORT);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //注册事件和事件完成后的处理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CompletionHandler&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AsynchronousSocketChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ByteBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> completed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(AsynchronousSocketChannel </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attachment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">writeResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    writeResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (ExecutionException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (TimeoutException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        writeResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (ExecutionException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> failed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">exc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attachment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;failed:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">exc);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><p>在上面的start()方法中最重要的就是accept方法，第一个参数不多做描述 主要是第二个参数其实就是一个Handler(在Java基础中接触过,调用处理器,当某个特定事件发生时会自动被调用),这个接口中有两个方法void completed(V result,A attachment)void failed(Throwable exc,A attchment)这两个方法分别在<strong>异步操作accept()成功时或者失败时被回调</strong>因此AsynchronousServerSocketChannel.accept()主要做了两件事:</p><ol><li>发起accept请求,<strong>告诉系统可以开始监听端口</strong>。</li><li>注册CompletionHandler实例,告诉系统一旦有客户端连接,如果成功连接,就去执行CompletionHandler.completed()方法;如果连接失败,就去执行CompletionHandler.failed()方法</li></ol>`,294);function C(a,m,q,B,F,f){const n=l,h=k("ClientOnly");return e(),p("div",null,[b,o(h,null,{default:d(()=>{var i,s;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((s=a.$frontmatter)==null?void 0:s.showArticleMetadata)??!0)?(e(),g(n,{key:0,article:a.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),D])}const w=r(y,[["render",C]]);export{v as __pageData,w as default};
