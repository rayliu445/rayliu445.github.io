(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{349:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"第一章-走入并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-走入并行"}},[t._v("#")]),t._v(" 第一章 走入并行")]),t._v(" "),a("h3",{attrs:{id:"必须知道的几个概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必须知道的几个概念"}},[t._v("#")]),t._v(" 必须知道的几个概念")]),t._v(" "),a("h6",{attrs:{id:"同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[t._v("#")]),t._v(" 同步和异步")]),t._v(" "),a("p",[t._v("同步:串行执行，必须得等前面的执行完以后后面的任务才能执行。\n异步:调用方法后立即返回，然后调用者可以立即执行后面的任务，而等被调用的方法完成之后会通知调用者。")]),t._v(" "),a("h6",{attrs:{id:"并发与并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行"}},[t._v("#")]),t._v(" 并发与并行")]),t._v(" "),a("p",[t._v("并发:短时间内还是串行。\n并行:真正意义上的同时执行。")]),t._v(" "),a("h6",{attrs:{id:"临界区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临界区"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),a("p",[t._v("多个线程共享的公共资源或者是共享数据。每一次只能有一个线程占用。")]),t._v(" "),a("h6",{attrs:{id:"阻塞与非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞"}},[t._v("#")]),t._v(" 阻塞与非阻塞")]),t._v(" "),a("p",[t._v("阻塞:如果其他线程占用了临界区资源，那么当前线程会在临界区挂起,这种情况称为阻塞。")]),t._v(" "),a("h6",{attrs:{id:"死锁、饥饿、活锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁、饥饿、活锁"}},[t._v("#")]),t._v(" 死锁、饥饿、活锁")]),t._v(" "),a("h6",{attrs:{id:"死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),a("p",[t._v("死锁:如果多个线程循环等待,那么就会出现死锁。\n死锁产生的三个条件:\n1.互斥条件：同一资源同一时刻只能被一个线程占有。\n2.请求与保持条件：拿到了资源以后,如果因为请求资源而阻塞,那么就会持有资源不释放。\n3.不可剥夺条件:资源在被一个线程拿走之后，其他线程就不能剥夺这个线程的资源。\n4.循环等待条件:线程之间会等待其他线程的资源从而形成一个等待循环。\n破坏死锁:\n1.破坏请求与保持条件:一次性申请所有资源。\n2.破坏不可剥夺条件:占用部分资源的线程去申请其他资源，如果申请不到的话那么就释放掉持有的资源。\n3.破坏循环等待条件:按序申请资源,资源反序释放。这样就能保证一个线程从头到尾获得资源。")]),t._v(" "),a("h6",{attrs:{id:"饥饿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#饥饿"}},[t._v("#")]),t._v(" 饥饿")]),t._v(" "),a("p",[t._v("某一线程或者多个线程以为请求不到资源导致一直无法运行(猜测是以时间来判断???),比如因为线程优先级过低，一直有高优先级线程执行。")]),t._v(" "),a("h6",{attrs:{id:"活锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#活锁"}},[t._v("#")]),t._v(" 活锁")]),t._v(" "),a("p",[t._v("活锁则是因为过于“谦让“而导致线程无法拿到全部资源。想象的场景是:两个人不停为对方让路。")]),t._v(" "),a("h3",{attrs:{id:"并发级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发级别"}},[t._v("#")]),t._v(" 并发级别")]),t._v(" "),a("h6",{attrs:{id:"阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞"}},[t._v("#")]),t._v(" 阻塞")]),t._v(" "),a("p",[t._v("采用的是悲观策略。")]),t._v(" "),a("h6",{attrs:{id:"无饥饿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无饥饿"}},[t._v("#")]),t._v(" 无饥饿")]),t._v(" "),a("p",[t._v("尽量采用公平的线程队列，好让所有线程都能够有机会执行。")]),t._v(" "),a("h6",{attrs:{id:"无障碍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无障碍"}},[t._v("#")]),t._v(" 无障碍")]),t._v(" "),a("p",[t._v("首先是一种乐观的策略,所有线程都可以进入临界区,当多个线程共同修改数据而导致数据破坏时会采用"),a("strong",[t._v("回滚")]),t._v('策略(侧面也可以看出这种级别认为不会有过多的线程同时修改资源导致并发问题)。\n可行的无障碍实现是依赖一个"一致性标记"来实现。线程在操作之前,先读取并保存这个标记,在操作完成以后,再次读取，检查这个标记是否被修改过。')]),t._v(" "),a("h6",{attrs:{id:"无锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无锁"}},[t._v("#")]),t._v(" 无锁")]),t._v(" "),a("p",[t._v("无锁是无障碍的。\n无锁会有多个线程在临界区内修改资源,但是总有一个会成功???")]),t._v(" "),a("h6",{attrs:{id:"无等待"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无等待"}},[t._v("#")]),t._v(" 无等待")]),t._v(" "),a("p",[t._v("无等待要求线程在有限步内完成操作,这样不会引起饥饿问题(饥饿就是因为一直不执行)。\n典型的无等待结构RCU (Read-Copy-Update)。它的基本思想是,对数据的读不加修改。因此,所有的线程都是无等待的,它们既不会被锁定等待也不会引起任何冲突。")]),t._v(" "),a("h3",{attrs:{id:"并行有关的两个定律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行有关的两个定律"}},[t._v("#")]),t._v(" 并行有关的两个定律")]),t._v(" "),a("h6",{attrs:{id:"amdahal定律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amdahal定律"}},[t._v("#")]),t._v(" Amdahal定律")]),t._v(" "),a("h6",{attrs:{id:"gustafson定律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gustafson定律"}},[t._v("#")]),t._v(" Gustafson定律")]),t._v(" "),a("h3",{attrs:{id:"回到java-jmm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回到java-jmm"}},[t._v("#")]),t._v(" 回到Java:JMM")]),t._v(" "),a("p",[t._v("JMM:Java内存模型(和JVM关注的点不一样)。由于Java并发的复杂性,所以导致了线程不安全的问题,如何保证下面这些特性也是我们关注的重点:")]),t._v(" "),a("h6",{attrs:{id:"原子性-atomicity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性(Atomicity)")]),t._v(" "),a("p",[t._v("指的是"),a("strong",[t._v("一个操作还没完成前,其他线程无法干扰")]),t._v("。如果Java虚拟机是32位的话,那么long类型的变量赋值就有可能发生问题(因为long类型是64位,我猜测需要两个线程来完成赋值操作???),所以就会导致值和预期不一致的情况。")]),t._v(" "),a("h6",{attrs:{id:"可见性-visibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性-visibility"}},[t._v("#")]),t._v(" 可见性(Visibility)")]),t._v(" "),a("p",[a("strong",[t._v("如果在一个线程中修改了某个变量的值,其他共享的线程是否知道")]),t._v("。一般来说,其他线程观察当前线程(是否观察到、何时观察到)是无法保证的。")]),t._v(" "),a("h6",{attrs:{id:"有序性-ordering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有序性-ordering"}},[t._v("#")]),t._v(" 有序性(Ordering)")]),t._v(" "),a("p",[t._v("按照书上的说法来说,干扰有序性的主要因素就是指令重排。指令重排出现的问题就是减少操作系统"),a("strong",[t._v("流水线")]),t._v("机制的中断从而提升性能。指令重排也得满足"),a("strong",[t._v("语义串行性")]),t._v(",但是没有义务保证多线程间的语义也一致(书上的例子是线程1给a赋值,线程2对a的值做修改,但是线程2有可能先执行)。")]),t._v(" "),a("h5",{attrs:{id:"哪些指令不能重排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些指令不能重排"}},[t._v("#")]),t._v(" 哪些指令不能重排")]),t._v(" "),a("h6",{attrs:{id:"程序顺序原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序顺序原则"}},[t._v("#")]),t._v(" 程序顺序原则")]),t._v(" "),a("p",[t._v("一个线程内保证语义的串行性")]),t._v(" "),a("h6",{attrs:{id:"volatile规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile规则"}},[t._v("#")]),t._v(" volatile规则")]),t._v(" "),a("p",[a("strong",[t._v("volatile变量")]),t._v("的写,先发生于读,这保证了volatile变量的可见性")]),t._v(" "),a("h6",{attrs:{id:"锁规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁规则"}},[t._v("#")]),t._v(" 锁规则")]),t._v(" "),a("p",[t._v("解锁(unlock)必然发生在随后的加锁前。")]),t._v(" "),a("h6",{attrs:{id:"传递性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传递性"}},[t._v("#")]),t._v(" 传递性")]),t._v(" "),a("p",[t._v("a=b; b=c;\nA必然要先于C")]),t._v(" "),a("h6",{attrs:{id:"线程的start-先于它的每一个动作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的start-先于它的每一个动作"}},[t._v("#")]),t._v(" 线程的start()先于它的每一个动作")]),t._v(" "),a("p",[t._v("也就是说start方法会先执行。")]),t._v(" "),a("h6",{attrs:{id:"线程的所有操作先于线程的终结-thread-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的所有操作先于线程的终结-thread-join"}},[t._v("#")]),t._v(" 线程的所有操作先于线程的终结(Thread.join())")]),t._v(" "),a("h6",{attrs:{id:"线程的中断-interrupt-先于被中断线程的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的中断-interrupt-先于被中断线程的代码"}},[t._v("#")]),t._v(" 线程的中断(interrupt())先于被中断线程的代码")]),t._v(" "),a("h6",{attrs:{id:"对象的构造函数执行、结束于finalize-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的构造函数执行、结束于finalize-方法"}},[t._v("#")]),t._v(" 对象的构造函数执行、结束于finalize()方法")]),t._v(" "),a("p",[t._v("finalize()方法在JVM中看到过,可达性分析时会有一次标记,实例在finalize()方法中可以拯救自己一次(和可达链搭上关系)。")]),t._v(" "),a("h2",{attrs:{id:"第二章-java并行程序基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-java并行程序基础"}},[t._v("#")]),t._v(" 第二章 Java并行程序基础")]),t._v(" "),a("h3",{attrs:{id:"有关线程必知的事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有关线程必知的事"}},[t._v("#")]),t._v(" 有关线程必知的事")]),t._v(" "),a("h6",{attrs:{id:"进程与线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[t._v("#")]),t._v(" 进程与线程")]),t._v(" "),a("p",[t._v("进程资源分配和调度的"),a("strong",[t._v("基本单位")]),t._v("。\n线程是程序的"),a("strong",[t._v("最小执行单位")]),t._v("。\n线程的状态6种，记住并且能说出具体干了什么")]),t._v(" "),a("h6",{attrs:{id:"线程的6种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的6种状态"}},[t._v("#")]),t._v(" 线程的6种状态")]),t._v(" "),a("h3",{attrs:{id:"初始线程-线程的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始线程-线程的基本操作"}},[t._v("#")]),t._v(" 初始线程：线程的基本操作")]),t._v(" "),a("h6",{attrs:{id:"新建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建"}},[t._v("#")]),t._v(" 新建")]),t._v(" "),a("h6",{attrs:{id:"中止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中止"}},[t._v("#")]),t._v(" 中止")]),t._v(" "),a("h6",{attrs:{id:"中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断"}},[t._v("#")]),t._v(" 中断")]),t._v(" "),a("h6",{attrs:{id:"等待-wait-与唤醒-通知-notify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等待-wait-与唤醒-通知-notify"}},[t._v("#")]),t._v(" 等待(wait)与唤醒(通知 notify)")]),t._v(" "),a("p",[t._v("来自于Object的方法,Object类下面还有许多的方法也是面试经常会问到的")]),t._v(" "),a("h6",{attrs:{id:"挂起-suspend-与继续执行-resume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂起-suspend-与继续执行-resume"}},[t._v("#")]),t._v(" 挂起(suspend)与继续执行(resume)")]),t._v(" "),a("h6",{attrs:{id:"等待线程结束-join-与谦让-yield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等待线程结束-join-与谦让-yield"}},[t._v("#")]),t._v(" 等待线程结束(join)与谦让(yield)")]),t._v(" "),a("h3",{attrs:{id:"volatile与jmm-java内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile与jmm-java内存模型"}},[t._v("#")]),t._v(" volatile与JMM(Java内存模型)")]),t._v(" "),a("p",[t._v("在B站看了视频之后回来做一下补充首先需要先知道CPU缓存架构(操作系统)每个线程都有一个从主存中获取的副本变量,那么就会导致一个问题,线程中修改自己的副本变量不会对主存生效第一章的末尾描述了多线程环境下JMM产生的问题")]),t._v(" "),a("ol",[a("li",[t._v("原子性\n多线程针对同一变量做修改的话,可能引起变量与期望值不一致")]),t._v(" "),a("li",[t._v("可见性\n计算机对于经常访问的数据可能会放入cache或者寄存器中,A线程修改了变量值之后,B线程访问的还是缓存中的值")]),t._v(" "),a("li",[t._v("有序性\n同一个线程中,语义的串行话是能够保证的,但是A线程并不清楚B线程的执行顺序\nvolatile关键字能够保证有序性和可见性,但是复杂的原子操作并不能保证")])]),t._v(" "),a("h3",{attrs:{id:"分门别类的管理-线程组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分门别类的管理-线程组"}},[t._v("#")]),t._v(" 分门别类的管理(线程组)")]),t._v(" "),a("h3",{attrs:{id:"驻守后台的线程-守护线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#驻守后台的线程-守护线程"}},[t._v("#")]),t._v(" 驻守后台的线程(守护线程)")]),t._v(" "),a("h3",{attrs:{id:"先干重要的事-线程优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先干重要的事-线程优先级"}},[t._v("#")]),t._v(" 先干重要的事(线程优先级)")]),t._v(" "),a("h3",{attrs:{id:"线程安全的概念与synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程安全的概念与synchronized"}},[t._v("#")]),t._v(" 线程安全的概念与synchronized")]),t._v(" "),a("h4",{attrs:{id:"方法加锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法加锁"}},[t._v("#")]),t._v(" 方法加锁")]),t._v(" "),a("p",[t._v("就是给当前实例对象加锁")]),t._v(" "),a("h4",{attrs:{id:"实例信息加锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例信息加锁"}},[t._v("#")]),t._v(" 实例信息加锁")]),t._v(" "),a("h4",{attrs:{id:"静态代码块加锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态代码块加锁"}},[t._v("#")]),t._v(" 静态代码块加锁")]),t._v(" "),a("p",[t._v("给当前类对象加锁(注:JVM中每种类型的类都是唯一的)")]),t._v(" "),a("h3",{attrs:{id:"程序中的幽灵-隐蔽的错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序中的幽灵-隐蔽的错误"}},[t._v("#")]),t._v(" 程序中的幽灵(隐蔽的错误)")]),t._v(" "),a("h2",{attrs:{id:"第三章-jdk下的并发包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章-jdk下的并发包"}},[t._v("#")]),t._v(" 第三章 JDK下的并发包")]),t._v(" "),a("h3",{attrs:{id:"同步控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步控制"}},[t._v("#")]),t._v(" 同步控制")]),t._v(" "),a("h4",{attrs:{id:"synchronized的功能扩展reentrantlock-可重入锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized的功能扩展reentrantlock-可重入锁"}},[t._v("#")]),t._v(" synchronized的功能扩展ReentrantLock(可重入锁)")]),t._v(" "),a("h5",{attrs:{id:"中断响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断响应"}},[t._v("#")]),t._v(" 中断响应")]),t._v(" "),a("p",[t._v("这里需要着重强调的是"),a("strong",[t._v("lockInterruptibly")]),t._v("方法,"),a("strong",[t._v("获取当前锁定,除非当前线程为interrupted")]),t._v("。\n如果锁没有被另一个线程占用并且立即返回,则将锁定计数设置为1。\n如果当前线程已经保存此锁,则保持计数将递增1,该方法立即返回。\n如果该锁被另一个线程保存，则当前线程将被禁用,并且处于休眠状态之一,直到发生两件事情之一:\n1.锁是由当前线程获得的->则锁定保持计数器设置为1。\n2.其他线程当前线程interrupts")]),t._v(" "),a("h5",{attrs:{id:"锁申请等待限时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁申请等待限时"}},[t._v("#")]),t._v(" 锁申请等待限时")]),t._v(" "),a("h5",{attrs:{id:"公平锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公平锁"}},[t._v("#")]),t._v(" 公平锁")]),t._v(" "),a("h5",{attrs:{id:"reentrantlock常用api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock常用api"}},[t._v("#")]),t._v(" ReentrantLock常用API")]),t._v(" "),a("h6",{attrs:{id:"lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[t._v("#")]),t._v(" lock()")]),t._v(" "),a("p",[t._v("获得锁，如果锁已经被占用,则等待")]),t._v(" "),a("h6",{attrs:{id:"lockinterruptibly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lockinterruptibly"}},[t._v("#")]),t._v(" lockInterruptibly()")]),t._v(" "),a("p",[t._v("获得锁,但优先响应中断")]),t._v(" "),a("h6",{attrs:{id:"trylock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trylock"}},[t._v("#")]),t._v(" tryLock()")]),t._v(" "),a("p",[t._v("尝试获得锁,如果成功,返回true,失败返回false。该方法不等待,立即返回。")]),t._v(" "),a("h6",{attrs:{id:"trylock-long-time-timeunit-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trylock-long-time-timeunit-unit"}},[t._v("#")]),t._v(" tryLock(long time,TimeUnit unit)")]),t._v(" "),a("p",[t._v("在给定时间内尝试获得锁")]),t._v(" "),a("h6",{attrs:{id:"unlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unlock"}},[t._v("#")]),t._v(" unlock()")]),t._v(" "),a("p",[t._v("释放锁")]),t._v(" "),a("h4",{attrs:{id:"重入锁的搭档-condition条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重入锁的搭档-condition条件"}},[t._v("#")]),t._v(" 重入锁的搭档:Condition条件")]),t._v(" "),a("h5",{attrs:{id:"常用api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#await"}},[t._v("#")]),t._v(" await()")]),t._v(" "),a("p",[a("strong",[t._v("使当前线程等待,同时释放当前锁")]),t._v(",当其他线程中使用signal()或者signalAll()方法时,线程会重新获得锁并继续执行。线程中断时跳出等待。与Object.wait()方法类似")]),t._v(" "),a("h6",{attrs:{id:"awaituniterruptibly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#awaituniterruptibly"}},[t._v("#")]),t._v(" awaitUniterruptibly()")]),t._v(" "),a("p",[t._v("与await()基本类似，但是不会响应中断")]),t._v(" "),a("h6",{attrs:{id:"singal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singal"}},[t._v("#")]),t._v(" singal()")]),t._v(" "),a("p",[t._v("用于唤醒一个在等待中的线程。与Object.notify()方法类似")]),t._v(" "),a("h4",{attrs:{id:"arrayblockingqueue的put方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrayblockingqueue的put方法"}},[t._v("#")]),t._v(" ArrayBlockingQueue的put方法")]),t._v(" "),a("h4",{attrs:{id:"允许多个线程同时访问-信号量-semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#允许多个线程同时访问-信号量-semaphore"}},[t._v("#")]),t._v(" 允许多个线程同时访问:信号量(Semaphore)")]),t._v(" "),a("h5",{attrs:{id:"常用api-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-2"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("p",[t._v("构造方法")]),t._v(" "),a("h6",{attrs:{id:"public-semaphore-int-permits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-semaphore-int-permits"}},[t._v("#")]),t._v(" public Semaphore(int permits)")]),t._v(" "),a("h6",{attrs:{id:"public-semaphore-int-permits-boolean-fair"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-semaphore-int-permits-boolean-fair"}},[t._v("#")]),t._v(" public Semaphore(int permits,boolean fair)")]),t._v(" "),a("p",[t._v("构造信号量对象时,必须要指定信号量的"),a("strong",[t._v("准入数")]),t._v(",即同时能申请多少个许可。如果每个只申请一个许可,相当于有多少个线程可以访问某一个资源。\n逻辑方法")]),t._v(" "),a("h6",{attrs:{id:"public-void-acquire"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-void-acquire"}},[t._v("#")]),t._v(" public void acquire()")]),t._v(" "),a("p",[t._v("尝试获取一个准入的许可,若无法获得")]),t._v(" "),a("h6",{attrs:{id:"public-void-acquireuninterruptibly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-void-acquireuninterruptibly"}},[t._v("#")]),t._v(" public void acquireUninterruptibly()")]),t._v(" "),a("p",[t._v("与acquire方法相似，不响应中断。")]),t._v(" "),a("h6",{attrs:{id:"public-boolean-tryacquire"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-boolean-tryacquire"}},[t._v("#")]),t._v(" public boolean tryAcquire()")]),t._v(" "),a("p",[t._v("尝试获得一个许可,如果成功返回true，失败立即返回false。")]),t._v(" "),a("h6",{attrs:{id:"public-boolean-tryacquire-long-timeout-timeunit-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-boolean-tryacquire-long-timeout-timeunit-unit"}},[t._v("#")]),t._v(" public boolean tryAcquire(long timeout,TimeUnit unit)")]),t._v(" "),a("h6",{attrs:{id:"public-void-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-void-release"}},[t._v("#")]),t._v(" public void release()")]),t._v(" "),a("p",[t._v("线程访问结束后，释放一个许可。")]),t._v(" "),a("h4",{attrs:{id:"readwritelock读写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readwritelock读写锁"}},[t._v("#")]),t._v(" ReadWriteLock读写锁")]),t._v(" "),a("p",[t._v("获取读锁\nprivate static Lock readLock=readWriteLock.readLock();\n获取写锁\nprivate static Lock writeLock=readWriteLock.writeLock();")]),t._v(" "),a("h4",{attrs:{id:"倒计时器countdownlatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#倒计时器countdownlatch"}},[t._v("#")]),t._v(" 倒计时器CountDownLatch")]),t._v(" "),a("p",[t._v("顾名思义，计时器。书上举的例子的场景是火箭倒计时发射，火箭发射前要保证所有检查线程都结束。")]),t._v(" "),a("h5",{attrs:{id:"常用api-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-3"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"countdown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#countdown"}},[t._v("#")]),t._v(" countDown()")]),t._v(" "),a("h6",{attrs:{id:"countdownlatch-int-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-int-count"}},[t._v("#")]),t._v(" CountDownLatch(int count)")]),t._v(" "),a("h4",{attrs:{id:"循环栅栏-cyclicbarrier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环栅栏-cyclicbarrier"}},[t._v("#")]),t._v(" 循环栅栏:CyclicBarrier")]),t._v(" "),a("p",[t._v("阻止线程继续执行，要求线程在栅栏处等待。书上的场景是10个士兵一组去完成任务\n但是书上的例子对于await()方法没有解释")]),t._v(" "),a("h5",{attrs:{id:"常用api-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-4"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"await-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#await-2"}},[t._v("#")]),t._v(" await()")]),t._v(" "),a("p",[t._v("等待所有parties已经在这个障碍上调用了await")]),t._v(" "),a("h4",{attrs:{id:"线程阻塞工具类locksupport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程阻塞工具类locksupport"}},[t._v("#")]),t._v(" 线程阻塞工具类LockSupport")]),t._v(" "),a("p",[t._v("可以在线程内任意位置让线程阻塞。\n和Thread.suspend()相比,它弥补了由于resume()在之前发生导致线程无法继续执行的情况(第二章讨论的指令顺序的问题)\n和Object.wait()相比,它不需要先获得某个对象的锁,也不会抛出Interruption的异常。")]),t._v(" "),a("h5",{attrs:{id:"常用api-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-5"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"park"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#park"}},[t._v("#")]),t._v(" park()")]),t._v(" "),a("p",[t._v("阻塞当前线程")]),t._v(" "),a("h6",{attrs:{id:"parknanos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parknanos"}},[t._v("#")]),t._v(" parkNanos()")]),t._v(" "),a("h6",{attrs:{id:"parkuntil"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parkuntil"}},[t._v("#")]),t._v(" parkUntil()")]),t._v(" "),a("p",[t._v("限时等待")]),t._v(" "),a("h3",{attrs:{id:"线程复用-线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程复用-线程池"}},[t._v("#")]),t._v(" 线程复用:线程池")]),t._v(" "),a("p",[t._v("为什么使用线程池？")]),t._v(" "),a("ol",[a("li",[t._v("创建和小会线程都会花费时间")]),t._v(" "),a("li",[t._v("线程本身也会占用内存空间\n所以,线程的使用必须掌握一个度,在有限的范围内,增加线程的数量可以明显提高系统的吞吐量")])]),t._v(" "),a("h4",{attrs:{id:"什么是线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程池"}},[t._v("#")]),t._v(" 什么是线程池")]),t._v(" "),a("p",[t._v("和数据库连接池类似,维护一些数据库连接。")]),t._v(" "),a("h4",{attrs:{id:"不要重复发明轮子-jdk对线程池的支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要重复发明轮子-jdk对线程池的支持"}},[t._v("#")]),t._v(" 不要重复发明轮子:JDK对线程池的支持")]),t._v(" "),a("p",[t._v("jdk提供了Executor框架，其本质就是一个线程池。\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/aryangzhu/blogImage/master/%E6%88%AA%E5%B1%8F2022-08-23%20%E4%B8%8B%E5%8D%882.01.00.png",alt:""}}),t._v("\n上面的都是juc包中的核心类\nThreadPoolExecutor表示一个"),a("strong",[t._v("线程池")]),t._v("。\nExecutors类则扮演着"),a("strong",[t._v("线程池工厂")]),t._v("的的角色,通过Executors可以取得一个拥有特定功能的线程池。")]),t._v(" "),a("h5",{attrs:{id:"常用api-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-6"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"public-static-executorservice-newfixedthreadpool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-static-executorservice-newfixedthreadpool"}},[t._v("#")]),t._v(" public static ExecutorService newFixedThreadPool()")]),t._v(" "),a("p",[t._v("该方法返回一个固定线程数量的线程池, 有新的任务提交时，如果池中有空闲线程则立即执行。")]),t._v(" "),a("h6",{attrs:{id:"public-static-executorservice-newsinglethreadexecutor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-static-executorservice-newsinglethreadexecutor"}},[t._v("#")]),t._v(" public static ExecutorService newSingleThreadExecutor()")]),t._v(" "),a("p",[t._v("返回一个只有一个线程的线程池。多个任务提交的话，会有一个等待队列。")]),t._v(" "),a("h6",{attrs:{id:"public-static-executorservice-newcachedthreadpool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-static-executorservice-newcachedthreadpool"}},[t._v("#")]),t._v(" public static ExecutorService newCachedThreadPool()")]),t._v(" "),a("p",[t._v("返回一个可根据实际情况调整线程数量的线程池。如果空闲线程可以复用，则优先使用。如果没有线程可以复用，则创建新的线程。")]),t._v(" "),a("h6",{attrs:{id:"public-static-scheduledexecutorservice-newsinglethreadscheduledexecutors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-static-scheduledexecutorservice-newsinglethreadscheduledexecutors"}},[t._v("#")]),t._v(" public static ScheduledExecutorService newSingleThreadScheduledExecutorS()")]),t._v(" "),a("p",[t._v("返回一个ScheduleExecutorService对象，线程池大小为1，这个对象可以周期性执行某个任务。")]),t._v(" "),a("h6",{attrs:{id:"public-static-scheduledexecutorservice-newscheduledthreadpool-int-corepoolsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-static-scheduledexecutorservice-newscheduledthreadpool-int-corepoolsize"}},[t._v("#")]),t._v(" public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)")]),t._v(" "),a("p",[t._v("也返回一个ScheduleExecutorService对象，但是可以指定线程数量。")]),t._v(" "),a("h5",{attrs:{id:"核心线程池的内部实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心线程池的内部实现"}},[t._v("#")]),t._v(" 核心线程池的内部实现")]),t._v(" "),a("p",[t._v("三种模式的线程池内部都实现了ThreadPoolExecutor")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlokingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("ThreadPoolExecutor最重要的构造函数")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("来看一下参数\n"),a("strong",[t._v("corePoolSize")]),t._v(":指定了线程池中的线程数量"),a("strong",[t._v("maximumPoolSize")]),t._v(":指定了线程池中的最大线程数量"),a("strong",[t._v("keepAliveTime")]),t._v(":当线程池数量超过corePoolSize时多余的线程存活的时间"),a("strong",[t._v("unit")]),t._v(":keepAliveTime的单位"),a("strong",[t._v("workQueue")]),t._v(":任务队列,被提交但尚未被执行的任务"),a("strong",[t._v("threadFactory")]),t._v(":线程工厂,用于创建线程,一般用默认的即可"),a("strong",[t._v("handler")]),t._v(":拒绝策略。当任务太多来来不及处理,如何拒绝任务需要着重关注的是workQueue和handler参数\nworkQueue是被提交但未执行的"),a("strong",[t._v("任务队列")]),t._v(",它是一个BlockingQueue接口的对象,仅用于存放Runnable对象。根据队列的狗功能分类,在ThreadPoolExecutor的构造函数中可以使用以下几种BlockingQueue。")]),t._v(" "),a("ol",[a("li",[t._v("直接提交的队列该功能由SynchronousQueue对象提供。任务不会真实的保存,总是将新任务提交给线程执行(后面书上的描述???)")]),t._v(" "),a("li",[t._v("有界的任务队列ArrauBlockingQueue(int capacity)由ArrayBlockingQueue实现。如果线程池的实际线程数小于corePoolSize,则会优先创建新的线程。如果大于corePoolSize,则会将新任务加入等待队列。若等待队列已满,无法加入。")]),t._v(" "),a("li",[t._v("无界的任务队列无界的任务队列:无界任务队列可以通过LinkedBlockingQueue类实现,与有界的任务队列相比,除非系统资源耗尽,不存在入队失败的情况。")]),t._v(" "),a("li",[t._v("优先任务队列\n带着优先级的无界队列,通过PriorityBlockingQueue实现。")])]),t._v(" "),a("h6",{attrs:{id:"超过负载之后的拒绝策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超过负载之后的拒绝策略"}},[t._v("#")]),t._v(" 超过负载之后的拒绝策略")]),t._v(" "),a("p",[t._v("ThreadPoolExecutor的最后一个参数指定了拒绝策略。当线程池中的线程用完了,无法为新任务服务,同时,等待队列中已经排满了,无法容纳新的任务。\nJDK内置了四种拒绝策略")]),t._v(" "),a("ol",[a("li",[t._v("AbortPolicy策略:该策略会直接抛出异常,阻止系统正常工作。")]),t._v(" "),a("li",[t._v("CallerRunsPolicy策略:只要线程池未关闭,改策略直接在调用者线程中，运行当前被丢弃任务。")]),t._v(" "),a("li",[t._v("DiscardOledestPolicy策略:该策略将丢弃最老的一个请求,也是就是即将被执行的任务。")]),t._v(" "),a("li",[t._v("DiscardPolicy:默默丢弃无法处理的任务。\n以上策略均实现了RejectExectionHandler接口，也可以自己扩展接口。")])]),t._v(" "),a("h5",{attrs:{id:"自定义线程的创建-threadfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义线程的创建-threadfactory"}},[t._v("#")]),t._v(" 自定义线程的创建:ThreadFactory")]),t._v(" "),a("h6",{attrs:{id:"扩展线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展线程池"}},[t._v("#")]),t._v(" 扩展线程池")]),t._v(" "),a("p",[t._v("ThreadPoolExecutor也是一个可以扩展到线程池。它提供了三个接口对线程池进行控制:\nbeforeExecute()\nafterExecute()\nterminate()\nThreadPoolExecutor.Worker是ThreadPoolExecutor的"),a("strong",[t._v("内部类")]),t._v(",它是一个"),a("strong",[t._v("实现了Runnable接口的类")]),t._v("。ThreadPoolExecutor线程中的工作线程也是Worker实例。通过beforeExecute()和afterExecute()可以帮助我们输出一些调试的信息。\n按照书上的说法对于应用程序的调试和诊断是非常有帮助的。")]),t._v(" "),a("h6",{attrs:{id:"优化线程池线程数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化线程池线程数量"}},[t._v("#")]),t._v(" 优化线程池线程数量")]),t._v(" "),a("h6",{attrs:{id:"线程池中的堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池中的堆栈"}},[t._v("#")]),t._v(" 线程池中的堆栈")]),t._v(" "),a("p",[t._v("对于我们查看多线程程序的运行情况的了解非常有帮助。\n使用execute()或者Future类型,如:\nFuture re=pools.submit(new DivTask(100,i));\nre.get();\n更进一步,我们可以找到任务是在哪里提交的,这就需要我们来动手扩展线程池\n其实和上面的Runnable扩展一样，本质上是输出堆栈信息。")]),t._v(" "),a("h4",{attrs:{id:"分而治之-fork-join框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分而治之-fork-join框架"}},[t._v("#")]),t._v(" 分而治之:Fork/Join框架")]),t._v(" "),a("p",[t._v("将大任务分割成若干个小任务。")]),t._v(" "),a("h5",{attrs:{id:"常用api-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api-7"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("h6",{attrs:{id:"public-t-forkjointask-t-submit-forjointask-t-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-t-forkjointask-t-submit-forjointask-t-task"}},[t._v("#")]),t._v(" public "),a("code",[t._v("<T>")]),t._v(" ForkJoinTask "),a("code",[t._v("<T>")]),t._v(" submit(ForJoinTask "),a("code",[t._v("<T>")]),t._v(" task)")]),t._v(" "),a("p",[t._v("可以向ForkJoinPool线程池提交一个ForkJoinTask任务.")]),t._v(" "),a("h3",{attrs:{id:"jdk的并发容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk的并发容器"}},[t._v("#")]),t._v(" JDK的并发容器")]),t._v(" "),a("p",[t._v("JDK提供大量好用的容器类")]),t._v(" "),a("h4",{attrs:{id:"并发集合简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发集合简介"}},[t._v("#")]),t._v(" 并发集合简介")]),t._v(" "),a("ol",[a("li",[t._v("ConcurrentHashMap:这是一个高效的并发HashMap。"),a("strong",[t._v("线程安全的HashMap")]),t._v("。")]),t._v(" "),a("li",[t._v("CopyOnWriteArrayList:适合"),a("strong",[t._v("读多写少")]),t._v("的场合。")]),t._v(" "),a("li",[t._v("ConcurrentLinkedQueue:高效的并发队列,使用链表实现。可以看做是一个"),a("strong",[t._v("线程安全的Linkedlist")]),t._v("。")]),t._v(" "),a("li",[t._v("BlockingQueue：这是一个接口,JDK内部通过链表和数组实现。表示阻塞队列,适合作为"),a("strong",[t._v("数据共享的通道")]),t._v("。")]),t._v(" "),a("li",[t._v("ConcurrentSkipListMap:跳表的实现。Map,使用跳表的数据结构进行快速查找。")])]),t._v(" "),a("h4",{attrs:{id:"map的安全集合concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map的安全集合concurrenthashmap"}},[t._v("#")]),t._v(" Map的安全集合ConcurrentHashMap")]),t._v(" "),a("h4",{attrs:{id:"list的线程安全vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list的线程安全vector"}},[t._v("#")]),t._v(" List的线程安全Vector")]),t._v(" "),a("h4",{attrs:{id:"高效的读写队列-concurrentlinkedqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高效的读写队列-concurrentlinkedqueue"}},[t._v("#")]),t._v(" 高效的读写队列:ConcurrentLinkedQueue")]),t._v(" "),a("h4",{attrs:{id:"不变模式下的copyonwritearraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不变模式下的copyonwritearraylist"}},[t._v("#")]),t._v(" 不变模式下的CopyOnWriteArrayList")]),t._v(" "),a("h4",{attrs:{id:"数据共享通道blockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据共享通道blockingqueue"}},[t._v("#")]),t._v(" 数据共享通道BlockingQueue")]),t._v(" "),a("h4",{attrs:{id:"随机数据结构-跳表-skiplist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机数据结构-跳表-skiplist"}},[t._v("#")]),t._v(" 随机数据结构:跳表(SkipList)")]),t._v(" "),a("h2",{attrs:{id:"第四章-关于锁和锁的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四章-关于锁和锁的优化"}},[t._v("#")]),t._v(" 第四章 关于锁和锁的优化")]),t._v(" "),a("p",[t._v("对于多线程来说，系统除了处理功能需求以外，还需要维护和多线程相关的信息，例如，线程本身的"),a("strong",[t._v("元数据")]),t._v("(???并不是很懂),线程的调度和线程上下问的切换。\n这一章主要围绕如何优化锁来展开，采用的手段有：避免死锁、减小锁的粒度和锁分离等")]),t._v(" "),a("h3",{attrs:{id:"提升锁性能的建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提升锁性能的建议"}},[t._v("#")]),t._v(" 提升锁性能的建议")]),t._v(" "),a("h4",{attrs:{id:"减少锁的持有时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少锁的持有时间"}},[t._v("#")]),t._v(" 减少锁的持有时间")]),t._v(" "),a("p",[t._v("书上举的例子是100个人排队填写表格，如果每个人都拿着笔才开始思考要填什么，那么话费时间肯定会过长。\n对应到代码上应该进行如下优化(以jdk并发包中的正则表达式类Pattern为例)：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("complied"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchornized")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("complied"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//个人猜测为了一种可能为了线程安全，还有一种可能为了代码的健壮性")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complied")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mathcer")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"减少锁的粒度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少锁的粒度"}},[t._v("#")]),t._v(" 减少锁的粒度")]),t._v(" "),a("p",[t._v("这里以ConcurrentHashMap为例(还是1.7的版本,不过不影响学习其锁优化的过程)，其中最为重要的就是put方法和get方法，因为增删的时候最需要保证并发的安全性。\n1.7采取的策略是在类内部又有16个HashMap,每个称之为段,这样一个实例的不同段就可被不同的线程持有。\n下面这段是put方法(其中有一部分暂时还看不懂)")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Segment")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先处理空指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointExeception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对key进行hash处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hsah")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获得对应的段的序号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v("segmentShift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("segmentMask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Segment")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNSAFE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSHIFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SBASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//上面的if进行了一次非可变性的检验，确保在确认的段里(过于拗口)")]),t._v("\n        s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ensureSegment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是另一个问题随之而来，就是在获取全局锁的时候消耗资源会更大。\nConcurrentHashMap中的size()方法就是获取全部的有效表项之和,为了达成这一目的，就需要去获取全部的锁,那么在计算时就需要对每个段进行加锁。\n但是如果每次计算size的都需要加锁肯定消耗过大,所以首先用采用无锁的策略,只有失败之后才会尝试加锁。\n综上:\n只有size()这种全局方法调用不频繁时,加锁才能提供并发吞吐量。")]),t._v(" "),a("h4",{attrs:{id:"读写分离锁来替换独占锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写分离锁来替换独占锁"}},[t._v("#")]),t._v(" 读写分离锁来替换独占锁")]),t._v(" "),a("p",[t._v("这个之前有学习过，先掌握ReadWriterLock的API即可。")]),t._v(" "),a("h4",{attrs:{id:"锁分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁分离"}},[t._v("#")]),t._v(" 锁分离")]),t._v(" "),a("p",[t._v("在读写锁的思想上进一步延伸，就是锁分离。\n根据应用程序的功能,采用类似锁分离的思想,将独占锁替换为可分离的锁。\n书上的例子是BlockingLinkQueue这个数据结构，众所周知，所有的数据结构最基本的数据操作就是创建销毁和增删改查。从这个角度出发，将take()和put()用两个锁来分离。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" takeLock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//被take,poll操作线程持有的锁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Conditional")]),t._v(" notEmpty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("takeLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" putLock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//被put,offer操作线程持有的锁。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Conditional")]),t._v(" notFull"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("putLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("take和put之间并不存在锁竞争的关系。\n下面来看一下take方法的源码")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n")])])]),a("h4",{attrs:{id:"锁粗化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁粗化"}},[t._v("#")]),t._v(" 锁粗化")]),t._v(" "),a("p",[t._v("如果代码中有多个代码块加锁,那么JVM虚拟机会尝试将能够合并的锁进行合并。")]),t._v(" "),a("h3",{attrs:{id:"java对锁优化的努力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java对锁优化的努力"}},[t._v("#")]),t._v(" Java对锁优化的努力")]),t._v(" "),a("h4",{attrs:{id:"锁偏向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁偏向"}},[t._v("#")]),t._v(" 锁偏向")]),t._v(" "),a("p",[t._v("实例对象已经被当前线程lock了,那么实例对象的头部信息里会有一个标志来进行锁偏向的记录,就可以减少加锁的资源开销。")]),t._v(" "),a("h4",{attrs:{id:"轻量级锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#轻量级锁"}},[t._v("#")]),t._v(" 轻量级锁")]),t._v(" "),a("p",[t._v("如果线程获取偏向锁失败,虚拟机并不会立即挂起线程,它还会使用一种被称为轻量级锁的优化手段。这个操作将对象的头部作为指针指向持有锁的线程堆栈的内部,来判断一个对象是否持有对象锁。如果轻量级锁加锁失败,则表示其他线程争夺到了锁,那么当前线程的锁请求就膨胀为重量级锁。")]),t._v(" "),a("h4",{attrs:{id:"自旋锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自旋锁"}},[t._v("#")]),t._v(" 自旋锁")]),t._v(" "),a("p",[t._v("重量级锁前的最后尝试,虚拟机会让当前线程几个空循环,如果还不能获取锁,才会真实地在操作系统层面挂起。")]),t._v(" "),a("h4",{attrs:{id:"锁的消除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的消除"}},[t._v("#")]),t._v(" 锁的消除")]),t._v(" "),a("p",[t._v("Java虚拟机在JIT编译时,通过对运行上下文的扫描,去除不可能存在共享资源竞争的锁。\n书上的例子很简单")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStrings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vector")]),t._v("＜"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("＞ v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vector")]),t._v("＜"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("＞"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i＜"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("函数有自己方法栈,也就是说v是局部变量,属于线程私有的数据,因此"),a("strong",[t._v("不可能被其他线程访问")]),t._v(",内部所有加锁同步都是没有必要的。如果虚拟机检测到这种情况,就会将这些无用的锁操作去除。\n锁消除涉及的一项关键技术为"),a("strong",[t._v("逃逸分析")]),t._v(",所谓逃逸分析就是观察某个变量是否会逃出某个作用域。\n也就是如果上面的上面的方法返回的是v,那么认为局部变量v逃逸。所以虚拟机中就不能消除v中的操作。")]),t._v(" "),a("h3",{attrs:{id:"threadlocal线程私有变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal线程私有变量"}},[t._v("#")]),t._v(" ThreadLocal线程私有变量")]),t._v(" "),a("p",[t._v("这个类就是将变量存储到线程的"),a("strong",[t._v("存值区域(ThreadLocalMap)")]),t._v("，也就是说会随着线程的生命周期存在，但是现代化的框架中都会有线程池，所以用完之后需要将线程的存值区域清空掉。")]),t._v(" "),a("h4",{attrs:{id:"简单使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[t._v("#")]),t._v(" 简单使用")]),t._v(" "),a("h4",{attrs:{id:"threadlocal的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal的实现原理"}},[t._v("#")]),t._v(" ThreadLocal的实现原理")]),t._v(" "),a("h4",{attrs:{id:"对性能有何帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对性能有何帮助"}},[t._v("#")]),t._v(" 对性能有何帮助")]),t._v(" "),a("h3",{attrs:{id:"无锁-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无锁-2"}},[t._v("#")]),t._v(" 无锁")]),t._v(" "),a("h4",{attrs:{id:"比较交换cas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较交换cas"}},[t._v("#")]),t._v(" 比较交换CAS")]),t._v(" "),a("h5",{attrs:{id:"原子类-atomicinteger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子类-atomicinteger"}},[t._v("#")]),t._v(" 原子类(AtomicInteger)")]),t._v(" "),a("h5",{attrs:{id:"java中的指针unsafe类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的指针unsafe类"}},[t._v("#")]),t._v(" Java中的指针Unsafe类")]),t._v(" "),a("h5",{attrs:{id:"无锁的对象引用-atomicreference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无锁的对象引用-atomicreference"}},[t._v("#")]),t._v(" 无锁的对象引用:AtomicReference")]),t._v(" "),a("h5",{attrs:{id:"带有时间戳的对象引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带有时间戳的对象引用"}},[t._v("#")]),t._v(" 带有时间戳的对象引用")]),t._v(" "),a("h5",{attrs:{id:"无锁数组-atomicintegerarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无锁数组-atomicintegerarray"}},[t._v("#")]),t._v(" 无锁数组:AtomicIntegerArray")]),t._v(" "),a("h5",{attrs:{id:"让普通变量也享受原子操作-atomicintegerfieldupdater"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#让普通变量也享受原子操作-atomicintegerfieldupdater"}},[t._v("#")]),t._v(" 让普通变量也享受原子操作:AtomicIntegerFieldUpdater")]),t._v(" "),a("h5",{attrs:{id:"无锁的vector实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无锁的vector实现"}},[t._v("#")]),t._v(" 无锁的Vector实现")]),t._v(" "),a("h5",{attrs:{id:"细看synchronousqueue的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#细看synchronousqueue的实现"}},[t._v("#")]),t._v(" 细看SynchronousQueue的实现")]),t._v(" "),a("h3",{attrs:{id:"有关死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有关死锁"}},[t._v("#")]),t._v(" 有关死锁")]),t._v(" "),a("h2",{attrs:{id:"并行模式与算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行模式与算法"}},[t._v("#")]),t._v(" 并行模式与算法")]),t._v(" "),a("h3",{attrs:{id:"单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),a("h3",{attrs:{id:"不变模式-final关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不变模式-final关键字"}},[t._v("#")]),t._v(" 不变模式(final关键字)")]),t._v(" "),a("h3",{attrs:{id:"生产者-消费者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产者-消费者模式"}},[t._v("#")]),t._v(" 生产者-消费者模式")]),t._v(" "),a("h3",{attrs:{id:"高性能的无锁的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高性能的无锁的实现"}},[t._v("#")]),t._v(" 高性能的无锁的实现")]),t._v(" "),a("h3",{attrs:{id:"future模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#future模式"}},[t._v("#")]),t._v(" Future模式")]),t._v(" "),a("p",[t._v("异步调用机制,虽然它无法立即返回需要的数据,但是会返回一个契约,将来凭借这个契约去重新获取你需要的信息。")]),t._v(" "),a("h4",{attrs:{id:"future模式的主要角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#future模式的主要角色"}},[t._v("#")]),t._v(" Future模式的主要角色")]),t._v(" "),a("ol",[a("li",[t._v("Main 系统启动,调用Client发出请求")]),t._v(" "),a("li",[t._v("Client 返回Data对象,立即返回FutureData,并开启ClientThread线程装配RealData")]),t._v(" "),a("li",[t._v("Data 返回数据的接口")]),t._v(" "),a("li",[t._v("FutureData Future数据,构造很快,但是一个虚拟的数据,需要装配RealData")]),t._v(" "),a("li",[t._v("真实数据,其构造是比较慢的")])]),t._v(" "),a("h3",{attrs:{id:"并行流水线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行流水线"}},[t._v("#")]),t._v(" 并行流水线")]),t._v(" "),a("h3",{attrs:{id:"并行搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行搜索"}},[t._v("#")]),t._v(" 并行搜索")]),t._v(" "),a("h3",{attrs:{id:"并行排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行排序"}},[t._v("#")]),t._v(" 并行排序")]),t._v(" "),a("h3",{attrs:{id:"并行算法-矩阵算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行算法-矩阵算法"}},[t._v("#")]),t._v(" 并行算法:矩阵算法")]),t._v(" "),a("h3",{attrs:{id:"nio-准备好了再通知我"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nio-准备好了再通知我"}},[t._v("#")]),t._v(" NIO(准备好了再通知我)")]),t._v(" "),a("p",[t._v("书上的例子是从编写一个NIO服务器为例,但是在此之前我们需要对于unix网络编程有一定的了解。\n本地进程通信的方式,其中一种就是socket(套接字,也就是将IP与端口号集合起来的抽象概念)。\n首先实现了用tcp的Socket编写服务器(这部分可以参考基础部分),然后进阶到NIO编程。\nNewIO,通过知乎的文章\n"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/25004921",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎_25004921"),a("OutboundLink")],1),t._v(",\n我们可以对于unix编程提供的接口有一定的了解,再去看书上的例子可以更加清晰。")]),t._v(" "),a("h4",{attrs:{id:"操作系统提供soket编程的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统提供soket编程的接口"}},[t._v("#")]),t._v(" 操作系统提供Soket编程的接口")]),t._v(" "),a("h5",{attrs:{id:"socket-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-函数"}},[t._v("#")]),t._v(" socket()函数")]),t._v(" "),a("p",[t._v("int socket(int domain,int type,int protocol)\nsocket函数对应于普通文件打开操作,返回一个文件描述字,socket()用于创建一个socket描述符\ndomain:协议族。AF_INET、AF_INET6,协议族决定了socket的地址类型,例如ANF_INET决定了要用ipv4(32位)与端口号的组合。\ntype:指定socket类型。\nprotocol:顾名思义，就是指定协议。")]),t._v(" "),a("h5",{attrs:{id:"bind-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind-函数"}},[t._v("#")]),t._v(" bind()函数")]),t._v(" "),a("p",[t._v("int bind(int sockfd,const struct sockaddr *addr ,socklen_t addrlen)\n把一个地址族中的特定地址赋给socket")]),t._v(" "),a("h5",{attrs:{id:"listen-、connect-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listen-、connect-函数"}},[t._v("#")]),t._v(" listen()、connect()函数")]),t._v(" "),a("p",[t._v("listen()服务端在调用socket()、bind()之后调用listen()来监听这个socket\n如果客户端调用connect()发出连接请求,服务端就会接收到这个请求")]),t._v(" "),a("h5",{attrs:{id:"accept-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accept-函数"}},[t._v("#")]),t._v(" accept()函数")]),t._v(" "),a("p",[t._v("TCP服务器监听到这个请求之后,就会调用accept()函数接收请求,这样连接就建立好了。")]),t._v(" "),a("h5",{attrs:{id:"read-、write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-、write"}},[t._v("#")]),t._v(" read()、write()")]),t._v(" "),a("p",[t._v("网络I/O操作")]),t._v(" "),a("h5",{attrs:{id:"close-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-函数"}},[t._v("#")]),t._v(" close()函数")]),t._v(" "),a("p",[t._v("完成了读写操作之后就要关闭相应的socket描述字。")]),t._v(" "),a("h4",{attrs:{id:"jdk中的对应的nio类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk中的对应的nio类"}},[t._v("#")]),t._v(" JDK中的对应的NIO类")]),t._v(" "),a("p",[t._v("两台计算机连接:")]),t._v(" "),a("ol",[a("li",[t._v("服务器实例化一个"),a("strong",[t._v("ServerSocket对象")]),t._v(",表示通过服务器上的端口通信。")]),t._v(" "),a("li",[t._v("服务器调用ServerSocket类的"),a("strong",[t._v("accept")]),t._v("方法,该方法将一直等待,直到客户端连接到服务器上给定的端口。")]),t._v(" "),a("li",[t._v("服务器正在等待时,一个客户端实例化一个Socket对象,指定服务器名称和端口号来请求连接。")]),t._v(" "),a("li",[t._v("Socket类的构造函数将客户端连接到指定的服务器和端口号,如果通信被建立,则在客户端创建一个Socket对象能够与服务器进行通信(和3在同一步骤)。")]),t._v(" "),a("li",[t._v("在服务器,accept()方法返回服务器上的一个新的socket引用,该socket连接到客户端的socket。此外还有一个数据结构"),a("strong",[t._v("ByteBuffer")]),t._v(",本质上就是一个数组。几个重要的参数:")]),t._v(" "),a("li",[t._v("容量(Capacity)缓冲区能够容纳的数据元素的最大数量。容量在缓冲区创建时被设定,并且永远不能改变。")]),t._v(" "),a("li",[t._v("上界(Limit)缓冲区里的数据的总数,代表了当前缓冲区一共有多少数据(这个参数下文会反复提到,filp()函数中会对这个值做修改)。")]),t._v(" "),a("li",[t._v("位置(Position)下一个要被读或写的元素的位置。Position会自动由相应的get()和put()函数更新。")]),t._v(" "),a("li",[t._v("标记(Mark)一个备忘位置。用于记录上一次读写的位置。\n如果在ByteBuffer中放入了数据,然后想从中读取的话,就需要position这个字段放到想读的位置(那为什么不放这个字段呢？)")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Buffer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newPosition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" limit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newPosition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentExcetion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("newPosition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/aryangzhu/blogImage/master/bytebuffer%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9A%84limit.png",alt:""}}),t._v("\n其中limit代表可写或者可读的总数。一个新创建的bytebuffer,它可写的总数就是它的capacity。如果写入了一些数据以后,想从头开始读的话,这时候的"),a("strong",[t._v("limit就是当前ByteBuffer数据的长度")]),t._v("。\n为了从写数据变成读数据的情况,还需要修改limit,这就要用到limit方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Buffer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newLimit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newLimit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newLimit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentExcetion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    limit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("newLimit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("postion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" mark"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后就是执行方法\nbyteBuffer.limit(byteBuffer.position());\nbyteBuffer.position(0);\n由于这个方法操作非常频繁,jdk为此封装了一个方法flip()")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v(":")]),t._v(" "),a("ol",[a("li",[t._v("客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流")]),t._v(" "),a("li",[t._v("TCP双向通信,同一时刻可由客户端发送到服务器端,也可由服务器端发送到客户端。")])]),t._v(" "),a("hr"),t._v(" "),a("h5",{attrs:{id:"serversocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serversocket"}},[t._v("#")]),t._v(" ServerSocket")]),t._v(" "),a("p",[t._v("服务器端用这个类创建Socket,并监听客户端请求")]),t._v(" "),a("h5",{attrs:{id:"socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" Socket")]),t._v(" "),a("p",[t._v("客户端用的Socket")]),t._v(" "),a("h5",{attrs:{id:"inetaddress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inetaddress"}},[t._v("#")]),t._v(" InetAddress")]),t._v(" "),a("p",[t._v("表示IP地址的类")]),t._v(" "),a("h5",{attrs:{id:"再看nio服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#再看nio服务器"}},[t._v("#")]),t._v(" 再看NIO服务器")]),t._v(" "),a("p",[t._v("这次我们从IO模型出发,其实Java代码最终也是通过JNI调用系统接口。\n知乎上这篇专栏讲得很好,用C语言手写了一个服务端,再通过Java客户端去进行访问。")]),t._v(" "),a("h5",{attrs:{id:"为什么会有selector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有selector"}},[t._v("#")]),t._v(" 为什么会有Selector???")]),t._v(" "),a("p",[t._v("看书的时候会有疑问\n第一个疑问是书上只说了用Selector来管理Channnel,但是却没有说明为什么使用。\n第二个疑问是注册是设置感兴趣的事件。\n为了回答上面的问题,还是得从IO模型出发,5种模型有一种模型叫做IO多路复用模型。\n先来回答第一个问题,Selector其实就是select/poll/epoll的包装类。\n上面的回答狗看了直摇头,这是什么玩意儿...\n先回答第二个问题\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/aryangzhu/blogImage/master/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8A%E5%8D%889.38.17.png",alt:""}}),t._v("\n最常用的I/O"),a("strong",[t._v("事件通知机制")]),t._v("就是IO复用(I/O multiplexing),"),a("strong",[t._v("I/O复用接口本身是阻塞的")]),t._v(",在应用程序中通过I/O复用接口"),a("strong",[t._v("向内核注册fd(描述符)"),a("strong",[t._v("所关注的事件(回头看Java中的API也就能理解了),当事件触发时,通过I/O复用接口的返回值通知到应用程序。I/O复用接口可以同时监听")]),t._v("多个I/O事件")]),t._v("提升处理效率。")]),t._v(" "),a("h3",{attrs:{id:"aio-读完了再通知我"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aio-读完了再通知我"}},[t._v("#")]),t._v(" AIO(读完了再通知我)")]),t._v(" "),a("p",[t._v("在开始学习之前,我们需要了解一下unix编程的5种IO模型\nhttps://zhuanlan.zhihu.com/p/27382996\nNIO和AIO分别对应的是非阻塞模型和异步IO模型(其他的可以在unix网络编程中进行了解)\n来看一下start()方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//客户端请求的处理和接收")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server listen on"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注册事件和事件完成后的处理器")]),t._v("\n        server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletionHandler")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AsynchronousSocketChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("completed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AsynchronousSocketChannel")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" attachment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" writeResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("flip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    writeResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeoutException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        writeResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("failed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" exc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" attachment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"failed:"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("exc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上面的start()方法中最重要的就是accept方法，第一个参数不多做描述\n主要是第二个参数其实就是一个Handler(在Java基础中接触过,调用处理器,当某个特定事件发生时会自动被调用),这个接口中有两个方法void completed(V result,A attachment)void failed(Throwable exc,A attchment)这两个方法分别在"),a("strong",[t._v("异步操作accept()成功时或者失败时被回调")]),t._v("因此AsynchronousServerSocketChannel.accept()主要做了两件事:")]),t._v(" "),a("ol",[a("li",[t._v("发起accept请求,"),a("strong",[t._v("告诉系统可以开始监听端口")]),t._v("。")]),t._v(" "),a("li",[t._v("注册CompletionHandler实例,告诉系统一旦有客户端连接,如果成功连接,就去执行CompletionHandler.completed()方法;如果连接失败,就去执行CompletionHandler.failed()方法")])])])}),[],!1,null,null,null);a.default=e.exports}}]);