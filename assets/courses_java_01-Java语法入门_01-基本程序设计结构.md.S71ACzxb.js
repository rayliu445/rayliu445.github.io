import{_ as l}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as p,D as r,o as t,c as k,I as d,w as o,k as e,a as g,R as c,b as u,e as A}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const P=JSON.parse('{"title":"01-基本程序设计结构","description":"","frontmatter":{"title":"01-基本程序设计结构","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/01-基本程序设计结构.md","filePath":"courses/java/01-Java语法入门/01-基本程序设计结构.md","lastUpdated":1742489594000}'),y={name:"courses/java/01-Java语法入门/01-基本程序设计结构.md"},b=e("h1",{id:"基本程序设计结构",tabindex:"-1"},[g("基本程序设计结构 "),e("a",{class:"header-anchor",href:"#基本程序设计结构","aria-label":'Permalink to "基本程序设计结构"'},"​")],-1),C=c(`<p>写在前面，这个系列参考《java核心技术卷》，我之前学习的知识没有系统化，导致很多细节只知其然，而且很多技术对我来说难以上手，究其原因就是基础不牢(为什么之前不做笔记呢，我就是一铁憨憨)，所以这个也相当于补票。大多数内容其实就是书上的知识，不喜勿喷。</p><h2 id="一个简单的java应用程序" tabindex="-1">一个简单的Java应用程序 <a class="header-anchor" href="#一个简单的java应用程序" aria-label="Permalink to &quot;一个简单的Java应用程序&quot;">​</a></h2><h2 id="命令行运行" tabindex="-1">命令行运行 <a class="header-anchor" href="#命令行运行" aria-label="Permalink to &quot;命令行运行&quot;">​</a></h2><p>1.打开终端 2.进入corejava/v1ch02/Welcome目录(也就是当前.java文件的根目录) 3.shell脚本命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Welcome.java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Welcome</span></span></code></pre></div><p>javac程序是一个Java编译器,它将文件Welcome.java编译成Welcome.class。java程序启动Java虚拟机，虚拟机执行编译器编译到类文件中的字节码。</p><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>就是用来说明我们这部分代码用来做什么，在复杂的系统中尤为重要</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="八个基本类型" tabindex="-1">八个基本类型 <a class="header-anchor" href="#八个基本类型" aria-label="Permalink to &quot;八个基本类型&quot;">​</a></h3><h4 id="布尔类型" tabindex="-1">布尔类型 <a class="header-anchor" href="#布尔类型" aria-label="Permalink to &quot;布尔类型&quot;">​</a></h4><p>boolean/1</p><h4 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h4><p>byte/8 short/16 int/32 long/64 int最常用,如果想要表示较大的数字时应当使用long。byte和short类型主要应用于特定的场合,例如,底层的文件处理或者存储空间很宝贵时的大数组。 在Java中,整形的范围与运行Java代码的机器无关。从而在各个平台之间能够完美移植。</p><h4 id="char类型和unicode" tabindex="-1">char类型和Unicode <a class="header-anchor" href="#char类型和unicode" aria-label="Permalink to &quot;char类型和Unicode&quot;">​</a></h4><p>char/16</p><h5 id="unicode" tabindex="-1">Unicode <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;Unicode&quot;">​</a></h5><p>想要弄清楚char类型,就必须了解Unicode编码机制。Unicode打破了传统字符编码机制的限制。早在Unicode出现之前,就已经有许多中不同的标准:美国的ASCII、中国的GB18030等。这时出现了两个问题: 1.对于任意给定的代码值,不同的编码方案对应不同的字母; 2.采用大字符集的语言其编码长度有可能不同。例如,有些常用的字符采用单字节编码,而另一些需要两个或者多个字节。 设计Unicode就是为了解决这些问题,刚开始进行统一工作时,人们认为两个字节的代码宽度足以应付所有字符。Java中设计时采用的16位字符集,那时其他大部分语言只有8位。</p><p>但是后来由于加入了大量的中文、日文和韩语中的表意文字。Unicode字符超过了65535的限制,16位的char类型已经不能满足所有Unicode字符的需要了。</p><p>java5中引入了<strong>码点</strong>。码点(code point)是指与一个编码表中的<strong>某个字符对应的代码值</strong>。在Unicode标准中,码点采用十六进制书写,并加上前缀U+,例如U+0041就是拉丁字母A的码点。Unicode的码点共分为17个<strong>代码平面</strong>,第一个称为<strong>基本多语言平面</strong>,从U+0000到U+FFFF的“经典”Unicode代码;其余的从U+1000到U+10FFFF,包括辅助字符。 UTF-16编码采用不同长度的编码表示所有的Unicode码点。在基本多语言平面中,每个字符使用16位表示,通常称为<strong>code unit(代码单元)</strong>,而辅助字符编码为一对连续的代码单元。采用这种编码对表示的各个值落入基本多语言平面中未用的2048个值范围内,通常称之为<strong>替代区域(surrogate area)</strong>(如果一个代码单元超过了基本多语言的范围,那么就说明它是辅助字符的第一个代码单元),很容易区分一个代码单元是一个字符的编码还是辅助字符的第一部分或第二部分。 书上的建议是不要在程序中使用char类型,我持怀疑态度。</p><h4 id="浮点类型" tabindex="-1">浮点类型 <a class="header-anchor" href="#浮点类型" aria-label="Permalink to &quot;浮点类型&quot;">​</a></h4><p>float/32 double/64</p><h4 id="缓存池" tabindex="-1">缓存池 <a class="header-anchor" href="#缓存池" aria-label="Permalink to &quot;缓存池&quot;">​</a></h4><p>new Integer(123)新建一个对象。 Integer.valueOf(123)会使用<strong>缓存池</strong>中的对象,<strong>多次调用会取得同一个对象的引用</strong>。Java8中缓存池的大小为-128~127。编译器会在<strong>缓冲池范围内的基本类型</strong>自动装箱调用valueOf()方法，因此多个Integer实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。</p><h2 id="变量与常量" tabindex="-1">变量与常量 <a class="header-anchor" href="#变量与常量" aria-label="Permalink to &quot;变量与常量&quot;">​</a></h2><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><h3 id="数学函数与常量" tabindex="-1">数学函数与常量 <a class="header-anchor" href="#数学函数与常量" aria-label="Permalink to &quot;数学函数与常量&quot;">​</a></h3><h3 id="数值类型之间的转换" tabindex="-1">数值类型之间的转换 <a class="header-anchor" href="#数值类型之间的转换" aria-label="Permalink to &quot;数值类型之间的转换&quot;">​</a></h3><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><h3 id="结合赋值和运算符" tabindex="-1">结合赋值和运算符 <a class="header-anchor" href="#结合赋值和运算符" aria-label="Permalink to &quot;结合赋值和运算符&quot;">​</a></h3><h3 id="自增与自减运算符" tabindex="-1">自增与自减运算符 <a class="header-anchor" href="#自增与自减运算符" aria-label="Permalink to &quot;自增与自减运算符&quot;">​</a></h3><h3 id="关系和boolean运算符" tabindex="-1">关系和boolean运算符 <a class="header-anchor" href="#关系和boolean运算符" aria-label="Permalink to &quot;关系和boolean运算符&quot;">​</a></h3><h4 id="" tabindex="-1">&amp; | ^ ~ <a class="header-anchor" href="#" aria-label="Permalink to &quot;&amp; | ^ ~&quot;">​</a></h4><p>处理整型数据时,可以完成对组成整数的位的操作,这意味着可以使用掩码技术得到整数的各个位。 &amp; and | or ^ xor ~ not都是按位模式处理。书上的例子是把整数中不想要的位给他掩掉:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fourthBitFromRight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0b1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0b1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这个是用来取得从右往左的第4位的1(很难想到会有这种场景),套路就是利用&amp;并使用适当的2的幂。</p><h4 id="和" tabindex="-1">&gt;&gt;和&lt;&lt; <a class="header-anchor" href="#和" aria-label="Permalink to &quot;\\&gt;\\&gt;和\\&lt;&lt;&quot;">​</a></h4><p>&gt;&gt;和&lt;&lt;可以将<strong>位模式(以某种选定的进制)<strong>左移或右移(从最右边的位开始算起),需要建立位模式来</strong>完成位掩码</strong>时,这两个运算符很方便。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fourthBitFromRight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>#####　&gt;&gt;&gt; &gt;&gt;&gt;运算符会用0填充高位,这与&gt;&gt;不同,他会用符号位来填充高位(0001和1001)。</p><h3 id="括号和运算符级别" tabindex="-1">括号和运算符级别 <a class="header-anchor" href="#括号和运算符级别" aria-label="Permalink to &quot;括号和运算符级别&quot;">​</a></h3><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>从改变上讲,Java字符串就是由<strong>Unicode字符序列</strong>构成。例如,字符串&quot;Java\\u2122&quot;由5个Unicode字符J、a、v、a和tm构成。Java没有内置的<strong>字符串类型</strong>,而是在标准Java类库中提供了一个预定义类,很自然地叫做String。每个用双引号括起来的字符串都是String类的一个实例:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h3 id="子串" tabindex="-1">子串 <a class="header-anchor" href="#子串" aria-label="Permalink to &quot;子串&quot;">​</a></h3><p>String类的subString方法可以从一个较大的字符串中提取出一个子串。例如:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">subString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>第二个参数是不想复制的第一个位置。</p><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expletive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Expltive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PG13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;deleted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;expletive&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PG13;</span></span></code></pre></div><h3 id="不可变字符串" tabindex="-1">不可变字符串 <a class="header-anchor" href="#不可变字符串" aria-label="Permalink to &quot;不可变字符串&quot;">​</a></h3><p>为什么叫做不可变字符串? 因为不能修改字符串中的单个字符,例如不能将greeting的后两位字符修改为&#39;p&#39;和&#39;!&#39;。 也就是说这个字符串永远包含这几个字符,所以你不能做修改,那么要怎么做修改呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greetin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">subString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;p!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>很明显,子串是一个新串子再与&quot;p!&quot;进行拼接。 同时我们可以修改Sting类型变量的引用地址,将其指向新的地址。 String被声明为<strong>final</strong>，意味着不能够再被继承。同时内部声明为final，数组初始化之后就就不能引用其他数组(基本数据类型被final修饰之后只能进行一次赋值操作)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ;</span></span></code></pre></div><p>对于这里我们需要清楚的是String的地址@533，其中char [] value的地址为@535，执行完第二行代码之后value的地址为@537。 <strong>不可变的好处</strong> 1.作为哈希值的存储容器非常便利(哈希值不变，只进行一次计算便可得到结果) 2.String Pool的需要 3.安全性得到保证，网络传输过程不会被修改 4.不可变性天生具备线程安全的特点</p><h3 id="检测字符串是否相等" tabindex="-1">检测字符串是否相等 <a class="header-anchor" href="#检测字符串是否相等" aria-label="Permalink to &quot;检测字符串是否相等&quot;">​</a></h3><p>使用equals检测两个字符串是否相等。对于表达式:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(t);</span></span></code></pre></div><p>来看下面这个例子</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //probably true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">subString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //probably false；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>如果虚拟机中始终将相同的字符串共享,就可以使用==运算符检测是否相等。但实际上只有<strong>字符串字面量</strong>是共享的,而**+或subString()**等操作得到的字符串并不共享(也就是说会使用新的地址)。所以,千万不要使用==运算符测试字符串的相等性。</p><h3 id="空串与null串" tabindex="-1">空串与Null串 <a class="header-anchor" href="#空串与null串" aria-label="Permalink to &quot;空串与Null串&quot;">​</a></h3><p>String类型的变量可以是&quot;&quot;,也可以是null,最常用的就是检测一个字符串时候为空</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)...</span></span></code></pre></div><h3 id="码点与代码单元" tabindex="-1">码点与代码单元 <a class="header-anchor" href="#码点与代码单元" aria-label="Permalink to &quot;码点与代码单元&quot;">​</a></h3><p>码点就是编码表中对应的代码值,而码元就是代码单元也就是用UTF-16的编码表示一个Unicode的代码单元。</p><p>返回代码单元数量。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>我们知道Unicode编码中辅助字符是由两个代码单元组成的,所以当返回特殊字符时数量会多一个。</p><p>返回实际长度即码点数量</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cpCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">codePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div><p>返回码元</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>返回码点</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">offsetByCodePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,i);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index);</span></span></code></pre></div><h3 id="string-api" tabindex="-1">String API <a class="header-anchor" href="#string-api" aria-label="Permalink to &quot;String API&quot;">​</a></h3><h4 id="java-lang-string" tabindex="-1">java.lang.String <a class="header-anchor" href="#java-lang-string" aria-label="Permalink to &quot;java.lang.String&quot;">​</a></h4><h5 id="char-charat-int-index" tabindex="-1">char charAt(int index) <a class="header-anchor" href="#char-charat-int-index" aria-label="Permalink to &quot;char charAt(int index)&quot;">​</a></h5><p>返回给定位置的代码单元。除非对底层代码单元感兴趣,否则不需要调用这个方法。</p><h5 id="int-codepointat-int-index" tabindex="-1">int codePointAt(int index) <a class="header-anchor" href="#int-codepointat-int-index" aria-label="Permalink to &quot;int codePointAt(int index)&quot;">​</a></h5><p>返回从给定位置开始的码点。</p><h5 id="int-offset-int-startindex-int-cpcount" tabindex="-1">int offset(int startIndex,int cpCount) <a class="header-anchor" href="#int-offset-int-startindex-int-cpcount" aria-label="Permalink to &quot;int offset(int startIndex,int cpCount)&quot;">​</a></h5><p>返回从startIndex码点开始,cpCount个码点后的码点索引。</p><h5 id="boolean-empty" tabindex="-1">boolean empty() <a class="header-anchor" href="#boolean-empty" aria-label="Permalink to &quot;boolean empty()&quot;">​</a></h5><h5 id="boolean-equals-string-other" tabindex="-1">boolean equals(String other) <a class="header-anchor" href="#boolean-equals-string-other" aria-label="Permalink to &quot;boolean equals(String other)&quot;">​</a></h5><h5 id="int-length" tabindex="-1">int length() <a class="header-anchor" href="#int-length" aria-label="Permalink to &quot;int length()&quot;">​</a></h5><h5 id="int-codepointcount-int-startindex-int-endindex" tabindex="-1">int codePointCount(int startIndex,int endIndex) <a class="header-anchor" href="#int-codepointcount-int-startindex-int-endindex" aria-label="Permalink to &quot;int codePointCount(int startIndex,int endIndex)&quot;">​</a></h5><p>返回startIndex和endIndex-1之间的码点个数</p><h5 id="string-replace-charsequence-oldstring-charsequence-newstring" tabindex="-1">String replace(CharSequence oldString,CharSequence newString) <a class="header-anchor" href="#string-replace-charsequence-oldstring-charsequence-newstring" aria-label="Permalink to &quot;String replace(CharSequence oldString,CharSequence newString)&quot;">​</a></h5><p>返回一个新字符串。这个字符串用newString代替原始字符串中所有的oldString。</p><p>String subString(int beginIndex)</p><h5 id="string-substring-int-beginindex-int-endindex" tabindex="-1">String subString(int beginIndex,int endIndex) <a class="header-anchor" href="#string-substring-int-beginindex-int-endindex" aria-label="Permalink to &quot;String subString(int beginIndex,int endIndex)&quot;">​</a></h5><p>返回一个新字符串。</p><p>String toLowerCase()</p><h5 id="string-touppercase" tabindex="-1">String toUpperCase() <a class="header-anchor" href="#string-touppercase" aria-label="Permalink to &quot;String toUpperCase()&quot;">​</a></h5><p>返回一个新字符串,将大小写进行转换。</p><p>String trim()</p><p>删除字符串开头和结尾的空格。</p><h5 id="string-join-charsequence-delimiter-charsequence-elements" tabindex="-1">String join(CharSequence delimiter,CharSequence ...elements) <a class="header-anchor" href="#string-join-charsequence-delimiter-charsequence-elements" aria-label="Permalink to &quot;String join(CharSequence delimiter,CharSequence ...elements)&quot;">​</a></h5><p>返回一个新的字符串,用给定的定界符连接所有元素。</p><h3 id="阅读文档" tabindex="-1">阅读文档 <a class="header-anchor" href="#阅读文档" aria-label="Permalink to &quot;阅读文档&quot;">​</a></h3><h3 id="构建字符串" tabindex="-1">构建字符串 <a class="header-anchor" href="#构建字符串" aria-label="Permalink to &quot;构建字符串&quot;">​</a></h3><h2 id="输入与输出" tabindex="-1">输入与输出 <a class="header-anchor" href="#输入与输出" aria-label="Permalink to &quot;输入与输出&quot;">​</a></h2><h3 id="读取输入" tabindex="-1">读取输入 <a class="header-anchor" href="#读取输入" aria-label="Permalink to &quot;读取输入&quot;">​</a></h3><p>想要通过控制台输入,<strong>首先需要构造与&quot;标准输入流&quot;System.in相关联的Scanner对象</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(System.in);</span></span></code></pre></div><p>例如，读取一个整数</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;How old are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h4 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h4 id="java-util-scanner" tabindex="-1">java.util.Scanner <a class="header-anchor" href="#java-util-scanner" aria-label="Permalink to &quot;java.util.Scanner&quot;">​</a></h4><h5 id="scanner-inputstream-in" tabindex="-1">Scanner(InputStream in) <a class="header-anchor" href="#scanner-inputstream-in" aria-label="Permalink to &quot;Scanner(InputStream in)&quot;">​</a></h5><p>用给定的输入流创建一个对象</p><h5 id="int-nextint" tabindex="-1">int nextInt(); <a class="header-anchor" href="#int-nextint" aria-label="Permalink to &quot;int nextInt();&quot;">​</a></h5><p>读取输入一个整数</p><h5 id="string-nextline" tabindex="-1">String nextLine(); <a class="header-anchor" href="#string-nextline" aria-label="Permalink to &quot;String nextLine();&quot;">​</a></h5><p>读取输入的一行内容</p><h5 id="string-next" tabindex="-1">String next(); <a class="header-anchor" href="#string-next" aria-label="Permalink to &quot;String next();&quot;">​</a></h5><p>读取下一个单词(以空格为分割符)</p><h5 id="double-nextdouble" tabindex="-1">double nextDouble() <a class="header-anchor" href="#double-nextdouble" aria-label="Permalink to &quot;double nextDouble()&quot;">​</a></h5><p>整数或浮点数的字符序列</p><h5 id="boolean-hasnext" tabindex="-1">boolean hasNext() <a class="header-anchor" href="#boolean-hasnext" aria-label="Permalink to &quot;boolean hasNext()&quot;">​</a></h5><p>检验输入中是否还有其他单词</p><h5 id="boolean-hasnextdouble" tabindex="-1">boolean hasNextDouble() <a class="header-anchor" href="#boolean-hasnextdouble" aria-label="Permalink to &quot;boolean hasNextDouble()&quot;">​</a></h5><p>检测是否还有下一个整数或者浮点数的字符序列</p><h3 id="格式化与输出" tabindex="-1">格式化与输出 <a class="header-anchor" href="#格式化与输出" aria-label="Permalink to &quot;格式化与输出&quot;">​</a></h3><p>可以使用System.out.print(x),这条命令<strong>将以x的类型所允许的最大非0数位个数打印输出x</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello word&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>Java5中沿用了C语言函数库中的printf方法。例如,调用</p><p>System.ou.printf(&quot;%8.2f&quot;,x);</p><p>会以一个<strong>字段宽度</strong>打印x:包括8个字符,另外精度为小数点后2个字符。</p><p>每一个以%字符开始的格式说明符都用相应的参数替换。</p><p>用于printf的转换符</p><p>d</p><p>x</p><p>o</p><p>f</p><p>e</p><p>g</p><p>a</p><p>s</p><p>c</p><p>h</p><p>tx</p><p>b</p><p>%</p><p>n</p><p>另外,还可以指定控制格式化输出外观的各种标志。例如,逗号标志可以增加分组分隔符。例如,</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;%,.2f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>用于printf的标志</p><p>空格</p><p>0</p><p>(</p><p>,</p><p>(对于f格式)</p><p>(对于x或o格式)</p><p>$</p><p>&lt;</p><p>可以使用静态的String.format方法创建一个格式化的字符串,而不打印输出:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello,%s. Next year,you‘ll be %d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,name,age);</span></span></code></pre></div><p>我们来看一下printf中格式说明的语法图:</p><p><img src="https://gitee.com/aryangzhu/picture/raw/master/java/%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E%E7%AC%A6%E8%AF%AD%E6%B3%95.jpg" alt=""></p><p>argument index-参数索引(如果有的话后面就得加$)</p><p>flag-标志</p><p>width-宽度</p><p>precession-精确度</p><p>conversion character-转换符(如果没有和.组成的话那么就和t组成另一中形式)</p><h3 id="文件输入与输出" tabindex="-1">文件输入与输出 <a class="header-anchor" href="#文件输入与输出" aria-label="Permalink to &quot;文件输入与输出&quot;">​</a></h3><p>想要读取一个文件,需要构造一个Scanner对象,如下所示:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myfile.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),StandardCharsets.UTF_8);</span></span></code></pre></div><p>想要写入文件,就需要构造一个PrintWriter对象。在构造器(constructor)中,需要提供文件名和字符编码:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myfile.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,StandardCharsets.UTF_8);</span></span></code></pre></div><h2 id="控制流程" tabindex="-1">控制流程 <a class="header-anchor" href="#控制流程" aria-label="Permalink to &quot;控制流程&quot;">​</a></h2><h3 id="块作用域" tabindex="-1">块作用域 <a class="header-anchor" href="#块作用域" aria-label="Permalink to &quot;块作用域&quot;">​</a></h3><h3 id="条件语句" tabindex="-1">条件语句 <a class="header-anchor" href="#条件语句" aria-label="Permalink to &quot;条件语句&quot;">​</a></h3><h3 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h3><h3 id="确定循环" tabindex="-1">确定循环 <a class="header-anchor" href="#确定循环" aria-label="Permalink to &quot;确定循环&quot;">​</a></h3><h3 id="多重选择-switch语句" tabindex="-1">多重选择:switch语句 <a class="header-anchor" href="#多重选择-switch语句" aria-label="Permalink to &quot;多重选择:switch语句&quot;">​</a></h3><h3 id="中断流程控制语句" tabindex="-1">中断流程控制语句 <a class="header-anchor" href="#中断流程控制语句" aria-label="Permalink to &quot;中断流程控制语句&quot;">​</a></h3><h2 id="大数" tabindex="-1">大数 <a class="header-anchor" href="#大数" aria-label="Permalink to &quot;大数&quot;">​</a></h2><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="声明数组" tabindex="-1">声明数组 <a class="header-anchor" href="#声明数组" aria-label="Permalink to &quot;声明数组&quot;">​</a></h3><h3 id="访问数组元素" tabindex="-1">访问数组元素 <a class="header-anchor" href="#访问数组元素" aria-label="Permalink to &quot;访问数组元素&quot;">​</a></h3><h3 id="for-each循环" tabindex="-1">for each循环 <a class="header-anchor" href="#for-each循环" aria-label="Permalink to &quot;for each循环&quot;">​</a></h3><h3 id="数组拷贝" tabindex="-1">数组拷贝 <a class="header-anchor" href="#数组拷贝" aria-label="Permalink to &quot;数组拷贝&quot;">​</a></h3><h3 id="命令行参数" tabindex="-1">命令行参数 <a class="header-anchor" href="#命令行参数" aria-label="Permalink to &quot;命令行参数&quot;">​</a></h3><h3 id="数组排序" tabindex="-1">数组排序 <a class="header-anchor" href="#数组排序" aria-label="Permalink to &quot;数组排序&quot;">​</a></h3><h3 id="多维数组" tabindex="-1">多维数组 <a class="header-anchor" href="#多维数组" aria-label="Permalink to &quot;多维数组&quot;">​</a></h3><h3 id="不规则数组" tabindex="-1">不规则数组 <a class="header-anchor" href="#不规则数组" aria-label="Permalink to &quot;不规则数组&quot;">​</a></h3>`,190);function D(a,m,q,F,v,B){const n=l,h=r("ClientOnly");return t(),k("div",null,[b,d(h,null,{default:o(()=>{var i,s;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((s=a.$frontmatter)==null?void 0:s.showArticleMetadata)??!0)?(t(),u(n,{key:0,article:a.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),C])}const S=p(y,[["render",D]]);export{P as __pageData,S as default};
