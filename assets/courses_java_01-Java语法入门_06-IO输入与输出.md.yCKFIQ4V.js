import{_ as i,o as a,c as s,R as t}from"./chunks/framework.FVQzxbLi.js";const u=JSON.parse('{"title":"06-IO输入与输出","description":"","frontmatter":{"title":"06-IO输入与输出","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/06-IO输入与输出.md","filePath":"courses/java/01-Java语法入门/06-IO输入与输出.md","lastUpdated":1742489594000}'),e={name:"courses/java/01-Java语法入门/06-IO输入与输出.md"},n=t(`<h2 id="输入-输出流" tabindex="-1">输入/输出流 <a class="header-anchor" href="#输入-输出流" aria-label="Permalink to &quot;输入/输出流&quot;">​</a></h2><p>可以从<strong>其中</strong>(输入/输出流)读入一个字节序列的对象称为输入流,而可以向其中写入一个字节序列的称为输出流。这些字节序列的来源和目的地可以是文件、网络连接甚至是内存块。<strong>抽象类InputStream和OutputStream</strong>流构成了输入/输出的基础。 因为面向字节的流不好处理以Unicode(每个字符使用了多个字节来表示)为单位的存储形式，所以Java体系中专门有来处理Unicode字符的类层次结构,即<strong>从Reader和Writer抽象类继承而来</strong>。这些类的读入和写出操作都是基于<strong>两字节的Char值</strong>(即Unicode码元)。</p><h3 id="读写字节" tabindex="-1">读写字节 <a class="header-anchor" href="#读写字节" aria-label="Permalink to &quot;读写字节&quot;">​</a></h3><p>InputStream类中有一个抽象方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><p>这个方法将读入一个字节,并返回读入的字节,遇到<strong>输入源</strong>结尾的话直接返回-1。但是具体的输入流类在设计时,需要覆盖掉这个方法。例如,在FileInputStream中这个方法将从文件中读取一个字节,而System.in中这个方法是从&quot;标准输入&quot;(控制台或者重定向的文件)中读取一个字节。 InputStream中还有其他的若干个非抽象方法,他们都调用了read方法,所以子类只需要覆盖掉read方法即可。 与之对象的是OutputStream中有一个write方法,是向<strong>输出源</strong>中写入一个字节。 read方法和write方法在执行时都将被<strong>阻塞</strong>,直至字节确实被读入或写出。也就是说,当这两个方法被阻塞(由于网络链接忙不能及时访问)时,当前线程被阻塞。<strong>这使得方法等待指定的流变为可用的这段时间内</strong>,其他线程有机会去执行有用的工作。 available方法可以去检查当前可读入的字节数量,下面的代码无论如何不会被阻塞。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> readAvailable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">available</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(readAvailable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[readAvailable];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>完成输入/输出之后,<strong>应当关闭流(通过close方法),避免占用有限的系统资源。同时输出流在关闭时会刷新缓冲区:<strong>所有临时被置于缓冲区以便后面用更大的包来传递的字节会在关闭输出流时被送出</strong>。特别是</strong>不关闭文件的话,那么写出字节的最后一个包可能永远也得不到输出**。当然还可以用flush方法来人为地冲刷这些输出。 原生的read和write方法很少用,因为程序员对于数字、字符串和对象更加感兴趣(用的多)。</p><h3 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h3><h5 id="system-getproperty" tabindex="-1">system.getProperty() <a class="header-anchor" href="#system-getproperty" aria-label="Permalink to &quot;system.getProperty()&quot;">​</a></h5><p>获得当前路径。</p><h4 id="java-io-inputstream" tabindex="-1">java.io.InputStream <a class="header-anchor" href="#java-io-inputstream" aria-label="Permalink to &quot;java.io.InputStream&quot;">​</a></h4><h5 id="abstract-int-read" tabindex="-1">abstract int read() <a class="header-anchor" href="#abstract-int-read" aria-label="Permalink to &quot;abstract int read()&quot;">​</a></h5><p>上面解释过</p><h5 id="int-read-byte-b" tabindex="-1">int read(byte[] b) <a class="header-anchor" href="#int-read-byte-b" aria-label="Permalink to &quot;int read(byte[] b)&quot;">​</a></h5><p>读入一个字节数组,并返回实际读入的字节数,或者在碰到输入流的结尾时返回-1。 int read(byte[] b,int off,int len)</p><h5 id="int-readnbytes-byte-b-int-off-int-len" tabindex="-1">int readNBytes(byte[] b,int off,int len) <a class="header-anchor" href="#int-readnbytes-byte-b-int-off-int-len" aria-label="Permalink to &quot;int readNBytes(byte[] b,int off,int len)&quot;">​</a></h5><p>如果未阻塞(read)的话,则读入由len指定数量的字节,或者阻塞至所有的值都被读入。读入的值将于b中off开始的位置,返回实际读入的字节数,结尾返回-1。</p><h5 id="byte-readallbytes" tabindex="-1">byte[] readAllBytes() <a class="header-anchor" href="#byte-readallbytes" aria-label="Permalink to &quot;byte[] readAllBytes()&quot;">​</a></h5><p>产生一个数组,包含可以从当前流中读入的所有字节。</p><h5 id="long-transferto-outputstream-out" tabindex="-1">long transferTo(OutputStream out) <a class="header-anchor" href="#long-transferto-outputstream-out" aria-label="Permalink to &quot;long transferTo(OutputStream out)&quot;">​</a></h5><p>将当前输入流中的所有字节传送到给定的输出流,返回传递的字节数。这两个流都不应处于关闭状态。</p><h5 id="long-skip-long-n" tabindex="-1">long skip(long n) <a class="header-anchor" href="#long-skip-long-n" aria-label="Permalink to &quot;long skip(long n)&quot;">​</a></h5><p>在输入流中跳过n个字节,返回实际跳过的字节数(遇到文件末尾可能小于n)</p><h5 id="int-avialable" tabindex="-1">int avialable() <a class="header-anchor" href="#int-avialable" aria-label="Permalink to &quot;int avialable()&quot;">​</a></h5><p>返回不阻塞情况下可获取的字节数。</p><h5 id="void-close" tabindex="-1">void close() <a class="header-anchor" href="#void-close" aria-label="Permalink to &quot;void close()&quot;">​</a></h5><p>关闭流</p><h5 id="void-mark-int-readlimit" tabindex="-1">void mark(int readlimit) <a class="header-anchor" href="#void-mark-int-readlimit" aria-label="Permalink to &quot;void mark(int readlimit)&quot;">​</a></h5><p>在输入流的<strong>当前位置</strong>打一个标记(并非所有的流都支持打标记)。如果从输入流中已经读入的字节多于readlimit个,则允许忽略这个标记。</p><h5 id="void-reset" tabindex="-1">void reset() <a class="header-anchor" href="#void-reset" aria-label="Permalink to &quot;void reset()&quot;">​</a></h5><p>返回到最后一个标记,随后重新调用read读入这些字节。如果没有标记则不重置。</p><h5 id="boolean-marksupported" tabindex="-1">boolean markSupported() <a class="header-anchor" href="#boolean-marksupported" aria-label="Permalink to &quot;boolean markSupported()&quot;">​</a></h5><p>如果这个流支持标记,则返回true。</p><h4 id="java-io-outputstream" tabindex="-1">java.io.OutputStream <a class="header-anchor" href="#java-io-outputstream" aria-label="Permalink to &quot;java.io.OutputStream&quot;">​</a></h4><h5 id="abstract-void-write-int-n" tabindex="-1">abstract void write(int n) <a class="header-anchor" href="#abstract-void-write-int-n" aria-label="Permalink to &quot;abstract void write(int n)&quot;">​</a></h5><p>写出一个字节的数据 void write(byte[] b)</p><h5 id="void-write-byte-b-int-off-int-len" tabindex="-1">void write(byte[] b,int off,int len) <a class="header-anchor" href="#void-write-byte-b-int-off-int-len" aria-label="Permalink to &quot;void write(byte[] b,int off,int len)&quot;">​</a></h5><p>写出所有字节或者某个范围的字节到数组b中</p><h5 id="void-close-1" tabindex="-1">void close() <a class="header-anchor" href="#void-close-1" aria-label="Permalink to &quot;void close()&quot;">​</a></h5><p>冲刷并关闭输出流</p><h5 id="void-flush" tabindex="-1">void flush() <a class="header-anchor" href="#void-flush" aria-label="Permalink to &quot;void flush()&quot;">​</a></h5><p>冲刷输出流,也就是将所有缓冲的数据发送到目的地</p><h3 id="完整的流家族" tabindex="-1">完整的流家族 <a class="header-anchor" href="#完整的流家族" aria-label="Permalink to &quot;完整的流家族&quot;">​</a></h3><p>C语言中只有单一类型File*包打天下,Java拥有一个家族。</p><ol><li>按照处理字节和字符分为两个单独的层次结构。一方面,InputStream和OutputStream类可以读写单个字节或者数组,这些类构成了字节的层次结构的基础。要想读写字符串和数字,就需要功能更加强大的子类。例如,DataInputStream和DataOutputStream可以以<strong>二进制格式</strong>读写所有的<strong>基本Java类型</strong>。最后,还包含了多个有用的输入/输出流,例如,ZipInputStream和ZipOutputStream可以以我们常见的<strong>ZIP压缩格式</strong>读写文件。<img src="https://github.com/aryangzhu/blogImage/raw/master/java/InputStream%26OutputStream.jpg" alt="InputStream&amp;OutputStream"></li><li>另一方面,对于Unicode文本(说明Unicode文本是前提),可以使用抽象类Reader和Writer的子类。Reader和Writer类的基本方法与InputStream和OutputStream中的方法类似。 <img src="https://github.com/aryangzhu/blogImage/raw/master/java/Reader%26Writer.jpg" alt="Reader&amp;Writer"></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c)</span></span></code></pre></div><p>read方法将返回一个Unicode码元(一个在0-65535之间的整数),或者碰到文件结尾时返回-1。write方法被调用时将传递一个Unicode码元。 还有4个附加的接口:Closeable、Flushable、Readable和Appendable接口,前两个接口分别拥有</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() throws IOException</span></span></code></pre></div><p>和</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> flush</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><p><img src="https://gitee.com/aryangzhu/picture/raw/master/java/Closeable%E6%8E%A5%E5%8F%A3.jpg" alt=""> InputStream、OutputStream、Reader和Writer都实现了Closeable接口。 注:java.io.Closeable接口实现了java.lang.AutoCloseable接口。因此,对于任何Closeable接口进行操作时,都可以使用try-with-resource语句(我们之前在捕获异常中有有学习过)。 OutputStream和Writer还实现了Flushable接口。 Readable接口只有一个方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CharBuffer cb)</span></span></code></pre></div><p>CharBuffer类拥有按顺序和随机读写访问的能力,它表示<strong>内存中的缓冲区或者一个内存映像的文件</strong>。 Appendable接口拥有添加单个字符和字符序列的方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Appendable </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Appehdable </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CharSequence s)</span></span></code></pre></div><p>CharSequence接口描述了一个<strong>char值序列的基本属性</strong>,String、CharBuffer、StringBuilder和StringBuffer都实现了它。</p><h4 id="常用api-1" tabindex="-1">常用API <a class="header-anchor" href="#常用api-1" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-closeable" tabindex="-1">java.io.Closeable <a class="header-anchor" href="#java-io-closeable" aria-label="Permalink to &quot;java.io.Closeable&quot;">​</a></h5><h6 id="void-close-2" tabindex="-1">void close() <a class="header-anchor" href="#void-close-2" aria-label="Permalink to &quot;void close()&quot;">​</a></h6><p>关闭这个Closeable,这个方法可能会抛出IOException</p><h5 id="java-io-flushable" tabindex="-1">java.io.Flushable <a class="header-anchor" href="#java-io-flushable" aria-label="Permalink to &quot;java.io.Flushable&quot;">​</a></h5><h6 id="void-flush-1" tabindex="-1">void flush() <a class="header-anchor" href="#void-flush-1" aria-label="Permalink to &quot;void flush()&quot;">​</a></h6><p>冲刷这个Flushable。</p><h5 id="java-lang-readable" tabindex="-1">java.lang.Readable <a class="header-anchor" href="#java-lang-readable" aria-label="Permalink to &quot;java.lang.Readable&quot;">​</a></h5><h6 id="int-read-charbuffer-cb" tabindex="-1">int read(CharBuffer cb) <a class="header-anchor" href="#int-read-charbuffer-cb" aria-label="Permalink to &quot;int read(CharBuffer cb)&quot;">​</a></h6><p>尝试着向cb读入其可持有数量的char值。返回可读入的char值的数量,或者从这个Readable中无法再获得更多的值时返回-1。</p><h5 id="java-lang-appendable" tabindex="-1">java.lang.Appendable <a class="header-anchor" href="#java-lang-appendable" aria-label="Permalink to &quot;java.lang.Appendable&quot;">​</a></h5><p>Appendable append(char c) #####　Appendable append(CharSequence cs) 向这个Appendable中追加给定的码元或者给定序列的码元,返回this。</p><h5 id="java-lang-charsequnece" tabindex="-1">java.lang.CharSequnece <a class="header-anchor" href="#java-lang-charsequnece" aria-label="Permalink to &quot;java.lang.CharSequnece&quot;">​</a></h5><h6 id="char-charat-int-index" tabindex="-1">char charAt(int index) <a class="header-anchor" href="#char-charat-int-index" aria-label="Permalink to &quot;char charAt(int index)&quot;">​</a></h6><p>返回给定索引处的码元。</p><h6 id="int-length" tabindex="-1">int length() <a class="header-anchor" href="#int-length" aria-label="Permalink to &quot;int length()&quot;">​</a></h6><p>返回在这个序列中的码元的数量。</p><h6 id="charsequence-subsequnce-int-startindex-int-index" tabindex="-1">CharSequence subSequnce(int startIndex,int Index) <a class="header-anchor" href="#charsequence-subsequnce-int-startindex-int-index" aria-label="Permalink to &quot;CharSequence subSequnce(int startIndex,int Index)&quot;">​</a></h6><p>返回由存储在startIndex到endIndex-1处的所有码元构成的CharSequnce。</p><h6 id="string-tostring" tabindex="-1">String toString() <a class="header-anchor" href="#string-tostring" aria-label="Permalink to &quot;String toString()&quot;">​</a></h6><p>返回这个序列中所有码元构成的字符串。</p><h3 id="组合输入-输出流过滤器" tabindex="-1">组合输入/输出流过滤器 <a class="header-anchor" href="#组合输入-输出流过滤器" aria-label="Permalink to &quot;组合输入/输出流过滤器&quot;">​</a></h3><p>FileInputStream和FileOutputStream可以提供一个附着在磁盘文件上的流,你可以通过构造器来指定文件位置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;meployee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h4 id="两个注意的点" tabindex="-1">两个注意的点： <a class="header-anchor" href="#两个注意的点" aria-label="Permalink to &quot;两个注意的点：&quot;">​</a></h4><p>1.<strong>所有在java.io中的类都将相对路径解释为用户工作目录开始</strong>,你可以调用<strong>System.getProperty(&quot;user.dir&quot;)<strong>来获得这个信息。 2.java中的&quot;\\&quot;为转义字符,所以在Windows风格的路径中应当使用&quot;\\\\&quot;。例如D:\\\\Windows\\\\win.ini。但是,更好的方法是使用常量字符串</strong>java.io.File.separator</strong>获得它。 同字节流一样,FileInputStream和FileOutputStream也只能处理字节。 Java中有非常灵活的机制来确保各个流能够组合在一起,FileInputStream和URL类的openStream方法返回的输入流无法读入数值类型的方法,那我们可以将他与DataInputStream组合起来使用。 例如,为了从文件中读入数字,首先需要创建一个FileInputStream,然后将其<strong>传递给DataInputStream的构造器</strong>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> din</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fin);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">din.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>FilterInputStream和FilterOutputStream类,这些文件的子类用于向处理字节的输入/输出流添加额外的功能。 默认情况下,输入流每执行一次read方法就要请求操作系统分发一个字节。那么,如果申请一个数据块并将其置于缓冲区肯定更加高效。如果我们想使用缓冲机制和用于文件数据输入方法,那么需要使用下面这种相当复杂的构造器序列:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> din</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStreama</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)))</span></span></code></pre></div><p>注意:我们将DataInputStream置于构造链的最外部，这是因为我们希望使用DataInputStream的方法,并且希望<strong>它们能够使用带缓冲机制的read方法</strong>。 当我们使用输入流链的时候,需要跟踪各个中介输入流(intermediate input stream)。例如,当读入输入时,你需要检查下一个将要读入的字符是否是你需要的字符。Java中提供了这样的类PushbackInputStream,我们对上面的代码加以改造:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    pbin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PushbackInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        	new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))));</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pbin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)pbin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>如果不是自己期望的字符,那么我们可以将其推回至流中。 其他语言的输入/输出流类库中,缓冲机制和预览都是自动处理的。Java更加麻烦,但也更加灵活。</p><h4 id="常用api-2" tabindex="-1">常用API <a class="header-anchor" href="#常用api-2" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-fileinputstream" tabindex="-1">java.io.FileInputStream <a class="header-anchor" href="#java-io-fileinputstream" aria-label="Permalink to &quot;java.io.FileInputStream&quot;">​</a></h5><p>FileInputStream(String name)</p><h6 id="fileinputstream-file-file" tabindex="-1">FileInputStream(File file) <a class="header-anchor" href="#fileinputstream-file-file" aria-label="Permalink to &quot;FileInputStream(File file)&quot;">​</a></h6><p>由name字符串或file对象指定路径名的文件创建一个新的输入流。</p><h5 id="java-io-fileoutputstream" tabindex="-1">java.io.FileOutputStream <a class="header-anchor" href="#java-io-fileoutputstream" aria-label="Permalink to &quot;java.io.FileOutputStream&quot;">​</a></h5><p>FileOutpuStream(String name) FileOutputStream(String name,boolean append) FileOutputStream(File file)</p><h6 id="fileoutputstream-file-file-boolean-append" tabindex="-1">FileOutputStream(File file,boolean append) <a class="header-anchor" href="#fileoutputstream-file-file-boolean-append" aria-label="Permalink to &quot;FileOutputStream(File file,boolean append)&quot;">​</a></h6><p>由name字符串或file对象指定路径名穿啊关键一个新的文件输出流。如果append为true,那么已存在的文件不会被删除而会直接添加导师文件末尾;如果为false,那么则会删除素有同名文件。</p><h5 id="java-io-bufferedinputstream" tabindex="-1">java.io.BufferedInputStream <a class="header-anchor" href="#java-io-bufferedinputstream" aria-label="Permalink to &quot;java.io.BufferedInputStream&quot;">​</a></h5><h6 id="bufferedinputstream-inputstream-in" tabindex="-1">BufferedInputStream(InputStream in) <a class="header-anchor" href="#bufferedinputstream-inputstream-in" aria-label="Permalink to &quot;BufferedInputStream(InputStream in)&quot;">​</a></h6><p>创建一个带缓冲区的输入流。带缓冲区的输入流在从流中读取字符时,不会每次都访问设备。当缓冲区为空时,会向缓冲区中读入一个新的数据块。</p><h5 id="java-io-bufferedoutputstream" tabindex="-1">java.io.BufferedOutputStream <a class="header-anchor" href="#java-io-bufferedoutputstream" aria-label="Permalink to &quot;java.io.BufferedOutputStream&quot;">​</a></h5><h6 id="bufferedoutputstream-outputstream-out" tabindex="-1">BufferedOutputStream(OutputStream out) <a class="header-anchor" href="#bufferedoutputstream-outputstream-out" aria-label="Permalink to &quot;BufferedOutputStream(OutputStream out)&quot;">​</a></h6><p>创建一个带缓冲区的输出流。带缓冲区的输出流在收集要写出的字符时,也不会每次都访问设备。当缓冲区填满或这被冲刷时,数据就被写出。</p><h5 id="java-io-pushbackinputstream" tabindex="-1">java.io.PushbackInputStream <a class="header-anchor" href="#java-io-pushbackinputstream" aria-label="Permalink to &quot;java.io.PushbackInputStream&quot;">​</a></h5><p>PushbackInputStream(InputStream in)</p><h6 id="pushbackinputstream-inputstream-in-int-size" tabindex="-1">PushbackInputStream(InputStream in,int size) <a class="header-anchor" href="#pushbackinputstream-inputstream-in-int-size" aria-label="Permalink to &quot;PushbackInputStream(InputStream in,int size)&quot;">​</a></h6><p>构建一个可以预览一个字节或者具有指定尺寸的回退缓冲区的输入流。</p><h6 id="void-unread" tabindex="-1">void unread() <a class="header-anchor" href="#void-unread" aria-label="Permalink to &quot;void unread()&quot;">​</a></h6><p>回推一个字节,它可以在下次调用read时再次被获取。</p><h3 id="文本输入与输出" tabindex="-1">文本输入与输出 <a class="header-anchor" href="#文本输入与输出" aria-label="Permalink to &quot;文本输入与输出&quot;">​</a></h3><p>在保存数据时,可以选择二进制形式或者文本形式。例如,1234在二进制数表示为000004D2构成的序列(十六进制表示法),而文本格式存储为<strong>字符串</strong>&quot;1234&quot;。虽然二进制格式的I/O高速且高效,但是不适合人类阅读。 在存储文本字符串时,我们必须考虑<strong>字符编码</strong>。Java内部使用的UTF-16编码方式,许多其他程序希望按照其他方式编码。 <strong>OutputStreamWriter类将使用选定的字符编码方式</strong>,把Unicode码元的输出流转换为字节流。 <strong>InputStreamReader类</strong>将包含字节的输入流转换为可以<strong>产生Unicode码元的读入器</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InputStreamReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;data.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),StandardCharsets.UTF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h3 id="如何写出文本输出" tabindex="-1">如何写出文本输出 <a class="header-anchor" href="#如何写出文本输出" aria-label="Permalink to &quot;如何写出文本输出&quot;">​</a></h3><p>对于<strong>文本输出</strong>(以文本格式输出???),可以使用<strong>PrintWriter</strong>。这个类拥有以<strong>文本格式打印字符串和数字的方法</strong>,<strong>需要用文件名和字符编码方式构建一个PrintStream对象</strong>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,UTF_8);</span></span></code></pre></div><p>我们来看如下代码:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Harry Hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(salary);</span></span></code></pre></div><p>它将</p><p>Harry Hacker 7500.0</p><p>输出到<strong>写出器</strong>out,之后这些字符将会被转换成字节并最终写入employee.txt中。</p><p>如果写出器设置为<strong>自动冲刷模式</strong>,那么只要println被调用,缓冲区中的所有字符都会发送到他们的目的地(打印写出器总是带缓冲区的)。</p><h4 id="常用api-3" tabindex="-1">常用API <a class="header-anchor" href="#常用api-3" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-printwriter" tabindex="-1">java.io.PrintWriter <a class="header-anchor" href="#java-io-printwriter" aria-label="Permalink to &quot;java.io.PrintWriter&quot;">​</a></h5><p>PrintWriter(Writer out)</p><h6 id="printwriter-writer-writer" tabindex="-1">PrintWriter(Writer writer) <a class="header-anchor" href="#printwriter-writer-writer" aria-label="Permalink to &quot;PrintWriter(Writer writer)&quot;">​</a></h6><p>创建一个向给定的写出器写出的新的PrintWriter。</p><p>PrintWriter(String fileName,String encoding)</p><h6 id="printer-file-file-string-encoding" tabindex="-1">Printer(File file,String encoding) <a class="header-anchor" href="#printer-file-file-string-encoding" aria-label="Permalink to &quot;Printer(File file,String encoding)&quot;">​</a></h6><p>创建一个使用给定的编码方式向给定的文件写出的新的PrintWriter。</p><h6 id="void-print-object-obj" tabindex="-1">void print(Object obj) <a class="header-anchor" href="#void-print-object-obj" aria-label="Permalink to &quot;void print(Object obj)&quot;">​</a></h6><p>通过打印从toString产生的字符串来打印一个对象。</p><h6 id="void-print-string-s" tabindex="-1">void print(String s) <a class="header-anchor" href="#void-print-string-s" aria-label="Permalink to &quot;void print(String s)&quot;">​</a></h6><p>打印一个包含Unicode码元的字符串。</p><h6 id="void-println-string-s" tabindex="-1">void println(String s) <a class="header-anchor" href="#void-println-string-s" aria-label="Permalink to &quot;void println(String s)&quot;">​</a></h6><p>打印一个字符串,带有终止符。如果处于自动冲刷模式,那么将冲刷这个流。</p><h6 id="void-print-char-s" tabindex="-1">void print(char[] s) <a class="header-anchor" href="#void-print-char-s" aria-label="Permalink to &quot;void print(char[] s)&quot;">​</a></h6><p>打印在给定的字符串中的所有的Unicode码元。</p><h6 id="void-print-char-c" tabindex="-1">void print(char c) <a class="header-anchor" href="#void-print-char-c" aria-label="Permalink to &quot;void print(char c)&quot;">​</a></h6><p>打印一个Unicode码元。</p><p>void print(int i)</p><p>void print(long l)</p><p>void print(float f)</p><p>void print(double b)</p><p>void print(boolean b)</p><p>以文本格式打印给定的值。</p><h6 id="void-printf-string-format-object-args" tabindex="-1">void printf(String format,Object...args) <a class="header-anchor" href="#void-printf-string-format-object-args" aria-label="Permalink to &quot;void printf(String format,Object...args)&quot;">​</a></h6><p>按照格式字符串指定的方式打印给定的值。</p><h6 id="boolean-checkerror" tabindex="-1">boolean checkError() <a class="header-anchor" href="#boolean-checkerror" aria-label="Permalink to &quot;boolean checkError()&quot;">​</a></h6><p>如果产生格式化或输出错误,则返回true。一旦这个流碰到了错误,它就收到了污染,并且所有对checkError的调用都将返回true。</p><h3 id="如何读入文本输入" tabindex="-1">如何读入文本输入 <a class="header-anchor" href="#如何读入文本输入" aria-label="Permalink to &quot;如何读入文本输入&quot;">​</a></h3><p>我们应用最广泛的就是<strong>Scanner</strong>类。</p><p>如果想要将文件一行行读入,可以调用:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lines</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readAllLines</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,charset);</span></span></code></pre></div><p>如果文件太大,那么可以将行惰性处理为一个Stream&lt;String&gt;对象:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lines</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lines</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,charset)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>还可以使用<strong>扫描器</strong>来读入符号(token),即<strong>由分隔符分隔的字符串</strong>,默认的分隔符是空白字符,可将分隔符修改为任意的正则表达式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">useDelimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">PL+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>调用next方法可以产生下一个符号:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> word</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>或者,读取包含所有文件的流:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">words</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">tokens</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>在早期的Java版本中,处理文本输入的唯一方式就是通过BufferedReader类。它的readLine方法会产生一行文本,或者在无法获得更多的输入时返回null。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> BufferedReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InputStreamReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(inputStream,charset))){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> line;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        dosomething;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>与Scanner不同的是,BufferedReader没有用于任何读入数字的方法。</p><h3 id="以文本格式存储对象" tabindex="-1">以文本格式存储对象 <a class="header-anchor" href="#以文本格式存储对象" aria-label="Permalink to &quot;以文本格式存储对象&quot;">​</a></h3><p>由于要写出文本文件中,所以使用PrintWriter类。</p><p>split方法的参数是一个描述分隔符的正则表达式。</p><p>注:竖线在正则表达式中具有特殊的含义,因此需要用\\字符来表示转义,而这个\\又需要使用另一个\\来转义,所有就有了&quot;\\\\|&quot;表达式。</p><h3 id="字符编码方式" tabindex="-1">字符编码方式 <a class="header-anchor" href="#字符编码方式" aria-label="Permalink to &quot;字符编码方式&quot;">​</a></h3><p>输入和输出流都是用于字节序列的,但在许多情况下,<strong>我们希望操作的是文本,即字符序列</strong>,那么字符如何编码成字节就是问题。</p><p>Java针对<strong>字符</strong>采用的是Unicode标准。每个字符或&quot;编码点&quot;都具有一个21位的整数,也就是说将这些21位数字包装成字节的方法有多种。</p><p>最常见的编码方式是UTF-8,它会将每个Unicode编码点编码为1到4个字节的序列。</p><p>另一种常见的编码方式是UTF-16,它会将每个Unicode编码点编码为1个或2个16位值。Java<strong>字符串</strong>中使用的就是这种方式。</p><p>StandardCharsets类具有类型为Charset的静态变量,用于表示每中Java虚拟机都必须支持的字符编码方式,例如:</p><p>StandardCharsets.UTF_8;</p><h2 id="读写二进制数据" tabindex="-1">读写二进制数据 <a class="header-anchor" href="#读写二进制数据" aria-label="Permalink to &quot;读写二进制数据&quot;">​</a></h2><h3 id="datainput和dataoutput接口" tabindex="-1">DataInput和DataOutput接口 <a class="header-anchor" href="#datainput和dataoutput接口" aria-label="Permalink to &quot;DataInput和DataOutput接口&quot;">​</a></h3><p>DataOutput接口定义了用于以二进制格式读写数组、字符、boolean值和字符串的方法。</p><p>例如,writeInt总是将一个整数写出为4字节的二进制数量值,而不管它有多少位,writeDouble总是将一个double值写出为8字节的二进制数量值。优点是给定类型的每个值所使用的空间都是相同的,缺点是非人类阅读的。</p><p>注: 存储的方式分为最高位字节的方式存储和最低位字节方式存储。</p><p>DataInputStream类实现了DataInput接口,为了从文件中读入二进制数据,可以将DataInputStream与某个字节源组合,例如FileInputStream：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p>而DataOutputStream实现了DataOutput接口。</p><h4 id="常用api-4" tabindex="-1">常用API <a class="header-anchor" href="#常用api-4" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-datainput" tabindex="-1">java.io.DataInput <a class="header-anchor" href="#java-io-datainput" aria-label="Permalink to &quot;java.io.DataInput&quot;">​</a></h5><h6 id="int-readint" tabindex="-1">int readInt() <a class="header-anchor" href="#int-readint" aria-label="Permalink to &quot;int readInt()&quot;">​</a></h6><p>读取一个给定类型的值。</p><h6 id="void-readfully-byte-b" tabindex="-1">void readFully(byte[] b) <a class="header-anchor" href="#void-readfully-byte-b" aria-label="Permalink to &quot;void readFully(byte[] b)&quot;">​</a></h6><p>将字节读入数组b中,其间阻塞直至所有字节被读入。</p><h6 id="void-readfully-byte-b-int-off-int-len" tabindex="-1">void readFully(byte[] b,int off,int len) <a class="header-anchor" href="#void-readfully-byte-b-int-off-int-len" aria-label="Permalink to &quot;void readFully(byte[] b,int off,int len)&quot;">​</a></h6><p>len指定数量,放置在数组中从off开始的位置。</p><h5 id="java-io-dataoutput" tabindex="-1">java.io.DataOutput <a class="header-anchor" href="#java-io-dataoutput" aria-label="Permalink to &quot;java.io.DataOutput&quot;">​</a></h5><h6 id="void-writeint-int-i" tabindex="-1">void writeInt(int i) <a class="header-anchor" href="#void-writeint-int-i" aria-label="Permalink to &quot;void writeInt(int i)&quot;">​</a></h6><p>写出一个定类型的值。</p><p>void writeChars(String s)</p><p>写出字符串中的所有字符。</p><h3 id="随机访问文件" tabindex="-1">随机访问文件 <a class="header-anchor" href="#随机访问文件" aria-label="Permalink to &quot;随机访问文件&quot;">​</a></h3><p><strong>RandomAccessFile类可以在文件的任何位置查找或写入数据</strong>。你可以打开一个随机访问文件,只用于读入或者同时用于读写,你可以通过使用字符串&quot;r&quot;(读)或&quot;rw&quot;(用于读写访问)作为构造器的第二个参数来指定这个选项。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">RandomAccessFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RandomAccessFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;rw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>随机访问文件有一个表示下一个将被读入或这写出的字节所处位置的<strong>文件指针</strong></p><p>,<strong>seek方法可以用来将这个文件指针设置到文件中的任意字节位置</strong>。seek的参数是一个long类型的整数,它的值位于0到文件按照字节来度量的长度之间。</p><p>getFilePointer方法将返回文件指针。</p><p>指定文件指针位置:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">RECORD_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Empolyee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in);</span></span></code></pre></div><p>整数型和浮点型在二进制格式中都具有固定的尺寸,但是在处理字符串时就有些麻烦了,所有我们手写两个助手方法来读写具有固定尺寸的字符串。</p><p>下面这个方法写出从字符串开头开始的指定数量的码元(如果码元过少,则用0来补位)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeFixedString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String s,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size,DataOutput out){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">size;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ch);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>readFixedString方法从输入流中读入字符,直至读入size个码元,或者直至遇到具有0值的字符值跳过剩余0值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readFixedString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size,DataInput in) throws IOException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">size){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readChar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ch);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sipBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">i));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="zip文档" tabindex="-1">ZIP文档 <a class="header-anchor" href="#zip文档" aria-label="Permalink to &quot;ZIP文档&quot;">​</a></h3><p>每个ZIP文档中都有一个头,包含诸如每个文件名字和所使用的压缩方法等信息。你有可能需要浏览文档中的每一项,所以你可以使用getNextEntry方法来获取一个ZipEntry类型的对象。该方法会读入数据至这一项的末尾。然后调用closeEntry来读入下一项。在读入最后一项之前,不要关闭zin。下面是典型的<strong>通读ZIP文件的序列代码</strong>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ZipInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> zin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ZipInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(zipname));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ZipEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entry;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">zin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getNextEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    read the contents of zin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dosomething...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    zin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">closEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">zin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>下面是写出到ZIP文件的代码:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ZipOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> zout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ZipOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;test.zip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> all files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ze</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ZipEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(filename);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//需要传递ZipEntry的构造器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    zout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">putNextEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ze); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//用这个方法来写出新文件，并将数据发送至ZIP输出流中。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    send data to zout;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    zout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">closeEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">zout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p><strong>JAR文件是一个特殊性的ZIP文件</strong>。</p><h4 id="常用api-5" tabindex="-1">常用API <a class="header-anchor" href="#常用api-5" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-zipinputstream" tabindex="-1">java.io.ZipInputStream <a class="header-anchor" href="#java-io-zipinputstream" aria-label="Permalink to &quot;java.io.ZipInputStream&quot;">​</a></h5><h5 id="java-io-zipoutputstream" tabindex="-1">java.io.ZipOutputStream <a class="header-anchor" href="#java-io-zipoutputstream" aria-label="Permalink to &quot;java.io.ZipOutputStream&quot;">​</a></h5><h5 id="java-util-zip-zipentry" tabindex="-1">java.util.zip.ZipEntry <a class="header-anchor" href="#java-util-zip-zipentry" aria-label="Permalink to &quot;java.util.zip.ZipEntry&quot;">​</a></h5><h6 id="zipentry-string-name" tabindex="-1">ZipEntry(String name) <a class="header-anchor" href="#zipentry-string-name" aria-label="Permalink to &quot;ZipEntry(String name)&quot;">​</a></h6><p>用给定的名字构建一个ZIP项。</p><h5 id="java-io-zip-zipfile" tabindex="-1">java.io.zip.ZipFile <a class="header-anchor" href="#java-io-zip-zipfile" aria-label="Permalink to &quot;java.io.zip.ZipFile&quot;">​</a></h5><h2 id="对象输入-输出序列化" tabindex="-1">对象输入/输出序列化 <a class="header-anchor" href="#对象输入-输出序列化" aria-label="Permalink to &quot;对象输入/输出序列化&quot;">​</a></h2><pre><code>我们希望使用固定长度的格式保存记录,但是Java中的数据类型的长度又不一样。例如,一个Employee数组,有可能存储的是Manager类型的记录。
Java语言支持一种称之为**对象序列化**(object serialization)的非常通用的机制。可以将任何写出到输出流,并在之后将其读回。
我觉得Java编程思想中为什么使用序列化更为透彻:
当创建对象时，在程序运行期间可以获取，但是程序终止时，所有的对象都会被清除，我们是无法再获取的。当然，你可以通过将信息写入文件或者数据库来达到目的。但是为了更方便，Java 为我们提供了序列化机制，并且屏蔽了大部分细节。 ——Bruce Eckel
</code></pre><h3 id="保存和加载序列化对象" tabindex="-1">保存和加载序列化对象 <a class="header-anchor" href="#保存和加载序列化对象" aria-label="Permalink to &quot;保存和加载序列化对象&quot;">​</a></h3><p>为了保存对象数据,首先需要打开一个ObjectOutputStream对象:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">employee.dat));</span></span></code></pre></div><p>现在,<strong>为了保存对象可以直接使用ObjectOutputStream的writeObject方法</strong>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>out.writeObject(harry);</span></span></code></pre></div><p>为了将对象读回,创建一个ObjectInputStream对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> OjbectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;employee.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> harry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Employee)in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>所有希望<strong>在对象输出流中存储或从对象输入流中恢复</strong>的类都应该实现Serializable接口。</p><p>Serializable接口中没有任何方法(联系之前的学习的Cloneable接口,但是为了使类可以克隆,必须要是覆盖Object类中的clone方法)</p><p>在幕后,是ObjectOutputStream在浏览对象的所有域(访问堆中的对象实例???),并存储它们的内容。</p><p>现在来假设另一种情况:当一个对象被多个对象共享,作为它们各自状态的一部分时,会发生什么？</p><p>书上的案例是一个经理陪一个秘书,当然两个经理可以公用一个秘书。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> harry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Harry Hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> carl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Carl Craker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">carl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setSecretary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(harry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tony</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Tony Teeter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tony.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setSecretary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(tony);</span></span></code></pre></div><p>保存这样的对象网络对我们来说是一个挑战,我们不能去<strong>保存和恢复秘书对象的内存地址</strong>,因为对象被重新加载的时候内存地址会发生改变(在服务器之间传输的时候)。</p><p><img src="https://gitee.com/aryangzhu/picture/raw/master/java/%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AE%9E%E4%BE%8B.jpg" alt=""></p><p>每个对象都是用一个**序列号(serial number)**保存的,这就是这种机制之所以被称为对象序列化的原因,下面是算法:</p><p>1.对你遇到的每一个对象都关联一个序列号。</p><p>2.对于对象,当第一次遇到时,保存其对象数据到输出流中。</p><p>3.如果某个对象之前被保存过,那么只写出**&quot;与之前保存过的序列号为x的对象相同&quot;**。</p><p>在读回对象时,整个过程是反过来的。</p><p>1.对于对象输入流中的对象,在第一次遇到其序列号时构建它,并使用流中数据来初始化它,然后记录这个顺序号和新对象之间的关联。</p><p>2.遇到&quot;与之前保存过的序列号为x的对象相同时&quot;这一标记,则获取与这个序列号相关联的对象引用。</p><h4 id="常用api-6" tabindex="-1">常用API <a class="header-anchor" href="#常用api-6" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-objectoutputstream" tabindex="-1">java.io.ObjectOutputStream <a class="header-anchor" href="#java-io-objectoutputstream" aria-label="Permalink to &quot;java.io.ObjectOutputStream&quot;">​</a></h5><h6 id="objectoutputstream-outputstream-out" tabindex="-1">ObjectOutputStream(OutputStream out) <a class="header-anchor" href="#objectoutputstream-outputstream-out" aria-label="Permalink to &quot;ObjectOutputStream(OutputStream out)&quot;">​</a></h6><p>创建一个ObjectOutputStream使得你可以将对象写出到指定的OutputStream。</p><h6 id="void-writeobject-object-obj" tabindex="-1">void writeObject(Object obj) <a class="header-anchor" href="#void-writeobject-object-obj" aria-label="Permalink to &quot;void writeObject(Object obj)&quot;">​</a></h6><p>写出指定的对象到ObjectOutputStream,这个方法将存储指定对象的类、类的签名以及这个类及其超类中所有非静态和非瞬时的域的值。</p><h5 id="java-io-objectinputstream" tabindex="-1">java.io.ObjectInputStream <a class="header-anchor" href="#java-io-objectinputstream" aria-label="Permalink to &quot;java.io.ObjectInputStream&quot;">​</a></h5><h6 id="objectinputstream-inputstream-in" tabindex="-1">ObjectInputStream(InputStream in) <a class="header-anchor" href="#objectinputstream-inputstream-in" aria-label="Permalink to &quot;ObjectInputStream(InputStream in)&quot;">​</a></h6><p>创建一个ObjectInputStream用于从指定的InputStream中读回对象信息。</p><h6 id="object-readobject" tabindex="-1">Object readObject() <a class="header-anchor" href="#object-readobject" aria-label="Permalink to &quot;Object readObject()&quot;">​</a></h6><p>从ObjectInputStream中读入一个<strong>对象</strong>。特别是,这个方法会读回对象的类、类的签名和这个类以及超类中所有非静态和飞瞬时的域的值。它执行的反序列化允许恢复多个对象引用。</p><h3 id="理解对象序列化的文件格式" tabindex="-1">理解对象序列化的文件格式 <a class="header-anchor" href="#理解对象序列化的文件格式" aria-label="Permalink to &quot;理解对象序列化的文件格式&quot;">​</a></h3><p>这一章书上的内容很顶,建议多看几遍。</p><p>对象序列化是以特殊的文件格式存储对象数据,每个文件是以下面的两个字节的&quot;魔幻数字&quot;开始的</p><p>AC ED</p><p>后面紧跟着对象序列化格式的版本号,目前是</p><p>00 05</p><p>然后是它包含的<strong>对象序列,其顺序即它们存储的顺序</strong>。</p><p>字符串对象被存为</p><p>74 两字节表示的字符串长度 所有字符</p><p>例如,&quot;Harry&quot;被存为</p><p>74 00 05</p><p>字符串中的Unicode字符被存储为修改过的UTF-8格式。</p><p>当存储一个对象时,这个对象所属的类也必须存储。这个<strong>类的描述</strong>包括(下面的类标识符更加详细)</p><p>1.类名。</p><p>2.序列化的<strong>版本唯一</strong>的ID,它是数据域类型和方法签名的指纹(指纹是通过对类、超类、接口、域类型和方法签名按照规范方式排序,然后使用安全算法SHA应用于这些数据而获得的,SHA会随着类的数据域或方法发生变化而变化)。</p><p>3.描述序列化方法的标志集。</p><p>4.对数据域的描述</p><pre><code>在读入一个对象时,会拿其指纹与它所属的类的当前指纹进行对比。如果它们不匹配,那么就说明这个类的定义在该对象被写出之后发生过变化,因此会产生一个异常。当然,类是会演化的,所以读入一个旧版本的对象是必需的。
</code></pre><p>下面表示了<strong>类标识符</strong>是如何存储的:</p><p>1.72</p><p>2.2字节的类名长度</p><p>3.类名</p><p>4.8字节长的指纹</p><p>5.1字节长的标志</p><p>6.2字节长的数据域描述符的数量</p><p>7.数据域描述符</p><p>8.78(结束标记) 9.超类类型(如果没有就是70)</p><p>标志字节是由在java.io。ObjectStreamConstants中定义的3位掩码构成的:</p><p>static final byte SC_WRITE_METHOD=1;//class has a writeObject method that writes additional data</p><p>static final byte SC_SERIALIZABLE=2;//class implements the Serializable interface</p><p>static final byte SC_EXTENALIZABLE=4;//class implements the Externalizable interface</p><p>我们要写出的类实现了Serializable接口,并且其标志值为02,而可序列化的java.util.Date类定义了自己的readObject/writeObject方法,并且标志值为03。</p><p>每个数据域描述符的格式如下:</p><p>1.1字节长的类型编码。</p><p>2.2字节长的域名长度。</p><p>3.域名。</p><p>4.类名(如果域是对象)</p><p>大部分类型编码使用的类型的首字母,除了以下这几个:</p><p>1.J long</p><p>2.L 对象</p><p>3.Z boolean</p><p>4.[ 数组</p><p><strong>类名和域名字符串不是以字符串编码74开头的</strong>,但是域类型是。</p><p>例如,Employee类薪水被编码为:</p><p>D 00 06 salary</p><p>下面是Employee类完整的<strong>类描述符</strong>:</p><p>72 00 08 Employee</p><p>E6 D2 86 7D AE AC 18 1B 02 指纹和标志</p><p>00 03 实例的数量</p><p>D 00 06 salary 实例域的类型和名字</p><p>L 00 07 hireDay 同上</p><p>74 00 10 Ljava/util/Date; 实例域的类名:Date</p><p>...</p><p>78 结束标记</p><p>70 无超类</p><p>这些描述相当的长,如果需要在文件中再次记录的话,可以使用一种缩写版:</p><p>71 4字节长的<strong>序列号</strong></p><p>上面的序列号将会引用前面已经描述过的类描述符。</p><p>对象将会被存储为:</p><p>73 类描述符 对象数据</p><p>例如,下面就是Employee对象如何存储:</p><p>40 E8 6A 00 00 00 00 00 00 salary域的值:double</p><p>73 hireDay域的值:新对象</p><pre><code>71 00 7E 00 08              已有的类java.util.Date

77 08 00 00 00 91 1B 4E B1 80 78 外部存储
</code></pre><p>74 00 0C Harry Hacker name域的值:String</p><p>然后最后是数组如何存储:</p><p>75 类描述符 4字节长的数组项的数量 数组项</p><h4 id="几个注意的点" tabindex="-1">几个注意的点: <a class="header-anchor" href="#几个注意的点" aria-label="Permalink to &quot;几个注意的点:&quot;">​</a></h4><p>1.对象流输出中包含素有对象的类型和数据域(像上面的形式???)。</p><p>2.每个对象都被赋予一个序列号。</p><p>3.相同对象的重复出现将被存储为对这个对象的序列号的引用。</p><h3 id="修改默认的序列化机制" tabindex="-1">修改默认的序列化机制 <a class="header-anchor" href="#修改默认的序列化机制" aria-label="Permalink to &quot;修改默认的序列化机制&quot;">​</a></h3><p><strong>某些数据域是不可以序列化的</strong>,例如,只对本地方法有意义的存储文件句柄或者窗口句柄的整数值，这种信息在稍后重新加载对象或将其传送到其他机器上时都是没有用处的。甚至如果这种域的值处理不恰当,还会引起本地方法的崩溃。Java中拥有一种很简单的机制来防止这种域被序列化,那就是将它们标记成transient的。<strong>如果这些域属于不可序列化的类,也需要将它们标记成transient的</strong>。瞬时的域在对象被序列化时总是被跳过的。</p><pre><code>序列化机制为单个的类提供了一种方式,去向默认的读写行为添加验证或者任何其他想要的行为。可序列化的类可以定义具有下列签名的方法:
</code></pre><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectInputStream in)throws IOException,ClassNotFoundException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectOutputStream out)throws </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IOException;</span></span></code></pre></div><p>之后数据就再也不会被自动序列化,取而代之的是调用这些方法(也就是说之前我们只需要调用out.writeObject(harry)就能序列化对象,而现在我们需要确定数据域,然后在可序列化的类中手写数据域的序列化)。例如,下面的代码:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectOutputStream out)throws </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IOException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defaultWirteObjct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(point.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">wirteDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(point.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上面的defaultWriteObject方法是可序列化的类的writeObject内部调用的。</p><p>java中的java.util.Date类,它提供了自己的readObject和writeObject方法,将日期写出为从纪元(UTC时间1970年1月1日0点)开始的毫秒数。Date类有一个复杂的内部表示,为了优化查询,它存储了一个Calendar对象和一个毫秒计数值。</p><p>Calendar对象是冗余的,因此不需要重复存储。</p><p>readObject和writeObject方法只需要加载和保存数据域,而不关心超类和其他类的信息。</p><h4 id="类定义自己的机制来保存和加载对象" tabindex="-1">类定义自己的机制来保存和加载对象 <a class="header-anchor" href="#类定义自己的机制来保存和加载对象" aria-label="Permalink to &quot;类定义自己的机制来保存和加载对象&quot;">​</a></h4><p>这个类必须实现Externalizable接口,这需要它定义两个方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readExternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectInputStream in) throws IOException,ClassNotFoundException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeExternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectOutputStream out) throws IOException;</span></span></code></pre></div><p>与序列化机制不同的是,这些方法对包括<strong>超类数据</strong>在内的整个对象的保存和恢复负责(序列化机制在输出流在中仅仅只是记录该对象所属的类,想想访问超类的公字段super.rariseMoney)。</p><p>下面的代码是Employee类实现上述的两个方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> readExternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OjbectInput in) throws IOException,ClassNotFoundException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    hireDay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toEpochDay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> writeExternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObectOutput out) throws IOException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(salary);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeLong</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(hireDay.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toEpochDay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>readObject和writeObject方法是是私有的,并且只能被序列化机制调用。榆次不同的是,readExternal和writeExternal方法是公共的。特别的是,readExternal还潜在的允许修改现有对象的状态。</p><h3 id="序列化单例和类型安全的枚举" tabindex="-1">序列化单例和类型安全的枚举 <a class="header-anchor" href="#序列化单例和类型安全的枚举" aria-label="Permalink to &quot;序列化单例和类型安全的枚举&quot;">​</a></h3><p>在序列化和反序列化时,如果目标对象是<strong>唯一</strong>的,你必须加倍小心,这通常会在实现单例和类型安全的枚举时发生。</p><p>如果你使用Java语言的enum结构,那么你就不必担心序列化,它能够正常工作。</p><p>但是,有可能遗留的历史代码如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">poublic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HORIZONTAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VERTICAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>注意:构造器是私有的,所以不可能创建出其他对象(符合单例条件),特别的是,你可以使用==操作符来测试对象的等同性:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(orientation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Orientation.HORIZONTAL);</span></span></code></pre></div><p>当类型安全的枚举实现Serializable接口时,你必须牢记存在着一种重要的变化,此时,默认的序列化机制是不适用的。下面的是示例代码:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Orientation.HORIZONTAL;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> saved</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Orientation)in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>现在,下面的测试</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(saved</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Orientation.HORIZAONTAL)...</span></span></code></pre></div><p>将失败。<strong>即使构造器是私有的,序列化机制也可以创建一个全新的对象</strong>！</p><p>所以你必须使用一个称为readResolve的特殊序列化方法。如果定义了readResovle方法,在对象被序列化之后就会调用它。它必须返回一个对象,这个对象将作为readObject方法的返回值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readResolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()throws ObjectStreamException{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Orientation.HORZONTAL;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Oritentation.VERTICAL;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ObjectStreamException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h3><p>之前学习过,无论类发生了什么变化,它和SHA指纹也会发生对应的变化,而我们都知道对象输入流将拒绝读入具有不同指纹的对象。但是,<strong>类可以表明它对之前的早期版本兼容</strong>,要想这样做,就必须首先获得这个类的早期版本的指纹。</p><p>使用JDK中的单机程序serialver来获得类的指纹:</p><p>serialver Employee</p><p>将会打印出</p><p>Employee: static final long serialVersionUID=-18142398255173400645L;</p><p>这个类的较新版本都必须把serialVersionUID常量定义为与最新版本的指纹相同。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Serialbizable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> serialVersionUID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18142398255173400645L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>有了这个静态常量以后,就不用人工计算指纹。</p><pre><code>**一旦这个静态数据成员被置于某个类的内部,那么序列化系统就可以读入这个类的对象的不同版本**。

如果新版本的类的方法发生了变化,那么在读入时不会有任何影响,但是如果数据域发生了变化,那么可能会出现问题,对象输入流会尽可能将流对象转化为这个这个类的当前版本。

对象输入流会将这个类当前版本的数据域与被序列化的类的数据域进行比较(只考虑非瞬时和费静态的数据域)。如果这两部分数据域之间名字匹配而类型不匹配,对象输入流不会尝试将一种类型转换成另一种类型,因为两个对象不兼容;如果被序列化的对象具有在当前版本中所没有的数据域,那么**对象输入流会忽略这些额外的数据**;如果当前版本具有在被序列化的对象中所没有的数据域,那么这些新添加域将被设置成它们的默认值(如果对象则是null,数字为0,boolean值为false)。

这种处理安全吗？视情况而定。丢掉数据域看起来是无害的,因为接收者仍旧知道如何处理的所有数据,但是将数据域设置为null却有可能不是那么安全。
</code></pre><h3 id="为克隆使用序列化" tabindex="-1">为克隆使用序列化 <a class="header-anchor" href="#为克隆使用序列化" aria-label="Permalink to &quot;为克隆使用序列化&quot;">​</a></h3><pre><code>序列化机制提供了克隆的快捷方式,将对象序列化到输出流中,然后将其读回。这样产生的对象是&quot;深拷贝&quot;的对象。同时不必将对象序列化到文件中,而使用ByteArrayOutputStream将数据保存到字节数组中。
</code></pre><h2 id="操作文件" tabindex="-1">操作文件 <a class="header-anchor" href="#操作文件" aria-label="Permalink to &quot;操作文件&quot;">​</a></h2><pre><code>文件管理的内涵远比读写要广,Path和Files类封装了在用户机上处理文件系统所需的所有功能。例如,Files类可以用来移除或重命名文件,或者查询文件最后被修改的时间。
</code></pre><h3 id="path" tabindex="-1">Path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;Path&quot;">​</a></h3><p>Path(路径)表示的是一个<strong>目录名序列</strong>,其后还可以跟着一个文件名。路径中的第一个部件可以是<strong>根部件</strong>,例如/或C:,而允许访问的根部件取决于<strong>文件系统</strong>。以根部件开始的路径是<strong>绝对路径</strong>;否则,就是<strong>相对路径</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> absolute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;harry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> relative</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myprog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user.properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><strong>静态的Paths.get方法接受一个或多个字符串</strong>,并将它们用默认文件系统的路径分隔符连接起来。然后将其连接起来进行解析,如果表示的不是给定文件系统的合法路径,那么就抛出InvalidPathException异常。这个连接起来的结果就是一个Path对象。</p><p>get方法可以获取包含多个部件的单个字符串:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baseDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;base.dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//获取名为base.dir的属性的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> basePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(baseDir);</span></span></code></pre></div><p><strong>组合和解析路径</strong>是司空见惯的操作,调用p.resolve(q)将按照下列规则返回一个路径:</p><p>1.如果q是绝对路径,则结果就是q。</p><p>2.否则,根据文件系统的规则,将&quot;p后面跟着q&quot;作为结果。</p><p>想象一个场景,假设你的应用系统需要查找相对于给定基目录的工作目录(在当前目录下查找一个工作目录),其中基目录是从配置文件中读取的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workRelative</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">basePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(workRelative);</span></span></code></pre></div><p>resolve方法有一种快捷方式,它接受一个字符串而不是路径:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">basePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//字符串而不是对象</span></span></code></pre></div><p>还有个很方便的方法resolveSibling,他通过解析指定路径的父路径产生其兄弟路径。</p><p>例如,如果workPath=workPath.resolveSibling(&quot;temp&quot;);</p><p>将创建/opt/myapp./temp</p><p>relativize方法会调用p.relativize(r)将产生路径q,而对q进行解析的结果正是r。例如,以&quot;/home/harry&quot;为目标对&quot;/home/fred/input.txt&quot;进行相对化操作,会产生&quot;../fred/input.txt&quot;,其中我们假设..表示文件系统中的父目录(也就是说两个路径都是/home开头，所以可以使用../作为相对路径)。</p><h4 id="常用api-7" tabindex="-1">常用API <a class="header-anchor" href="#常用api-7" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-paths" tabindex="-1">java.nio.file.Paths <a class="header-anchor" href="#java-nio-file-paths" aria-label="Permalink to &quot;java.nio.file.Paths&quot;">​</a></h5><h6 id="static-path-ge-string-first-string-more" tabindex="-1">static Path ge(String first,String ..more) <a class="header-anchor" href="#static-path-ge-string-first-string-more" aria-label="Permalink to &quot;static Path ge(String first,String ..more)&quot;">​</a></h6><p>通过连接给定的字符串创建一个路径。</p><h5 id="java-nio-file-path" tabindex="-1">java.nio.file.Path <a class="header-anchor" href="#java-nio-file-path" aria-label="Permalink to &quot;java.nio.file.Path&quot;">​</a></h5><p>Path resolve(Path other)</p><h6 id="path-resovle-string-other" tabindex="-1">Path resovle(String other) <a class="header-anchor" href="#path-resovle-string-other" aria-label="Permalink to &quot;Path resovle(String other)&quot;">​</a></h6><p>如果other是绝对路径,那么就返回other;否则将通过链接this的父路径和other产生路径。</p><h6 id="path-relativize-path-other" tabindex="-1">Path relativize(Path other) <a class="header-anchor" href="#path-relativize-path-other" aria-label="Permalink to &quot;Path relativize(Path other)&quot;">​</a></h6><p>返回用this进行解析,相对于other的相对路径。</p><h6 id="path-normalize" tabindex="-1">Path normalize() <a class="header-anchor" href="#path-normalize" aria-label="Permalink to &quot;Path normalize()&quot;">​</a></h6><p>移除诸如.和..等冗余的路径元素。</p><h6 id="path-toabsolutepath" tabindex="-1">Path toAbsolutePath() <a class="header-anchor" href="#path-toabsolutepath" aria-label="Permalink to &quot;Path toAbsolutePath()&quot;">​</a></h6><p>返回与该路径等价的绝对路径。</p><h6 id="path-getparent" tabindex="-1">Path getParent() <a class="header-anchor" href="#path-getparent" aria-label="Permalink to &quot;Path getParent()&quot;">​</a></h6><p>返回父路径,或者在该路径没有父路径时,返回null。</p><h6 id="path-getfilename" tabindex="-1">Path getFileName() <a class="header-anchor" href="#path-getfilename" aria-label="Permalink to &quot;Path getFileName()&quot;">​</a></h6><p>返回该路径的最后一个部件,或者在该路径上没有任何部件时,返回null。</p><h6 id="path-getroot" tabindex="-1">Path getRoot() <a class="header-anchor" href="#path-getroot" aria-label="Permalink to &quot;Path getRoot()&quot;">​</a></h6><p>返回该路径的根部件,或者在该路径没有任何部件时,返回null。</p><h6 id="tofile" tabindex="-1">toFile() <a class="header-anchor" href="#tofile" aria-label="Permalink to &quot;toFile()&quot;">​</a></h6><p>从该路径中创建一个File对象。</p><h5 id="java-io-file" tabindex="-1">java.io.File <a class="header-anchor" href="#java-io-file" aria-label="Permalink to &quot;java.io.File&quot;">​</a></h5><h6 id="path-topath" tabindex="-1">Path toPath() <a class="header-anchor" href="#path-topath" aria-label="Permalink to &quot;Path toPath()&quot;">​</a></h6><p>从该文件中创建一个Path对象(利用文件的路径属性来完成创建)。</p><h3 id="读写文件" tabindex="-1">读写文件 <a class="header-anchor" href="#读写文件" aria-label="Permalink to &quot;读写文件&quot;">​</a></h3><p>利用下面的代码很容易读取文件的所有内容:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readAllBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span></code></pre></div><p>还可以利用下面的方法来读取文件内容:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>var content=Files.readString(path,charset);</span></span></code></pre></div><p>将文件当做行序列读入:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lines</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readAllBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,charset);</span></span></code></pre></div><p>相反,如果希望写出一个字符串到文件中,可以调用:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">writeString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,content.char);</span></span></code></pre></div><p>向指定文件追加内容:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(charset),StandardOpenOption.APPEND);</span></span></code></pre></div><p>将一个行的集合写出到文件中:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,lines,charset);</span></span></code></pre></div><p>虽然上面的代码很方便,还是推荐使用输入/输出流(因为更加专业)。</p><h4 id="常用api-8" tabindex="-1">常用API <a class="header-anchor" href="#常用api-8" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-files" tabindex="-1">java.nio.file.Files <a class="header-anchor" href="#java-nio-file-files" aria-label="Permalink to &quot;java.nio.file.Files&quot;">​</a></h5><h6 id="static-list-string-readalllines-path-path-charset-charset" tabindex="-1">static List&lt;String&gt; readAllLines(Path path,Charset charset) <a class="header-anchor" href="#static-list-string-readalllines-path-path-charset-charset" aria-label="Permalink to &quot;static List\\&lt;String&gt; readAllLines(Path path,Charset charset)&quot;">​</a></h6><p>读入文件的内容。</p><h6 id="staic-path-write-path-path-iterable-extends-charsequence-contents-openoption-options" tabindex="-1">staic Path write(Path path,Iterable&lt;? extends CharSequence&gt; contents,OpenOption options) <a class="header-anchor" href="#staic-path-write-path-path-iterable-extends-charsequence-contents-openoption-options" aria-label="Permalink to &quot;staic Path write(Path path,Iterable&lt;? extends CharSequence&gt; contents,OpenOption options)&quot;">​</a></h6><p>将给定内容写出到文件中,并返回path。</p><h6 id="static-bufferedwriter-newbufferedwriter-path-path-charset-charset-openoption-options" tabindex="-1">static BufferedWriter newBufferedWriter(Path path,Charset charset,OpenOption... options) <a class="header-anchor" href="#static-bufferedwriter-newbufferedwriter-path-path-charset-charset-openoption-options" aria-label="Permalink to &quot;static BufferedWriter newBufferedWriter(Path path,Charset charset,OpenOption... options)&quot;">​</a></h6><p>打开一个文件,用于读入或这写出。</p><h3 id="创建文件和目录" tabindex="-1">创建文件和目录 <a class="header-anchor" href="#创建文件和目录" aria-label="Permalink to &quot;创建文件和目录&quot;">​</a></h3><p><strong>创建新目录</strong>可以调用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span></code></pre></div><p>其中的路径除了最后一部分,其他部分必须是已经存在的。</p><p>要创建中间目录可以调用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Files.createDirectories(path);</span></span></code></pre></div><p>如果需要创建一个空文件:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Fiels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">creatFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span></code></pre></div><p>如果文件已经存在,那么这个调用就会抛出异常。检查文件是否存在和创建文件是<strong>原子性</strong>的。如果文件不存在,那么该文件就会被创建,并且其<strong>他程序在此过程中是无法执行文件创建操作的</strong>。</p><p>有些便捷方法在给定位置湖泽系统指定的位置创建临时文件或者临时目录。</p><p>其中,dir是一个Path对象,prefix和suffix是可以为null的字符串。</p><p>在创建文件或者目录时,可以指定属性例如文件的拥有者和权限。</p><h4 id="常用api-9" tabindex="-1">常用API <a class="header-anchor" href="#常用api-9" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-files-1" tabindex="-1">java.nio.file.Files <a class="header-anchor" href="#java-nio-file-files-1" aria-label="Permalink to &quot;java.nio.file.Files&quot;">​</a></h5><h6 id="static-path-createdirectories-path-path-fileatrribute-attrs" tabindex="-1">static Path createDirectories(Path path,FileAtrribute&lt;?&gt;...attrs) <a class="header-anchor" href="#static-path-createdirectories-path-path-fileatrribute-attrs" aria-label="Permalink to &quot;static Path createDirectories(Path path,FileAtrribute&lt;?&gt;...attrs)&quot;">​</a></h6><p>创建一个文件或者目录,createDirectories方法还会创建路径中所有的中间</p><p>目录。</p><h3 id="复制、移动和删除文件" tabindex="-1">复制、移动和删除文件 <a class="header-anchor" href="#复制、移动和删除文件" aria-label="Permalink to &quot;复制、移动和删除文件&quot;">​</a></h3><p>将文件复制到另一个位置</p><p>Files.copy(fromPath,toPath);</p><p>移动文件(即复制并删除原文件)</p><p>Files.move(fromPath,toPath);</p><p>如果目标路径已经存在,那么复制或移动会失败。但是可以对目标路径进行覆盖,使用<strong>REPLACE_EXISTING选项</strong>。如果想要复制所有的文件属性,可以使用<strong>COPY_ATTRIBUTES选项</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fromPath,toPath,StanddardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTESE);</span></span></code></pre></div><p>你可以将移动操作定义为原子性(要成功都成功)的,这样就<strong>保证要么移动操作完成,要么源文件继续保持在原来位置</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fromPath,toPath,StandardCopyOption.AIOMIC_MOVE);</span></span></code></pre></div><p>还可以将一个输出流复制到Path中,这表示想要将输入流存储到硬盘上。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(inputStream,toPath);</span></span></code></pre></div><p>删除文件:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span></code></pre></div><p>用于文件操作的标准选项可以看书上的表格,非常的详细。</p><h4 id="常用api-10" tabindex="-1">常用API <a class="header-anchor" href="#常用api-10" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-files-2" tabindex="-1">java.nio.file.Files <a class="header-anchor" href="#java-nio-file-files-2" aria-label="Permalink to &quot;java.nio.file.Files&quot;">​</a></h5><h6 id="static-path-move-path-from-path-to-copyoption-options" tabindex="-1">static Path move(Path from,Path to,CopyOption...options) <a class="header-anchor" href="#static-path-move-path-from-path-to-copyoption-options" aria-label="Permalink to &quot;static Path move(Path from,Path to,CopyOption...options)&quot;">​</a></h6><h6 id="static-long-copy-path-from-outputstream-to-copyoption-options" tabindex="-1">static long copy(Path from,OutputStream to,CopyOption ...options) <a class="header-anchor" href="#static-long-copy-path-from-outputstream-to-copyoption-options" aria-label="Permalink to &quot;static long copy(Path from,OutputStream to,CopyOption ...options)&quot;">​</a></h6><p>从文件复制到输入流中,返回复的字节数。</p><p>static void delete(Path path)</p><h6 id="static-boolean-deleteifexists-path-path" tabindex="-1">static boolean deleteIfExists(Path path) <a class="header-anchor" href="#static-boolean-deleteifexists-path-path" aria-label="Permalink to &quot;static boolean deleteIfExists(Path path)&quot;">​</a></h6><p>删除给定文件或空目录。第一个方法在文件或目录不存在的情况下抛出异常,而第二种方法会在情况下返回false。</p><h3 id="获取文件信息" tabindex="-1">获取文件信息 <a class="header-anchor" href="#获取文件信息" aria-label="Permalink to &quot;获取文件信息&quot;">​</a></h3><p>下面的静态方法都将返回一个boolean值,表示<strong>检查路径的某个属性</strong>的结果:</p><p>1.exists</p><p>2.isHidden</p><p>3.isReadable,isWriteable,isExecutable</p><p>4.isRegularFile,isDirectory,isSymbolicLink</p><p>size方法将返回文件的字节数:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fileSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span></code></pre></div><p>getOwner方法将<strong>文件的拥有者</strong>作为java.nio.file.attribute.UserPrincipal的一个实例返回。</p><p>所有的文件系统都会报告一个基本属性集,它们被封装在<strong>BasicFileAttributes</strong>接口中,这些属性与上述信息有部分重叠。基本文件属性包括:</p><p>1.创建文件、最后一次访问以及是最后一次修改文件的<strong>时间</strong>,这些时间都表示成java.nio.file.attribute.FileTime。</p><p>2.文件是常规文件、目录还是符号链接,还是三者都不是。</p><p>3.文件尺寸。</p><p>4.文件主键,这是某种类的对象,具体所属类与文件系统相关,有可能是文件的唯一标识符,也可能不是。</p><p>要获取这些属性,可以调用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BasicFileAtrributes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> attributes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,BasicFileAttributes.class);</span></span></code></pre></div><h4 id="常用api-11" tabindex="-1">常用API <a class="header-anchor" href="#常用api-11" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-files-3" tabindex="-1">java.nio.file.Files <a class="header-anchor" href="#java-nio-file-files-3" aria-label="Permalink to &quot;java.nio.file.Files&quot;">​</a></h5><h6 id="static-boolean-issymboliclink-path-path" tabindex="-1">static boolean isSymbolicLink(Path path) <a class="header-anchor" href="#static-boolean-issymboliclink-path-path" aria-label="Permalink to &quot;static boolean isSymbolicLink(Path path)&quot;">​</a></h6><p>检查由路径指定的文件的给定属性。</p><p>####### static long size(Path path)</p><p>获取文件按字节数度量的尺寸。</p><h6 id="a-readattributes-path-path-class-a-type-linkoption-options" tabindex="-1">A readAttributes(Path path,Class&lt;A&gt; type,LinkOption...options) <a class="header-anchor" href="#a-readattributes-path-path-class-a-type-linkoption-options" aria-label="Permalink to &quot;A readAttributes(Path path,Class\\&lt;A&gt; type,LinkOption...options)&quot;">​</a></h6><p>读取类型为A的文件属性。</p><h5 id="java-nio-file-attribute-basicfileattributes" tabindex="-1">java.nio.file.attribute.BasicFileAttributes <a class="header-anchor" href="#java-nio-file-attribute-basicfileattributes" aria-label="Permalink to &quot;java.nio.file.attribute.BasicFileAttributes&quot;">​</a></h5><p>FileTime creationTime()</p><p>boolean isRegularFile()</p><p>boolean isDiretory()</p><p>boolean isSymbolicLink()</p><p>long size()</p><p>Object fileKey()</p><p>获取所请求的属性</p><h3 id="访问目录中的项" tabindex="-1">访问目录中的项 <a class="header-anchor" href="#访问目录中的项" aria-label="Permalink to &quot;访问目录中的项&quot;">​</a></h3><p><strong>静态的Files.list</strong>方法会返回一个可以读取目录中各个项的<strong>Stream&lt;Path&gt;对象</strong>。目录是被惰性(使用时才会进行调用或某些操作)读取的,这使得处理具有大量项目的目录可以变得更加高效。</p><p>读取目录涉及需要关闭的系统资源,所以应该使用try块:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pathToDirectory)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>list方法不会进入子目录。为了处理目录中的所有子目录,需要使用File.walk方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pathRoot)){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //Contains all descendants,visited in depth-first order;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以通过调用Files.walk(pathToRoot,depth)来限制想要访问的树的深度。</p><p><strong>两种walk方法都有可变长的参数FileVisitOption...,但是你只能提供一种选项-FOLLOW_LINKS,即跟踪符号链接</strong>。</p><h3 id="使用目录流" tabindex="-1">使用目录流 <a class="header-anchor" href="#使用目录流" aria-label="Permalink to &quot;使用目录流&quot;">​</a></h3><p>上面我们学习了使用Files.walk方法会产生一个可以遍历目录中所有子孙的Stream&lt;Path&gt;对象。有时,需要对遍历过程进行更加细粒度的控制。在这种情况下,应该使用Files.newDirectoryStream对象,它会产生一个DirectoryStream。它不是java.util.stream.Stream的子接口,而是专门用于目录遍历的接口。它是Iterable的子接口,因此可以在增强的for循环中使用目录流。示例如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(DirectoryStream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newDirectoryStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dir)){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">entries){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Process</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entries;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以使用glob模式来过滤文件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(DirectoryStream\\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newDirectoryStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dir,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;*.java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p>书上有global模式的参数</p><p>例如,</p><p>模式 ** 就代表匹配跨目录的0个或多个字符 **.java匹配在所有子目录中的Java文件。</p><p>如果想要访问某个目录下的所有子孙成员(我的理解是上面的知识讲的都是关于目录下的子目录,而这里我们访问的是所有子孙成员),需要调用walkTree方法并向其传递一个FileVisitor对象,这个对象会得到下列通知:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">walkTree</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SimpleFileVisitor&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitorResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">preVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,BasicFileAttrbitues </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//在每一个文件处理之前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.CONTINUE;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//继续访问下一个文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">postVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">exc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//在每一个文件处理之后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.CONTINUE; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//继续访问下一个文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">visitFileFailed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//访问失败</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.SKIP_SUBTREE; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//继续访问但是不再访问这个文件的兄弟文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>注意:我们需要覆盖postVisitDirectory方法和visitFileFailed方法,否则,访问会在遇到不允许打开的目录或不允许访问的文件时立即失败。</p><p>如果你需要在进入后离开一个目录时执行某些操作,那么FileVisitor接口的方法就显得非常有用了。例如,在删除目录树时,需要在移除当前目录的所有文件之后,才能移除该目录。下面是<strong>删除目录树的完整代码</strong>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">walkTree</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(root,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SimpleFileVisitor&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,BasicFileAttributes </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        //遇到一个文件或者一个目录时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//删除掉当前目录或文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">postVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException{</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//处理完文件之后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            throws e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dir);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//删除当前目录???</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h4 id="常用api-12" tabindex="-1">常用API <a class="header-anchor" href="#常用api-12" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-files-4" tabindex="-1">java.nio.file.Files <a class="header-anchor" href="#java-nio-file-files-4" aria-label="Permalink to &quot;java.nio.file.Files&quot;">​</a></h5><h6 id="static-directorystream-path-newdirectorystream-path-path-string-glob" tabindex="-1">static DirectoryStream&lt;Path&gt; newDirectoryStream(Path path,String glob) <a class="header-anchor" href="#static-directorystream-path-newdirectorystream-path-path-string-glob" aria-label="Permalink to &quot;static DirectoryStream\\&lt;Path&gt; newDirectoryStream(Path path,String glob)&quot;">​</a></h6><p>获取给定目录中可以遍历所有文件和目录的迭代器。glob模式筛选匹配的项。</p><h6 id="static-path-walkfiletree-path-start-filevisitor-super-path-visiotr" tabindex="-1">static Path walkFileTree(Path start,FileVisitor&lt;? super Path&gt; visiotr) <a class="header-anchor" href="#static-path-walkfiletree-path-start-filevisitor-super-path-visiotr" aria-label="Permalink to &quot;static Path walkFileTree(Path start,FileVisitor&lt;? super Path&gt; visiotr)&quot;">​</a></h6><p>遍历给定路径上的所有子孙,并将访问器应用于这些子孙之上。</p><h5 id="java-nio-simplefilevisitor-t" tabindex="-1">java.nio.SimpleFIleVisitor&lt;T&gt; <a class="header-anchor" href="#java-nio-simplefilevisitor-t" aria-label="Permalink to &quot;java.nio.SimpleFIleVisitor\\&lt;T&gt;&quot;">​</a></h5><h6 id="static-filevisitresult-visitfile-t-path-basicfileattributes-attrs" tabindex="-1">static FileVisitResult visitFile(T path,BasicFileAttributes attrs) <a class="header-anchor" href="#static-filevisitresult-visitfile-t-path-basicfileattributes-attrs" aria-label="Permalink to &quot;static FileVisitResult visitFile(T path,BasicFileAttributes attrs)&quot;">​</a></h6><p>在访问文件或目录时被调用,返回CONTINUE、SKIP_SUBTREE、SKIP_SIBLINGS和TERMINATE之一,默认实现是不做任何操作而继续访问。</p><p>##　Zip文件系统</p><p>Paths类会在默认的文件系统中查找路径,即在用户本地磁盘中的文件。你也可以有别的文件系统,其中最有用的之一就是ZIP文件系统。如果zipname是某个ZIP文件的名字,那么下面的调用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileSystems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(zipname),</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><strong>将建立一个文件系统,它包含ZIP文档中的所有文件</strong>。如果知道文件名,那么从ZIP文档中复制出这个文件就会变得很容易:</p><p>Files.copy(fs.getPath(sourceName),targetPath);</p><p>其中fs.getPath与Paths.get方法类似。</p><p>要列出ZIP文档的所有文件,可以遍历文件树:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileSystems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(zipname),</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">walkTree</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SimpleFileVisitor&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Path </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,BasicFileAttributes </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   });</span></span></code></pre></div><h4 id="常用api-13" tabindex="-1">常用API <a class="header-anchor" href="#常用api-13" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-file-filesystems" tabindex="-1">java.nio.file.FileSystems <a class="header-anchor" href="#java-nio-file-filesystems" aria-label="Permalink to &quot;java.nio.file.FileSystems&quot;">​</a></h5><p>对所安装到的文件系统提供者进行迭代,并且如果loader不为null,那么就还会迭代给定的类加载器能够加载加载的文件系统,返回由第一个可以接受给定路径的文件系统提供者创建的文件系统。</p><h2 id="内存映射文件" tabindex="-1">内存映射文件 <a class="header-anchor" href="#内存映射文件" aria-label="Permalink to &quot;内存映射文件&quot;">​</a></h2><p>大多数操作系统都可以利用<strong>虚拟内存</strong> 实现来将<strong>一个文件或者文件的一部分</strong>&quot;映射&quot;到内存中。然后,<strong>这个文件就可以被当做内存数组一样地访问</strong>,这比传统的文件操作还要快的多。</p><h3 id="内存映射文件的性能" tabindex="-1">内存映射文件的性能 <a class="header-anchor" href="#内存映射文件的性能" aria-label="Permalink to &quot;内存映射文件的性能&quot;">​</a></h3><p>书上的例子比较了JDK下的jre/lib目录中的37MB的rt.jar文件用不同的方式来计算校验和。 在特定的机器上,内存映射比使用带缓冲的顺序输入还要稍微快一点,但是比使用RandomAccessFile快很多。</p><p>首先,<strong>从文件中获得一个通道(channel),通道是专门用于磁盘文件的一种抽象</strong>,它使我们可以访问诸如<strong>内存映射、文件加锁机制以及文件间快速数据传递等操作系统</strong>的特性。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,options);</span></span></code></pre></div><p>然后,通过调用FileChannel类的<strong>map</strong>方法从这个通道中获得一个<strong>ByteBuffer</strong>。你可以指定想要的<strong>映射的文件区域与映射模式</strong>,支持的模式有三种: 1.FileChannel.MapMode.READ_ONLY:所产生的缓冲区是只读的,任何对该缓冲区写入的尝试都会导致ReadOnlyBufferException异常。 2.FileChannel.MapMode.READ_WRITE:所产生的缓冲区是可写的,任何修改都会在某个时刻写会到文件中。 注意:其他映射同一个文件的程序<strong>可能不能立即看到这些修改</strong>,多个程序同时进行文件映射的确切行为是依赖于操作系统的。 3.FileChannel.MapMode.PRIVATE:所产生的缓冲区是可写的,但是任何修改对这个缓冲来说是私有的,不会传播到文件中。 一旦有了ByteBuffer,就可以用它和它的超类的方法来读写数据了。 缓冲区支持顺序和随机数据访问，它有一个可以通过get和put操作来移动的<strong>位置</strong>(RandomAccessFile类的文件指针)。例如,下面的方法顺序遍历缓冲区素有字节</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasRemaing</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">buffe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>或者,像下面一样进行随机访问</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以用下面的方法来读写字节数组</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] bytes);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> offset,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> length);</span></span></code></pre></div><p>和之前学习的DataInputStream一样,ByteBuffer同样也有许多用于读取二子节格式的基本类型的方法。</p><p>向缓冲区写入也是一样的。</p><h4 id="常用api-14" tabindex="-1">常用API <a class="header-anchor" href="#常用api-14" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-io-fileinputstream-1" tabindex="-1">java.io.FileInputStream <a class="header-anchor" href="#java-io-fileinputstream-1" aria-label="Permalink to &quot;java.io.FileInputStream&quot;">​</a></h5><h6 id="filechannel-getchannel" tabindex="-1">FileChannel getChannel() <a class="header-anchor" href="#filechannel-getchannel" aria-label="Permalink to &quot;FileChannel getChannel()&quot;">​</a></h6><p>返回用于访问这个输入流的通道。</p><h5 id="java-io-fileoutputstream-1" tabindex="-1">java.io.FileOutputStream <a class="header-anchor" href="#java-io-fileoutputstream-1" aria-label="Permalink to &quot;java.io.FileOutputStream&quot;">​</a></h5><h6 id="filechannel-getchannel-1" tabindex="-1">FileChannel getChannel() <a class="header-anchor" href="#filechannel-getchannel-1" aria-label="Permalink to &quot;FileChannel getChannel()&quot;">​</a></h6><p>返回用于访问这个输出流的通道。</p><h5 id="java-io-randomaccessfile" tabindex="-1">java.io.RandomAccessFile <a class="header-anchor" href="#java-io-randomaccessfile" aria-label="Permalink to &quot;java.io.RandomAccessFile&quot;">​</a></h5><h6 id="filechannel-getchannel-2" tabindex="-1">FileChannel getChannel() <a class="header-anchor" href="#filechannel-getchannel-2" aria-label="Permalink to &quot;FileChannel getChannel()&quot;">​</a></h6><p>返回用于访问这个文件的通道。</p><h5 id="java-nio-channels-filechannel" tabindex="-1">java.nio.channels.FileChannel <a class="header-anchor" href="#java-nio-channels-filechannel" aria-label="Permalink to &quot;java.nio.channels.FileChannel&quot;">​</a></h5><h6 id="staic-filechannel-open-path-path-openoption-options" tabindex="-1">staic FileChannel open(Path path,OpenOption...options) <a class="header-anchor" href="#staic-filechannel-open-path-path-openoption-options" aria-label="Permalink to &quot;staic FileChannel open(Path path,OpenOption...options)&quot;">​</a></h6><p>打开指定路径的文件通道,默认情况下,通道打开时用于读入。参数options是Standard-OpenOption枚举中的WRITE、APPEND、TRUNCATE_EXISING、GREATE值。</p><h6 id="mappedbytebuffer-filechannel-mapmode-mode-long-position-long-size" tabindex="-1">MappedByteBuffer(FileChannel.MapMode mode,long position,long size) <a class="header-anchor" href="#mappedbytebuffer-filechannel-mapmode-mode-long-position-long-size" aria-label="Permalink to &quot;MappedByteBuffer(FileChannel.MapMode mode,long position,long size)&quot;">​</a></h6><p>将文件的一个区域映射到内存中。参数mode是FileChannel.MapMode类中的常量READ_ONLY、READ_WRITE或PRIVATE之一。</p><h5 id="java-io-buffer" tabindex="-1">java.io.Buffer <a class="header-anchor" href="#java-io-buffer" aria-label="Permalink to &quot;java.io.Buffer&quot;">​</a></h5><h5 id="boolean-hasremaing" tabindex="-1">boolean hasRemaing() <a class="header-anchor" href="#boolean-hasremaing" aria-label="Permalink to &quot;boolean hasRemaing()&quot;">​</a></h5><p>如果当前的缓冲区位置没有达到这个缓冲区的界限位置,则返回true。</p><h6 id="int-limit" tabindex="-1">int limit() <a class="header-anchor" href="#int-limit" aria-label="Permalink to &quot;int limit()&quot;">​</a></h6><p>返回这个缓冲区的界限位置,即没有任何值可用的第一个位置。</p><h5 id="java-io-bytebuffer" tabindex="-1">java.io.ByteBuffer <a class="header-anchor" href="#java-io-bytebuffer" aria-label="Permalink to &quot;java.io.ByteBuffer&quot;">​</a></h5><h6 id="byte-get" tabindex="-1">byte get() <a class="header-anchor" href="#byte-get" aria-label="Permalink to &quot;byte get()&quot;">​</a></h6><p>从当前位置获得一个字节,并将当前位置移动到下一个字节。</p><h6 id="byte-get-int-index" tabindex="-1">byte get(int index) <a class="header-anchor" href="#byte-get-int-index" aria-label="Permalink to &quot;byte get(int index)&quot;">​</a></h6><p>从指定索引处获得一个字节。</p><h6 id="bytebuffer-put-byte-b" tabindex="-1">ByteBuffer put(byte b) <a class="header-anchor" href="#bytebuffer-put-byte-b" aria-label="Permalink to &quot;ByteBuffer put(byte b)&quot;">​</a></h6><p>向缓冲区写入一个字节,并返回缓冲区的引用。</p><h6 id="bytebuffer-put-int-index-byte-b" tabindex="-1">ByteBuffer put(int index,byte b) <a class="header-anchor" href="#bytebuffer-put-int-index-byte-b" aria-label="Permalink to &quot;ByteBuffer put(int index,byte b)&quot;">​</a></h6><p>向指定索引处推入一个字节。返回对这个缓冲区的引用。</p><h6 id="bytebuffer-get-byte-destination-int-offset-int-length" tabindex="-1">ByteBuffer get(byte[] destination,int offset,int length) <a class="header-anchor" href="#bytebuffer-get-byte-destination-int-offset-int-length" aria-label="Permalink to &quot;ByteBuffer get(byte[] destination,int offset,int length)&quot;">​</a></h6><p>用缓冲区中的字节来填充字节数组,或者字节数组的某个区域,并将当前位置向前移动数个位置。</p><p>ByteBuffer put(byte[] source)</p><h6 id="bybuffer-put-byte-source-int-offset-int-length" tabindex="-1">ByBuffer put(byte[] source,int offset,int length) <a class="header-anchor" href="#bybuffer-put-byte-source-int-offset-int-length" aria-label="Permalink to &quot;ByBuffer put(byte[] source,int offset,int length)&quot;">​</a></h6><p>将字节数组中的所有字节或者给定区域的字节都推入缓冲区中,并将当前位置向前移动写出的字节数个位置。</p><p>Xxx getXXX(int index)</p><h6 id="bytebuffer-putxxx-int-index-xxx-value" tabindex="-1">ByteBuffer putXXX(int index,Xxx value) <a class="header-anchor" href="#bytebuffer-putxxx-int-index-xxx-value" aria-label="Permalink to &quot;ByteBuffer putXXX(int index,Xxx value)&quot;">​</a></h6><p>获得或放置一个二进制数。Xxx是Int、Long、Short、Char、Float或Double中的而一个。</p><h6 id="byteorder-order" tabindex="-1">ByteOrder order() <a class="header-anchor" href="#byteorder-order" aria-label="Permalink to &quot;ByteOrder order()&quot;">​</a></h6><p>设置或获得字节顺序,order的值是ByteOrder类的常量BIG_ENDIAN或LITTTLE_ENDIAN中的一个。</p><h6 id="static-bytebuffer-allocate-int-capacity" tabindex="-1">static ByteBuffer allocate(int capacity) <a class="header-anchor" href="#static-bytebuffer-allocate-int-capacity" aria-label="Permalink to &quot;static ByteBuffer allocate(int capacity)&quot;">​</a></h6><p>构建具有给定容量的缓冲区。</p><h6 id="static-bytebuffer-wrap-byte-values" tabindex="-1">static ByteBuffer wrap(byte[] values) <a class="header-anchor" href="#static-bytebuffer-wrap-byte-values" aria-label="Permalink to &quot;static ByteBuffer wrap(byte[] values)&quot;">​</a></h6><p>构建具有指定容量的缓冲区,该缓冲区是对给定数组的包装。</p><p>#####　CharBuffer asCharBuffer()</p><p>构建字符缓冲区,它是对这个缓冲区的包装。对该字符缓冲区的变更将在这个缓冲区中反映出来,但<strong>该字符缓冲区有自己的位置、界限和标记</strong>。</p><h5 id="java-nio-charbuffer" tabindex="-1">java.nio.CharBuffer <a class="header-anchor" href="#java-nio-charbuffer" aria-label="Permalink to &quot;java.nio.CharBuffer&quot;">​</a></h5><h6 id="charbuffer-get-char-destination-int-offsets-int-length" tabindex="-1">CharBuffer get(char[] destination,int offsets,int length) <a class="header-anchor" href="#charbuffer-get-char-destination-int-offsets-int-length" aria-label="Permalink to &quot;CharBuffer get(char[] destination,int offsets,int length)&quot;">​</a></h6><p>从这个缓冲区的当前位置开始,获取一个char值,或者一个范围内的所有char值,然后将位置向前移动以越过所有读入字符。最后两个方法返回this。</p><h6 id="charbuffer-put-charbuffer-source" tabindex="-1">CharBuffer put(CharBuffer source) <a class="header-anchor" href="#charbuffer-put-charbuffer-source" aria-label="Permalink to &quot;CharBuffer put(CharBuffer source)&quot;">​</a></h6><p>从这个缓冲区的当前位置开始,放置一个char值,或者一个范围内的所有char值,然后将位置向前移动越过所有被写出的字符。当放置的值是从CharBuffer读入时,将读入所有剩余字符。所有的方法返回this。</p><h3 id="缓冲区的数据结构" tabindex="-1">缓冲区的数据结构 <a class="header-anchor" href="#缓冲区的数据结构" aria-label="Permalink to &quot;缓冲区的数据结构&quot;">​</a></h3><p>在使用内存映射时,我们创建了一个缓冲区来横跨感兴趣的文件区域。我们可以使用更多的缓冲区来读写大小适度的信息快。</p><p><strong>缓冲区是由具有相同类型的数值构成的数组</strong>,Buffer类是一个抽象类,它有众多的具体子类,包括ByteBuffer、CharBuffer、DoubleBuffer、IntBuffer、LongBuffer和ShortBuffer。</p><p>在实践中,最常用的是ByteBuffer和CharBuffer。每个缓冲区都具有:</p><p>1.一个容量,它永远不能改变。 2.一个读写位置,下一个值将在此进行读写。 3.一个界限(之其说过,它是第一个不可用位置,至于在容量之中为什么不可用我也很疑惑),超过它进行读写是没有意义的。 4.一个可选的标记,用于重复读入或写出操作。 这些值满足下面的条件: <strong>0&lt;=标记&lt;=读写位置&lt;=界限&lt;=容量</strong></p><p><img src="https://gitee.com/aryangzhu/picture/raw/master/java/%E4%B8%80%E4%B8%AA%E7%BC%93%E5%86%B2%E5%8C%BA.jpg" alt=""></p><p>使用缓冲区的主要目的就是&quot;写,然后读入&quot;循环。假设我们有一个缓冲区,在一开始,它的位置为0,界限等于容量。我们不断地调用put将值添加到这个缓冲区中,等到写入完所有的数据或者使用完缓冲区的容量之后,切换到读入操作。</p><p>这时调用<strong>flip</strong>方法将界限设置到当前<strong>位置</strong>(当前的读写位置),并把位置复位为0。现在在remaing方法返回正数时(它返回的是界限-位置),不断地调用get。当缓冲区的所有值都读完之后,调用clear使缓冲区为下一次循环做好准备。clear方法将位置复位到0,并将界限复位到容量。</p><p>想要<strong>重读缓冲区</strong>,可以使用rewind或mark/reset方法。</p><p>要<strong>获取缓冲区</strong>,可以调用诸如ByteBuffer.allocate或ByteBuffer.wrap这样的静态方法。</p><p>然后,可以用来自<strong>某个通道的数据填充缓冲区</strong>,或者将缓冲区的内容写出到通道中。例如:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ByteBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(RECORD_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newpos);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(buffer);</span></span></code></pre></div><h4 id="常用api-15" tabindex="-1">常用API <a class="header-anchor" href="#常用api-15" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-buffer" tabindex="-1">java.nio.Buffer <a class="header-anchor" href="#java-nio-buffer" aria-label="Permalink to &quot;java.nio.Buffer&quot;">​</a></h5><h6 id="buffer-clear" tabindex="-1">Buffer clear() <a class="header-anchor" href="#buffer-clear" aria-label="Permalink to &quot;Buffer clear()&quot;">​</a></h6><p>通过将位置复位到0,并将界限设置到容量,使这个缓冲区做好写准备。返回this。</p><h6 id="buffer-filp" tabindex="-1">Buffer filp() <a class="header-anchor" href="#buffer-filp" aria-label="Permalink to &quot;Buffer filp()&quot;">​</a></h6><p>通过将界限设置到位置,并将位置复位到0,使这个缓冲区为读入做好准备。返回this。</p><h6 id="buffer-rewind" tabindex="-1">Buffer rewind() <a class="header-anchor" href="#buffer-rewind" aria-label="Permalink to &quot;Buffer rewind()&quot;">​</a></h6><p>通过将读写位置复位到0,并保持界限不变,使这个缓冲区为重新读入相同的值做准备。</p><h6 id="buffer-mark" tabindex="-1">Buffer mark() <a class="header-anchor" href="#buffer-mark" aria-label="Permalink to &quot;Buffer mark()&quot;">​</a></h6><p>将这个缓冲区的标记(之前有专门提过)设置到读写位置,返回this。</p><h6 id="buffer-reset" tabindex="-1">Buffer reset() <a class="header-anchor" href="#buffer-reset" aria-label="Permalink to &quot;Buffer reset()&quot;">​</a></h6><p>将这个缓冲区的位置设置到标记,从而允许被标记的部分再次被读入或写出,返回this。</p><h6 id="int-remaing" tabindex="-1">int remaing() <a class="header-anchor" href="#int-remaing" aria-label="Permalink to &quot;int remaing()&quot;">​</a></h6><p>返回剩余可读入或写出的值的数量,即<strong>界限</strong>与<strong>位置</strong>之间的差异。</p><p>int position()</p><h6 id="void-position-int-newvalue" tabindex="-1">void position(int newValue) <a class="header-anchor" href="#void-position-int-newvalue" aria-label="Permalink to &quot;void position(int newValue)&quot;">​</a></h6><p>返回这个缓冲区的位置。</p><h6 id="int-capacity" tabindex="-1">int capacity() <a class="header-anchor" href="#int-capacity" aria-label="Permalink to &quot;int capacity()&quot;">​</a></h6><p>返回这个缓冲区的容量。</p><h2 id="文件加锁机制" tabindex="-1">文件加锁机制 <a class="header-anchor" href="#文件加锁机制" aria-label="Permalink to &quot;文件加锁机制&quot;">​</a></h2><p>现实中的场景:<strong>多个同时执行的程序需要修改同一个文件</strong>的情形,很明显,<strong>这些程序需要以某种方式进行通信,不然这个文件很容易被损坏(由此引出了进程间的通信)</strong>。文件锁可以解决这个问题,它可以<strong>控制对文件或文件中某个范围的字节的访问</strong>。 假设你的应用程序将用户的偏好存储在一个配置文件中,当用户调用这个应用的两个实例时,这两个实例就有可能会同时希望写配置文件。在这种情况下,第一个实例应该锁定文件,当第二个实例发现文件被锁定时,<strong>它必须决策是等待直至文件解锁,还是直接跳过这个写操作过程</strong>。</p><pre><code>要锁定一个文件,可以调用FileChannel类的lock或tryLock方法:
</code></pre><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>或者</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">tryLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><pre><code>第一个调用会阻塞直至可获得锁,而第二个调用将立即返回,要么返回锁,要么在锁不可获得的情况下返回null。这个将保持**锁定状态**,直至通道关闭,或者在锁上调用了release方法。

你还可以通过下面的调用锁定文件文件的一部分:
</code></pre><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileLock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> shared)</span></span></code></pre></div><p>或者</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileLock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">trylock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> shared)</span></span></code></pre></div><pre><code>如果shared标志为false,则锁定文件的目的是读写;而如果为true,则这是一个**共享锁**,允许**多个进程从文件中读入**,并**阻止任何进程获得独占的锁**。并非所有的操作系统都支持共享锁,有的可能请求共享锁的时候得到独占的锁。**调用FileLock类isShared方法可以查询所持有的锁的类型**。

要确保在操作完成时释放锁,最好在一个带资源的try语句中执行释放锁:
</code></pre><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FileLock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    access the locked file or segment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>注意:<strong>文件加锁机制是依赖于操作系统的,下面需要注意的几点</strong>:</p><p>1.某些系统中,文件加锁仅仅是<strong>建议性</strong>的,如果一个应用未能得到锁,它仍旧可以向<strong>被另一个应用并发锁定的文件的写操作</strong>。</p><p>2.在某些系统中,<strong>不能在锁定一个文件的同时将其映射在内存中</strong>。</p><p>3.文件锁是整个Java虚拟机持有的。如果两个程序是由同一个虚拟启动的(例如,Applet和应用程序启动器),那么它们不可能每一个都获得同一个文件上的锁。当调用lock和tryLock方法时,如果虚拟机已经在同一个文件上持有了另一个重叠的锁,那么就会抛出<strong>OverlappingFileLockException</strong>。</p><p>4.在一些系统中,<strong>关闭一个通道会释放由Java虚拟机持有的底层文件上的所有锁</strong>。<strong>因此,在同一个锁定文件上应避免使用多个通道</strong>。</p><p>5.在网络文件系统上锁定文件是<strong>高度依赖于系统</strong>的,因此应该尽量避免。</p><h4 id="常用api-16" tabindex="-1">常用API <a class="header-anchor" href="#常用api-16" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-nio-channels-filechannel-1" tabindex="-1">java.nio.channels.FileChannel <a class="header-anchor" href="#java-nio-channels-filechannel-1" aria-label="Permalink to &quot;java.nio.channels.FileChannel&quot;">​</a></h5><h6 id="filelock-lock" tabindex="-1">FileLock lock() <a class="header-anchor" href="#filelock-lock" aria-label="Permalink to &quot;FileLock lock()&quot;">​</a></h6><p>在整个文件上获得一个独占的锁,这个方法将阻塞至获得锁。</p><h6 id="filelock-trylock" tabindex="-1">FileLock tryLock() <a class="header-anchor" href="#filelock-trylock" aria-label="Permalink to &quot;FileLock tryLock()&quot;">​</a></h6><p>在整个文件上获得一个独占的锁,或者在无法获得锁的情况下返回null。</p><h6 id="filelock-trylock-long-position-long-size-boolean-shared" tabindex="-1">FileLock tryLock(long position,long size,boolean shared) <a class="header-anchor" href="#filelock-trylock-long-position-long-size-boolean-shared" aria-label="Permalink to &quot;FileLock tryLock(long position,long size,boolean shared)&quot;">​</a></h6><p>上面解释过</p><h5 id="java-nio-channels-filelock" tabindex="-1">java.nio.channels.FileLock <a class="header-anchor" href="#java-nio-channels-filelock" aria-label="Permalink to &quot;java.nio.channels.FileLock&quot;">​</a></h5><h6 id="void-close-3" tabindex="-1">void close() <a class="header-anchor" href="#void-close-3" aria-label="Permalink to &quot;void close()&quot;">​</a></h6><p>释放这个锁。</p><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><p>**正则表达式(regular expression)**用于指定字符串的模式,可以在任何需要定位匹配某种特定模式的字符串的情况下使用正则表达式。</p><h3 id="正则表达式语法" tabindex="-1">正则表达式语法 <a class="header-anchor" href="#正则表达式语法" aria-label="Permalink to &quot;正则表达式语法&quot;">​</a></h3><p>1.字符类(character class)是一个括在括号中的可选择的字符集,例如,[Jj]、[0-9]、[A-Za-z]或[^0-9]。<strong>这里&quot;-&quot;表示是一个范围(所有的Unicode值落在两个边界范围之内的字符)</strong>,而^表示补集(除了指定字符之外的所有字符)。</p><p>2.如果字符类包含&quot;-&quot;,那么它必须是第一项或最后一项;如果包含&quot;[&quot;,那么它必须是第一项;如果要包含&quot;^&quot;,那么它可以是除开始位置之外的任何位置。其中,你只需要转义&quot;[&quot;和&quot;\\&quot;。</p><h3 id="匹配字符串" tabindex="-1">匹配字符串 <a class="header-anchor" href="#匹配字符串" aria-label="Permalink to &quot;匹配字符串&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">complile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(patternString);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> matcher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) ...</span></span></code></pre></div><p>在编译这个模式时,可以设置一个或多个标志,例如:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">complile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(expression,Pattern.CASE_INSENSITIVE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern.UNICODE_CASE);</span></span></code></pre></div><h3 id="找出多个匹配" tabindex="-1">找出多个匹配 <a class="header-anchor" href="#找出多个匹配" aria-label="Permalink to &quot;找出多个匹配&quot;">​</a></h3><p>如果想要找出输入中一个或多个匹配的字符串。可以用Matcher类的find方法来查找匹配内容,如果返回true,再使用start和end方法来查找匹配的内容,或使用不带引元的group方法来获取匹配的字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">whiLe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>更加优雅的是调用results方法来获取一个Stream&lt;Result&gt;。MatchResult接口有group、start和end方法,就像Matcher一样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">matches</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Matcher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">group)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div><p>如果要处理文件中的数据,那么可以使用Scanner.findAll方法来获取一个Stream&lt;MatchResult&gt;,这样就无须现将内容读到一个字符串中:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">words</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">pL+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MathchResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">group);</span></span></code></pre></div><h3 id="用分隔符来分割" tabindex="-1">用分隔符来分割 <a class="header-anchor" href="#用分隔符来分割" aria-label="Permalink to &quot;用分隔符来分割&quot;">​</a></h3><p>Pattern.split方法可以按照匹配的分隔符断开:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> commas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">complile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s*,</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">s*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">commas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input);</span></span></code></pre></div><h3 id="替换匹配" tabindex="-1">替换匹配 <a class="header-anchor" href="#替换匹配" aria-label="Permalink to &quot;替换匹配&quot;">​</a></h3><p>Matcher类的replaceAll方法将正则表达式出现的所有地方都用替换字符串来替换。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">complile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;[0-9]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> matcher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h2 id="nio" tabindex="-1">NIO <a class="header-anchor" href="#nio" aria-label="Permalink to &quot;NIO&quot;">​</a></h2><p>之前只是将书上的知识摘抄了一遍而已,NIO的知识在好几个部分散落开来</p><h3 id="_5种i-o模型" tabindex="-1">5种I/O模型 <a class="header-anchor" href="#_5种i-o模型" aria-label="Permalink to &quot;5种I/O模型&quot;">​</a></h3><p>阻塞 非阻塞(轮询) I/O复用(事件驱动模型) 和非阻塞I/O的区别就是委托黄牛 select/poll epoll 信号驱动 和I/O复用模型的区别就是委托黄牛变成了电话 异步I/O 和上面的区别是操作系统会完成数据拷贝到用户内核空间这一步的操作</p><h3 id="jdk中3个重要的类" tabindex="-1">JDK中3个重要的类 <a class="header-anchor" href="#jdk中3个重要的类" aria-label="Permalink to &quot;JDK中3个重要的类&quot;">​</a></h3><p>其实上面的nio包的api基本上就是介绍的这3个类 Buffer、Channel和Selector Buffer与Channel不必多说 Selector可以理解为I/O多路复用模型的实现,个人猜测底层还是玩的select/poll这些函数,多路复用是通过监听事件(事件驱动模型不是白来的)来实现的,那么java肯定也会有几个方法形如select和poll函数 selector.open(); channel.register(slector,XXXX); XXXX就是要监听的事件 select() selectNow() select(long timeout) wakeup()</p>`,702),h=[n];function l(p,r,k,d,o,g){return a(),s("div",null,h)}const A=i(e,[["render",l]]);export{u as __pageData,A as default};
