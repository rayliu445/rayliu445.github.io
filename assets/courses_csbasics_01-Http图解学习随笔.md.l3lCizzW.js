import{_ as i}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as s,D as l,o as r,c as d,I as p,w as c,k as o,a as P,R as u,b as T,e as g}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const E=JSON.parse('{"title":"HTTP图解学习随笔","description":"","frontmatter":{"title":"HTTP图解学习随笔","author":"Ray","date":"2025/04/02 07:00","categories":["计算机基础"],"tags":["计算机网络"]},"headers":[],"relativePath":"courses/csbasics/01-Http图解学习随笔.md","filePath":"courses/csbasics/01-Http图解学习随笔.md","lastUpdated":1743870828000}'),b={name:"courses/csbasics/01-Http图解学习随笔.md"},q=o("h1",{id:"http图解学习随笔",tabindex:"-1"},[P("HTTP图解学习随笔 "),o("a",{class:"header-anchor",href:"#http图解学习随笔","aria-label":'Permalink to "HTTP图解学习随笔"'},"​")],-1),m=u('<p>参考资料---《图解HTTP协议》</p><h2 id="一、了解web及网络基础" tabindex="-1">一、了解Web及网络基础 <a class="header-anchor" href="#一、了解web及网络基础" aria-label="Permalink to &quot;一、了解Web及网络基础&quot;">​</a></h2><p>在开始之前，我们需要了解一个概念-<strong>协议</strong>，我的理解是通信双方要遵守的约定。例如，我们规定了Web页面要使用html语言来写,例如规定了双方通信时如何探测目标，例如硬件(路由器、计算机)在接入互联网时应该选择什么样的光缆。</p><h3 id="使用http协议访问web" tabindex="-1">使用HTTP协议访问Web <a class="header-anchor" href="#使用http协议访问web" aria-label="Permalink to &quot;使用HTTP协议访问Web&quot;">​</a></h3><p>目的是为了访问某个服务器上的资源而诞生出一种协议。</p><h3 id="http的诞生" tabindex="-1">HTTP的诞生 <a class="header-anchor" href="#http的诞生" aria-label="Permalink to &quot;HTTP的诞生&quot;">​</a></h3><p>方便知识共享的万维网(world wide web) http0.9-&gt;http1.0-&gt;http-&gt;1.0,目前都已经到2.x版本了。</p><h3 id="网络基础tcp-ip-重点" tabindex="-1">网络基础TCP/IP(重点) <a class="header-anchor" href="#网络基础tcp-ip-重点" aria-label="Permalink to &quot;网络基础TCP/IP(重点)&quot;">​</a></h3><h4 id="什么是tcp-ip协议族" tabindex="-1">什么是TCP/IP协议族 <a class="header-anchor" href="#什么是tcp-ip协议族" aria-label="Permalink to &quot;什么是TCP/IP协议族&quot;">​</a></h4><p>这里所讲的是TCP/IP协议族，协议族中包含大量的协议，其中较为重要的是<strong>TCP协议和IP协议</strong>，协议中存在着各式各样的内容，电缆的规格、IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序以及Web页面的加载顺序等等。</p><h4 id="tcp-ip的分层管理" tabindex="-1">TCP/IP的分层管理 <a class="header-anchor" href="#tcp-ip的分层管理" aria-label="Permalink to &quot;TCP/IP的分层管理&quot;">​</a></h4><p>通过各种协议的作用结合计算机网络，我们将协议进行分层。</p><h5 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h5><p>决定了向用户提供<strong>应用服务通信</strong>时的活动，例如使用浏览器访问某个页面，不难想到，HTTP协议就位于这一层。 TCP/IP协议族中预存了各类通信时的服务。例如，FTP(FIle Transfer Protocol,文件传输协议)和DNS(Domain Name System,域名系统);</p><h5 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h5><p>传输层对上层应用层，体统处于网络连接中的<strong>两台计算机之间的数据传输</strong>。例如，访问B站时 ，个人计算机和B站服务器(计算机)之间的数据传输。 有两个性质不同的协议：<strong>TCP(Transmissiion Control Protocool,传输控制协议)和UDP(User Data Protocol,用户控制协议)</strong>:</p><h5 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h5><p>网络层用来<strong>处理网络上流动的数据包</strong>。数据包是网络传输的最小数据单位。该层规定了通过<strong>怎样的路径(传输路径)到达对方的计算机，并把数据包传送给对方</strong>。</p><h5 id="链路层" tabindex="-1">链路层 <a class="header-anchor" href="#链路层" aria-label="Permalink to &quot;链路层&quot;">​</a></h5><p>用来处理网络的<strong>硬件部分</strong>。包括操作系统、硬件的设备驱动、NIC(Network InterFace Card,网络适配器)，及光钎等物理可见部分。</p><h4 id="tcp-ip的通信传输流" tabindex="-1">TCP/IP的通信传输流 <a class="header-anchor" href="#tcp-ip的通信传输流" aria-label="Permalink to &quot;TCP/IP的通信传输流&quot;">​</a></h4><p>我们来梳理一下网络通信时的协议族中的各个协议在各层发挥的作用。 <img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/blogImage/images/TCP-IP%E4%BC%A0%E8%BE%93%E6%B5%81.png" alt=""> 发送端从应用层往下走，接收端则是从下往上走。 书中的例子是HTTP,首先作为发送端的<strong>客户端在应用层发送(HTTP协议)一个想看某个Web页面的HTTP请求</strong>。 然后，在传输层(TCP协议)将HTTP请求分成<strong>一个个数据包</strong>，再在各个数据上打上<strong>标记序号和发送IP地址</strong>。 到了网络层(IP协议)，将在各个数据包加上<strong>MAC(地址每台硬件独一无二的标识)</strong>。 接收端的服务器在<strong>链路层接收到数据包</strong>，再传给上层。 发送端每经过一层将会加上一个<strong>协议首部</strong>，在接收端会逐层解析后去掉。</p><h3 id="与http关系密切的协议-ip、tcp-dns" tabindex="-1">与HTTP关系密切的协议：IP、TCP&amp;DNS <a class="header-anchor" href="#与http关系密切的协议-ip、tcp-dns" aria-label="Permalink to &quot;与HTTP关系密切的协议：IP、TCP&amp;DNS&quot;">​</a></h3><h4 id="负责传输的ip协议" tabindex="-1">负责传输的IP协议 <a class="header-anchor" href="#负责传输的ip协议" aria-label="Permalink to &quot;负责传输的IP协议&quot;">​</a></h4><p>IP协议的作用是将数据包传输到正确的地址，而要完成这一目标则需要满足许多条件。比较重要的两个条件是<strong>MAC地址和IP地址,这两个地址可以搭配使用</strong> IP地址指明了<strong>节点被分配的地址，是可以改变的</strong>。 MAC地址网卡的<strong>固有地址，是唯一的</strong>。 很少有情况是在局域网内部的两台计算机进行数据传输，通常要通过多台计算机或者网络设备来作为<strong>中转站</strong>。这时我们需要得知下一站的MAC地址来确定下一个跳转的中转站。<strong>ARP(Address Resolution Protocol)协议的作用是，通过通信方的IP地址来确定它的MAC地址。</strong><strong>在通信过程中无法无法全面掌控传输过程</strong><strong>路由选择机制</strong>，就像寄一个快递包裹，你只需将快递拿到集散中心，集散中心会知道是否肯发货(做出某种判断)，再将货物送给下一个集散中心，下个区域的集散中心再确定能否送到对方家中。</p><h4 id="负责确保可靠性的tcp协议" tabindex="-1">负责确保可靠性的TCP协议 <a class="header-anchor" href="#负责确保可靠性的tcp协议" aria-label="Permalink to &quot;负责确保可靠性的TCP协议&quot;">​</a></h4><p>TCP处于传输层，提供可靠的字节流服务。字节流服务是将大的数据块分成以数据报文为单位的数据包。而且TCP协议能够确认对方是否收到了数据包。</p><h5 id="三次握手策略" tabindex="-1">三次握手策略 <a class="header-anchor" href="#三次握手策略" aria-label="Permalink to &quot;三次握手策略&quot;">​</a></h5><p><img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/blogImage/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt=""> 发送端首先会<strong>发送一个带有SYN(synchronized)标识</strong>的数据包，接收端在接收到以后会回传一个<strong>带有SYN/ACK(acknowlege)的标识</strong>传达确认可以接收的信息，然后发送端再发送一个<strong>带有ACK标识</strong>的数据包。至此，&quot;握手&quot;完成。</p><h3 id="负责域名解析的dns服务" tabindex="-1">负责域名解析的DNS服务 <a class="header-anchor" href="#负责域名解析的dns服务" aria-label="Permalink to &quot;负责域名解析的DNS服务&quot;">​</a></h3><p>和HTTP协议一样存在于应用层，功能是<strong>将主机域名解析为IP地址</strong>。例如，想要访问某个网页(www.bilibili.com)，DNS服务会将这个域名转换为IP地址(形如192.168.1.1)。</p><h3 id="各种协议与http协议的关系" tabindex="-1">各种协议与HTTP协议的关系 <a class="header-anchor" href="#各种协议与http协议的关系" aria-label="Permalink to &quot;各种协议与HTTP协议的关系&quot;">​</a></h3><p>通过下面能够直观地看出IP协议、TCP协议和DNS服务在<strong>使用HTTP协议通信的过程</strong>发挥的作用。 <img src="https://raw.githubusercontent.com/aryangzhu/blogImage/master/blogImage/images/%E4%BD%BF%E7%94%A8http%E5%AE%8C%E6%95%B4%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B.png" alt=""></p><h3 id="uri和url" tabindex="-1">URI和URL <a class="header-anchor" href="#uri和url" aria-label="Permalink to &quot;URI和URL&quot;">​</a></h3><p>URI-统一资源标识符 URL-统一资源定位符 URI用字符串表示某一互联网的资源，而URL表示资源所在位置。</p><h5 id="绝对uri" tabindex="-1">绝对URI <a class="header-anchor" href="#绝对uri" aria-label="Permalink to &quot;绝对URI&quot;">​</a></h5><p><img src="https://gitee.com/aryangzhu/picture/raw/master/%E7%BB%9D%E5%AF%B9URI.png" alt=""><strong>服务器地址</strong> 使用绝对URI必须得有服务器地址，可以是可解析的域名，也可以是IPV4或者IPV6地址。 <strong>带层次的文件地址</strong> 类似于UNIX系统的文件路径。指定服务器上的某个特指资源。 <strong>查询字符串</strong> 针对已指定的文件路径内的资源，进行字符串匹配。 <strong>片段标识符</strong> 取出已获取资源的子资源。</p><h5 id="绝对url" tabindex="-1">绝对URL <a class="header-anchor" href="#绝对url" aria-label="Permalink to &quot;绝对URL&quot;">​</a></h5><h5 id="相对url" tabindex="-1">相对URL <a class="header-anchor" href="#相对url" aria-label="Permalink to &quot;相对URL&quot;">​</a></h5><p>形如/iamge/logo.gif</p><h2 id="二、简单的http协议" tabindex="-1">二、简单的HTTP协议 <a class="header-anchor" href="#二、简单的http协议" aria-label="Permalink to &quot;二、简单的HTTP协议&quot;">​</a></h2><h3 id="http协议用于客户端和服务端之间的通信" tabindex="-1">HTTP协议用于客户端和服务端之间的通信 <a class="header-anchor" href="#http协议用于客户端和服务端之间的通信" aria-label="Permalink to &quot;HTTP协议用于客户端和服务端之间的通信&quot;">​</a></h3><h3 id="通过请求和响应的交换达成通信" tabindex="-1">通过请求和响应的交换达成通信 <a class="header-anchor" href="#通过请求和响应的交换达成通信" aria-label="Permalink to &quot;通过请求和响应的交换达成通信&quot;">​</a></h3><p>HTTP协议要求必须得有一个客户端和一个服务端，并且客户端发送请求由服务端进行响应。</p><h4 id="请求报文结构" tabindex="-1">请求报文结构 <a class="header-anchor" href="#请求报文结构" aria-label="Permalink to &quot;请求报文结构&quot;">​</a></h4><p>GET /index.html HTTP/1.1 Host:hackr.jp Contnection:keep-alive; name=zhangsan&amp;age=37 <strong>请求方法、请求URI、HTTP协议版本号、报文首部字段、内容实体</strong></p><h4 id="响应报文结构" tabindex="-1">响应报文结构 <a class="header-anchor" href="#响应报文结构" aria-label="Permalink to &quot;响应报文结构&quot;">​</a></h4><p>HTTTP/1.1 200 OK Date: True, 10..... &lt;html&gt;.... <strong>协议版本、状态码、原因短语、首部字、主体</strong></p><h3 id="http不保存状态" tabindex="-1">HTTP不保存状态 <a class="header-anchor" href="#http不保存状态" aria-label="Permalink to &quot;HTTP不保存状态&quot;">​</a></h3><p>第二次通信时，双方无法得知之前的通信内容是什么。</p><h3 id="请求uri定位资源" tabindex="-1">请求URI定位资源 <a class="header-anchor" href="#请求uri定位资源" aria-label="Permalink to &quot;请求URI定位资源&quot;">​</a></h3><h3 id="告知服务器意图的http方法" tabindex="-1">告知服务器意图的HTTP方法 <a class="header-anchor" href="#告知服务器意图的http方法" aria-label="Permalink to &quot;告知服务器意图的HTTP方法&quot;">​</a></h3><h3 id="使用方法下达命令" tabindex="-1">使用方法下达命令 <a class="header-anchor" href="#使用方法下达命令" aria-label="Permalink to &quot;使用方法下达命令&quot;">​</a></h3><p><strong>GET-获取某个资源</strong><strong>POST-传输实体主体(例如想要得知服务器上某个程序执行的结果)</strong><strong>PUT-客户端发送/上传文件</strong><strong>HEAD-获得报文首部(例如服务器上某个文件的创建时间等等相关信息，不需要返回主体)</strong><strong>DELETE-删除文件</strong> OPTIONS-询问支持的方法 TRACE-追踪路径 Connect-要求建立隧道协议连接代理(SSL-安全套接层)</p><h3 id="持久连接节省通信量" tabindex="-1">持久连接节省通信量 <a class="header-anchor" href="#持久连接节省通信量" aria-label="Permalink to &quot;持久连接节省通信量&quot;">​</a></h3><p>一开始，<strong>每一次请求之前都需要先建立TCP连接，HTTP响应之后也需要断开TCP连接</strong>。</p><h5 id="持久连接" tabindex="-1">持久连接 <a class="header-anchor" href="#持久连接" aria-label="Permalink to &quot;持久连接&quot;">​</a></h5><p>只在<strong>第一次发送HTTP请求时建立TCP连接，最后一次HTTP响应时断开连接</strong>。</p><h5 id="管线化" tabindex="-1">管线化 <a class="header-anchor" href="#管线化" aria-label="Permalink to &quot;管线化&quot;">​</a></h5><p>原来情况是第一个请求被响应之后才能继续发送请求，管线化是指第一个请求发送之后，可以继续发送第二个请求。并行化发送请求大大提高了效率。</p><h3 id="使用cookie的状态管理" tabindex="-1">使用Cookie的状态管理 <a class="header-anchor" href="#使用cookie的状态管理" aria-label="Permalink to &quot;使用Cookie的状态管理&quot;">​</a></h3><p>从例子开始，某些网页我们需要进行身份验证。而HTTP协议是无状态的，也就是说服务器不知道客户端圆脸已经验证过身份，想想看，B站如果打开宅舞区需要验证身份，打开鬼畜区还得验证身份，那么用户还不得麻烦死。 Cookie是在客户端发送请求到服务端之后，服务端在响应报文首部字段中添加一个<strong>Set-Cookie</strong>。客户端在后面发送请求时，就会请求报文首部字段中携带上Cookie值。服务端接收请求之后回合服务器上的值进行比较，从而确认是那个客户端发送的请求。</p><h2 id="三、http内的http信息" tabindex="-1">三、HTTP内的HTTP信息 <a class="header-anchor" href="#三、http内的http信息" aria-label="Permalink to &quot;三、HTTP内的HTTP信息&quot;">​</a></h2><h3 id="http报文" tabindex="-1">HTTP报文 <a class="header-anchor" href="#http报文" aria-label="Permalink to &quot;HTTP报文&quot;">​</a></h3><p>HTTP报文指的就是发送端和服务端使用HTTP协议时传送的信息，是由<strong>多行字符</strong>串构成。 HTTP报文分为<strong>报文首部</strong>和<strong>实体</strong>，用空格隔开。</p><h3 id="请求报文和响应报文的结构" tabindex="-1">请求报文和响应报文的结构 <a class="header-anchor" href="#请求报文和响应报文的结构" aria-label="Permalink to &quot;请求报文和响应报文的结构&quot;">​</a></h3><p>之前在学习第二章的时候有提及过，下面是请求报文和响应报文常见的 <strong>请求行</strong> 请求方法、URI和HTTP协议版本。 <strong>状态行</strong> 表示结果的状态码、原因短语和HTTP版本 <strong>首部字段</strong> 请求和响应的<strong>各种条件</strong>和<strong>属性</strong>的首部。一般有4种首部，分别是通用首部、请求首部、响应首部和实体首部。 <strong>其他</strong> 未定义在**RFC(Request for Comments,用来定义HTTP协议技术的标准文档)**中的属性(例如，Cookie)</p><h3 id="编码提升传输速率-重点" tabindex="-1">编码提升传输速率-重点 <a class="header-anchor" href="#编码提升传输速率-重点" aria-label="Permalink to &quot;编码提升传输速率-重点&quot;">​</a></h3><p>HTTP在传输时可以按照原貌进行传输，不过显然内容过大。为了方便，对HTTP请求进行编码。同时，编码需要消耗CPU资源。</p><h4 id="报文主体和实体主体的差异" tabindex="-1">报文主体和实体主体的差异 <a class="header-anchor" href="#报文主体和实体主体的差异" aria-label="Permalink to &quot;报文主体和实体主体的差异&quot;">​</a></h4><p><strong>报文</strong>(message)-是HTTP报文的<strong>基本单位</strong>。由<strong>8位组字节流</strong>(obtet sequence，obtet是由8个比特)组成，通过HTTP通信传输。 <strong>实体</strong>(entity)-作为请求或响应的<strong>有效载荷数据</strong>,由实体首部和实体主体组成。 <strong>HTTP报文的主体用于传输请求或响应的实体主体</strong> 通常，报文主体和实体主体相等的。在传输时经过编码之后，实体主体的内容将发生变化。</p><h4 id="压缩传输的内容编码" tabindex="-1">压缩传输的内容编码 <a class="header-anchor" href="#压缩传输的内容编码" aria-label="Permalink to &quot;压缩传输的内容编码&quot;">​</a></h4><p>一般在发邮件时，我们都会打包成zip等格式。同样，HTTP报文编码之后也能进行压缩。HTTP协议中有一种被称为内容编码的功能。<strong>内容编码声明编码格式，而由服务端进行解码</strong></p><h4 id="分割发送的分块传输编码" tabindex="-1">分割发送的分块传输编码 <a class="header-anchor" href="#分割发送的分块传输编码" aria-label="Permalink to &quot;分割发送的分块传输编码&quot;">​</a></h4><p>当我们请求某个资源，响应报文过大时，可以将<strong>报文分割成多个块分别发送给服务端</strong>，这种功能被称之为分块传输编码(针对实体主体)。每一块都会用16进制标记块的大小，而实体的最后一块会使用&quot;0(CR+LF，换行)&quot;来标记。</p><h4 id="发送多种数据的多部分集合" tabindex="-1">发送多种数据的多部分集合 <a class="header-anchor" href="#发送多种数据的多部分集合" aria-label="Permalink to &quot;发送多种数据的多部分集合&quot;">​</a></h4><p>在发送邮件时，可能会携带附件。通过<strong>MIME(Multipurpose Internet Mail Extensions，多用途因特网邮件扩展)机制</strong>。例如，图片等二进制数据以ASCII码字符串编码的方式指明，就是利用MIME来描述标记数据类型。<strong>MIM在扩展中会使用一种称为多部分对象集合(Multipart)的方法，来容纳多分不同数据类型的数据</strong>。相应的，HTTP协议中也采纳了多部分对象集合，<strong>发送的一份数据文件可以包含多种类型实体</strong>。 多部分对象集合包含的对象如下 <strong>multipart/form-data</strong> 这个很常见，在我们上传表单文件发送ajax请求时使用。 <strong>multipart/byteranges</strong> 状态码206时使用，响应报文包含了多个范围的内容时使用。 在使用多部分对象集合时，需要在首部添加Content-Type字段。 通常，我们使用boundary字符串来划分多部分对象集合指明的各类实体。例如&quot;--ABB03x&quot;,在多部分对应集合的最后插入&quot;--&quot;标记。</p><h4 id="获取部分内容的范围请求" tabindex="-1">获取部分内容的范围请求 <a class="header-anchor" href="#获取部分内容的范围请求" aria-label="Permalink to &quot;获取部分内容的范围请求&quot;">​</a></h4><p>文件下载时，可能因为网络原因中断。如果重新下载很麻烦，为了解决这个问题，出现一种恢复机制。 <strong>请求时需要指定下载的实体范围</strong>。 执行范围请求，会用到Range字段来指定范围。 Ranage:bytes=5001-10000 针对范围请求，响应会返回状态码为<strong>206 Partial Content</strong>的响应报文。如果是多重范围的范围请求。响应报文会在<strong>首部字段Content-Type标明multipart/byteranges后返回响应报文</strong>。</p><h4 id="内容协商" tabindex="-1">内容协商 <a class="header-anchor" href="#内容协商" aria-label="Permalink to &quot;内容协商&quot;">​</a></h4><p>内容协商是指客户端和服务端就响应的资源进行交涉，然后返回最合适的资源。<strong>内容协商会以响应资源的语言、文字符集和编码方式等作为判断的标准</strong>。 Content-Language Accept-Charset</p><h2 id="四、返回结果的http状态码" tabindex="-1">四、返回结果的HTTP状态码 <a class="header-anchor" href="#四、返回结果的http状态码" aria-label="Permalink to &quot;四、返回结果的HTTP状态码&quot;">​</a></h2><h3 id="_2xx成功" tabindex="-1">2xx成功 <a class="header-anchor" href="#_2xx成功" aria-label="Permalink to &quot;2xx成功&quot;">​</a></h3><p>200 OK</p><h3 id="_3xx重定向" tabindex="-1">3xx重定向 <a class="header-anchor" href="#_3xx重定向" aria-label="Permalink to &quot;3xx重定向&quot;">​</a></h3><p>301 Moved Premamently 请求的资源已经被被分配了新的URI，以后应该使用资源现在所指的URI。如果将资源对应的URI存为书签，那么应当按照Location首部字字段提示的URI重新保存。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">http://example.com/sample</span></span></code></pre></div><h3 id="_4xx-客户端错误" tabindex="-1">4xx 客户端错误 <a class="header-anchor" href="#_4xx-客户端错误" aria-label="Permalink to &quot;4xx 客户端错误&quot;">​</a></h3><p>404 Not Found</p><h3 id="_5xx-服务端错误" tabindex="-1">5xx 服务端错误 <a class="header-anchor" href="#_5xx-服务端错误" aria-label="Permalink to &quot;5xx 服务端错误&quot;">​</a></h3><p>500 Internetal Server Error</p><h2 id="五、与http协作的web服务器" tabindex="-1">五、与HTTP协作的web服务器 <a class="header-anchor" href="#五、与http协作的web服务器" aria-label="Permalink to &quot;五、与HTTP协作的web服务器&quot;">​</a></h2><h3 id="单台虚拟主体实现了多个域名" tabindex="-1">单台虚拟主体实现了多个域名 <a class="header-anchor" href="#单台虚拟主体实现了多个域名" aria-label="Permalink to &quot;单台虚拟主体实现了多个域名&quot;">​</a></h3><p>HTTP规范允许一台HTTP服务器搭建多个Web站点。利用虚拟服务器的功能，<strong>实现物理层面一台服务器而假想多台服务器</strong>。 由前面的章节我们知道，在访问网站时，DNS会将域名解析成为IP地址。此时，虚拟主体的IP地址已知，但是如何确定访问的是哪个域名呢？这就要求访问时Host首部内有<strong>完整指定主机名或者域名的URI</strong>。</p><h3 id="通信数据转发程序-代理、网关和隧道" tabindex="-1">通信数据转发程序：代理、网关和隧道 <a class="header-anchor" href="#通信数据转发程序-代理、网关和隧道" aria-label="Permalink to &quot;通信数据转发程序：代理、网关和隧道&quot;">​</a></h3><h4 id="网关" tabindex="-1">网关 <a class="header-anchor" href="#网关" aria-label="Permalink to &quot;网关&quot;">​</a></h4><p><strong>转发其他服务器通信数据</strong>，自己也可以处理客户端的请求。 与代理类似，但是网关能使通信线路上的服务器提供非HTTP协议服务。</p><h4 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h4><p>扮演了一个“中间人”的角色，接收客户端请求转发给服务端，也接收服务端响应发送给客户端。 <strong>代理不改变请求URI</strong><strong>每经过一台代理服务器，需要追加via首部信息</strong></p><h5 id="缓存代理-cache-proxy" tabindex="-1">缓存代理-Cache Proxy <a class="header-anchor" href="#缓存代理-cache-proxy" aria-label="Permalink to &quot;缓存代理-Cache Proxy&quot;">​</a></h5><p>代理服务器会将资源副本保存在自己的服务器上，等到下次客户端进行访问时，如果资源还是有效的，那么将会由代理服务器直接返回。</p><h5 id="透明代理-transparent-proxy" tabindex="-1">透明代理-Transparent Proxy <a class="header-anchor" href="#透明代理-transparent-proxy" aria-label="Permalink to &quot;透明代理-Transparent Proxy&quot;">​</a></h5><p>不对报文做任何修改或者加工处理。</p><h4 id="隧道" tabindex="-1">隧道 <a class="header-anchor" href="#隧道" aria-label="Permalink to &quot;隧道&quot;">​</a></h4><p>客户端与服务端之间建立私密(SSL)通道。</p><h3 id="保存资源的缓存" tabindex="-1">保存资源的缓存 <a class="header-anchor" href="#保存资源的缓存" aria-label="Permalink to &quot;保存资源的缓存&quot;">​</a></h3><p>缓存服务器是代理服务器中的一种，并归类在缓存服务器中。</p><h5 id="资源的有效期" tabindex="-1">资源的有效期 <a class="header-anchor" href="#资源的有效期" aria-label="Permalink to &quot;资源的有效期&quot;">​</a></h5><p>即使存在缓存，也会因为客<strong>户端的要求、缓存的有效期</strong>等因素，向源服务器确认资源的有效性。</p><h5 id="客户端的缓存" tabindex="-1">客户端的缓存 <a class="header-anchor" href="#客户端的缓存" aria-label="Permalink to &quot;客户端的缓存&quot;">​</a></h5><p>缓存不仅可以存在于服务期内，也可以存在于客户端。例如，熟知的ie浏览器程序，把客户端缓称为临时网络文件(Temporary Internet File)。</p><h2 id="六、报文首部" tabindex="-1">六、报文首部 <a class="header-anchor" href="#六、报文首部" aria-label="Permalink to &quot;六、报文首部&quot;">​</a></h2><h3 id="http报文首部" tabindex="-1">HTTP报文首部 <a class="header-anchor" href="#http报文首部" aria-label="Permalink to &quot;HTTP报文首部&quot;">​</a></h3><h3 id="http首部字段" tabindex="-1">HTTP首部字段 <a class="header-anchor" href="#http首部字段" aria-label="Permalink to &quot;HTTP首部字段&quot;">​</a></h3><h4 id="首部字段传递重要信息" tabindex="-1">首部字段传递重要信息 <a class="header-anchor" href="#首部字段传递重要信息" aria-label="Permalink to &quot;首部字段传递重要信息&quot;">​</a></h4><p>为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。</p><h4 id="http首部字段结构" tabindex="-1">HTTP首部字段结构 <a class="header-anchor" href="#http首部字段结构" aria-label="Permalink to &quot;HTTP首部字段结构&quot;">​</a></h4><p>首部字段名：字段值</p><h4 id="_4种http首部字段类型" tabindex="-1">4种HTTP首部字段类型 <a class="header-anchor" href="#_4种http首部字段类型" aria-label="Permalink to &quot;4种HTTP首部字段类型&quot;">​</a></h4><h5 id="通用首部字段" tabindex="-1">通用首部字段 <a class="header-anchor" href="#通用首部字段" aria-label="Permalink to &quot;通用首部字段&quot;">​</a></h5><h5 id="请求首部字段-重点" tabindex="-1">请求首部字段-重点 <a class="header-anchor" href="#请求首部字段-重点" aria-label="Permalink to &quot;请求首部字段-重点&quot;">​</a></h5><h5 id="响应首部字段-重点" tabindex="-1">响应首部字段-重点 <a class="header-anchor" href="#响应首部字段-重点" aria-label="Permalink to &quot;响应首部字段-重点&quot;">​</a></h5><h5 id="实体首部字段" tabindex="-1">实体首部字段 <a class="header-anchor" href="#实体首部字段" aria-label="Permalink to &quot;实体首部字段&quot;">​</a></h5><h5 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h5><p>HTTPS 网站必须从独立证书颁发机构（CA）获取 SSL/TLS 证书。这些网站会在交换数据之前先与浏览器共享该证书，以建立信任。SSL 证书还包含加密信息，以便服务器和 Web 浏览器可以交换加密或刻意打乱的数据。该过程的工作原理是：</p><ol><li>您通过在浏览器的地址栏中键入 <em>https://</em> URL 格式来访问 HTTPS 网站。</li><li>浏览器尝试通过请求服务器的 SSL 证书来验证该站点的真实性。</li><li>该服务器发送包含公钥的 SSL/TLS 证书作为回复。</li><li>该网站的 SSL 证书将证明该服务器身份。浏览器确认一切妥当后，它将使用该公钥加密并发送包含秘密会话密钥的消息。</li><li>Web 服务器使用其私钥解密消息并检索会话密钥。然后，它将加密该会话密钥，并向浏览器发送确认消息。</li><li>现在，浏览器和 Web 服务器都切换到使用相同的会话密钥来安全地交换消息</li></ol><h6 id="为什么要选择https" tabindex="-1">为什么要选择HTTPS <a class="header-anchor" href="#为什么要选择https" aria-label="Permalink to &quot;为什么要选择HTTPS&quot;">​</a></h6><ul><li>安全性 浏览器在与网站进行会话时，用户的消息会进行加密，这样即使第三方能够拦截到消息也会因为加密的缘故无法造成危害。</li><li>权威性</li></ul>',128);function x(a,k,f,H,I,C){const n=i,h=l("ClientOnly");return r(),d("div",null,[q,p(h,null,{default:c(()=>{var t,e;return[(((t=a.$frontmatter)==null?void 0:t.aside)??!0)&&(((e=a.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(r(),T(n,{key:0,article:a.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),m])}const U=s(b,[["render",x]]);export{E as __pageData,U as default};
