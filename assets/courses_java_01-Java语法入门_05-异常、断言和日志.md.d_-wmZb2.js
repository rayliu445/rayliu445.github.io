import{_ as h}from"./chunks/ArticleMetadata.d4_nZKBO.js";import{_ as p,D as r,o as e,c as k,I as o,w as g,k as t,a as d,R as c,b as A,e as y}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const x=JSON.parse('{"title":"05-异常、断言和日志","description":"","frontmatter":{"title":"05-异常、断言和日志","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/05-异常、断言和日志.md","filePath":"courses/java/01-Java语法入门/05-异常、断言和日志.md","lastUpdated":1744850573000}'),u={name:"courses/java/01-Java语法入门/05-异常、断言和日志.md"},D=t("h1",{id:"异常、断言和日志",tabindex:"-1"},[d("异常、断言和日志 "),t("a",{class:"header-anchor",href:"#异常、断言和日志","aria-label":'Permalink to "异常、断言和日志"'},"​")],-1),m=c(`<h2 id="处理错误" tabindex="-1">处理错误 <a class="header-anchor" href="#处理错误" aria-label="Permalink to &quot;处理错误&quot;">​</a></h2><p>对于异常情况，例如，可能造成程序崩溃的错误输入，Java使用了一种称为<strong>异常处理</strong>(exception handing)。 假设程序运行期间出现了一个用户并不想见到的错误。用户希望程序能够合理地处理这个错误。如果某些操作没有完成，程序应该: 1.返回到一种安全状态，并能够让用户执行其他的命令; 2.允许用户保存已经所有工作的结果，并以妥善的方式终止程序. 要实现上面的任务很难，因为检测引发错误的代码和能让工作保存的代码相距很远。处理异常的任务就是将控制权由错误代码转交到保存工作的处理器上。 为了能够处理异常情况，必须考虑到程序中可能会出现的错误和问题。 1.用户输入错误。例如，输入URL语法有误。 2.设备错误。例如，浏览器网页打不开，打印机设备在打印过程中没有打印纸。 3.物理限制。例如，物理磁盘空间已满。 4.代码错误。<strong>程序或者方法可能没有正确的完成工作</strong>。例如，方法返回一个错误答案，或者错误地调用了其他方法。计算一个无效的数组索引，在散列表中查找一个不存在的记录，或者让空栈执行一个弹出操作。 传统的错误处理方法是在方法执行错误之后返回一个值，通过这个值来匹配一种错误。例如，-1代表返回的是错误结果。但是，不是任何时候都能返回一个值。 在Java中，如果方法不能正常地完成任务那么也可以通过另一个路径退出程序。在这种情况下，程序会抛出(throw)一个封装异常信息的对象。这个时候，方法会立刻退出，并不返回任何值。此外，也不会调用这个方法的代码继续执行，取而代之的是，异常处理机制开始搜索能够处理这种异常状况的<strong>异常处理器(exception handler)</strong>。</p><h3 id="异常分类" tabindex="-1">异常分类 <a class="header-anchor" href="#异常分类" aria-label="Permalink to &quot;异常分类&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/rayliu445/blogImage/master/blogImage/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%BC%82%E5%B8%B8%E5%B1%82%E6%AC%A120250407.jpeg" alt=""></p><p>在Java程序设计语言中，异常对象都是派生于Throwablele类的实例对象。 Error类层次结构描述了java运行时系统的内部错误或资源耗尽等情况。你不应该抛出这种错误。出现这种错误，除了通知用户并尽力妥善地终止程序几乎无能为力。所幸的是，这种情况很少见。 Exception层次结构是我们关注的重点。它又分为了两个分支: 一个<strong>分支派生于RuntimeException</strong>; 另一个分支<strong>包含其他异常</strong>。 一般规则是:由<strong>编程导致的异常属于RuntimeException</strong>; 程序本身没有问题，但是由于像I/O错误引起的异常属于其他异常。</p><h4 id="派生于runtimeexception的异常" tabindex="-1">派生于RuntimeException的异常: <a class="header-anchor" href="#派生于runtimeexception的异常" aria-label="Permalink to &quot;派生于RuntimeException的异常:&quot;">​</a></h4><p>1.错误的强制类型转换; 2.数组访问越界； 3.访问null指针。</p><h4 id="派生于其他异常的情况" tabindex="-1">派生于其他异常的情况: <a class="header-anchor" href="#派生于其他异常的情况" aria-label="Permalink to &quot;派生于其他异常的情况:&quot;">​</a></h4><p>1.试图超越文件末尾继续读取数据; 2.试图打开一个不存在的文件; 3.试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在。</p><p><strong>“RuntimeException一定是你的自己的问题”</strong>，我们在编写代码时就应该避免出现这种异常。 1.检测数组下标来避免 ArrayIndexOutOfBoundsException异常 2.访问对象检测是否为null来杜绝 NullPointException异常</p><p><strong>java中将派生于Error和RuntimeException类的所有异常称为-非检查型异常</strong>。其他异常称为检查型异常。</p><h3 id="声明检查型异常" tabindex="-1">声明检查型异常 <a class="header-anchor" href="#声明检查型异常" aria-label="Permalink to &quot;声明检查型异常&quot;">​</a></h3><p><strong>方法不仅仅需要告诉编译器将要返回什么值，还要告诉编译器有可能出现什么错误</strong>。例如，一段读取文件内容的代码知道<strong>有可能读取的文件不存在，或者文件内容为空</strong>，因此，试图处理文件信息的代码需要通知编译器可能会抛出IOException类的异常。</p><p>如果要指定一个方法有可能抛出一个异常，就要修改方法的首部。例如，标准类库中的FileInputStream类的一个构造器的声明。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String name) throws FileNotFoundException</span></span></code></pre></div><p>这个构造器会根据String类型的参数会产生一个FileInputStream对象，但是也有可能会出现异常。这个时候，会抛出一个FileNotFoundExceptin对象，如果这个方法真的抛出异常对象，<strong>运行时系统就会开始搜索知道如何处理FileNotFoundException对象的异常处理器</strong>。</p><p>在自己编写代码时，不必声明这个方法可能抛出的所有异常。</p><p><strong>什么时候在方法中使用throws声明异常</strong>？throws子句声明哪些异常？ 需要记住遇到一下4种情况时会抛出异常(假设我们自己编写了一个<strong>方法</strong>遇到了下面的情况): 1.调用了一个抛出检查型异常的方法，例如，FileInputStream构造器。 2.检测到一个错误，并且利用throw语句抛出一个检查型异常(就是说这个方法中已经出现了这种情况，我们使用throw来抛出这个检查型异常)。 3.程序出现错误，例如，a[-1]=0;会抛出一个非检查型的错误 4.Java虚拟机或运行行时库出现问题。 如果出现前两种情况，则必须要告诉调用这个方法的程序员有可能会抛出异常。为什么，因为任何一个抛出异常的方法都有可能是死亡陷阱。<strong>如果没有处理器捕获这个异常，那么执行的线程就会终止</strong>。 有些Java方法包含在对外提供的类中，我们应该使用方法首部的<strong>异常规范</strong>(exception specification)声明这个方法可能抛出异常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Image </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IOException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>如果有一个方法有可能抛出多个检查型异常类型，那么就必须在方法的首部列出所有的异常类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Image </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileNotFoundException,EOFException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>总之，一个方法必须声明所有可能抛出的检查型异常。</p><h4 id="需要注意的点" tabindex="-1">需要注意的点 <a class="header-anchor" href="#需要注意的点" aria-label="Permalink to &quot;需要注意的点&quot;">​</a></h4><p>1.如果超类中声明了检查型异常，<strong>子类覆盖超类的方法时不能声明超过父类的声明异常类型</strong>(子类可以抛出更加特定的异常或者不抛出异常)；如果超类没有声明，子类也不能声明。</p><p>2.<strong>如果一个方法抛出一个异常，而这个异常是某个特定类的实例，那么这个异常可能属于这个类，也可能属于这个类的任意一个子类</strong>。</p><h3 id="如何抛出异常" tabindex="-1">如何抛出异常 <a class="header-anchor" href="#如何抛出异常" aria-label="Permalink to &quot;如何抛出异常&quot;">​</a></h3><p>如果已有的异常类能够满足你的要求，可以查阅JavaAPI文档，在这种情况下:</p><p>1.找到一个合适的异常类; 2.创建这个类的一个对象; 3.将对象抛出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> EOFException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>或者是</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e;</span></span></code></pre></div><p>书上的例子是读取文件的承诺长度与实际长度不符</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">readData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Scanner in)throws EOFException{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">len){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="创建异常类" tabindex="-1">创建异常类 <a class="header-anchor" href="#创建异常类" aria-label="Permalink to &quot;创建异常类&quot;">​</a></h3><p>如果我们遇到任何标准异常类都无法描述的问题，则需要自己创建异常类。</p><h4 id="如何自定义异常类" tabindex="-1">如何自定义异常类? <a class="header-anchor" href="#如何自定义异常类" aria-label="Permalink to &quot;如何自定义异常类?&quot;">​</a></h4><p>1.定义的类需要<strong>派生于Exception类或者Exception类的子类</strong>(IOException等);</p><p>2.通常做法是自定义两个构造器，一个是无参构造器；另一个则是包含详细信息的构造器(超类Throwable的toString方法会返回一个字符串，其中包含这个信息，这在调试中非常有用)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> FileFormatException</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileFormatException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileFormatException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">gripe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(gripe);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-throwable" tabindex="-1">java.lang.Throwable <a class="header-anchor" href="#java-lang-throwable" aria-label="Permalink to &quot;java.lang.Throwable&quot;">​</a></h5><h6 id="throwable" tabindex="-1">Throwable() <a class="header-anchor" href="#throwable" aria-label="Permalink to &quot;Throwable()&quot;">​</a></h6><p>构造一个新的Throwable对象，<strong>但没有详细的描述信息</strong></p><h6 id="throwable-string-message" tabindex="-1">Throwable(String message) <a class="header-anchor" href="#throwable-string-message" aria-label="Permalink to &quot;Throwable(String message)&quot;">​</a></h6><p><strong>同上，但是带有指定的详细信息描述</strong>。</p><h6 id="string-getmessage" tabindex="-1">String getMessage() <a class="header-anchor" href="#string-getmessage" aria-label="Permalink to &quot;String getMessage()&quot;">​</a></h6><p>获得Throwable对象的详细描述信息。</p><h2 id="捕获异常" tabindex="-1">捕获异常 <a class="header-anchor" href="#捕获异常" aria-label="Permalink to &quot;捕获异常&quot;">​</a></h2><h3 id="捕获异常-1" tabindex="-1">捕获异常 <a class="header-anchor" href="#捕获异常-1" aria-label="Permalink to &quot;捕获异常&quot;">​</a></h3><p>如果发生了某个异常，但没有在任何地方捕获这个异常，程序就会终止，并在控制台上打印一个消息，包括这个异常的类型和一个堆栈轨迹。使用try/catch语句块来捕获异常。 读取文件的例子:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String fileName){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fileName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            process input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>1.如果try语句块中的任何代码跑出了cathch语句块中的一个异常类，将跳过try语句块中的其余代码。 2.程序将执行catch子句中的处理器代码。 上面的代码很容易理解，我们除了自己处理异常之外还有没有别的方式? 通常,最好的选择就是什么也不做，而是将异常传递给调用者。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String fileName) throws IOException{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fileName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        process input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>编译器严格执行throws说明符</strong>。如果调用了一个抛出检查型异常的方法，就必须处理这个异常。</p><p>哪种方法更好呢？</p><p><strong>一般经验，要捕获那些你知道如何处理的异常，而继续传播那些你不知道怎样处理的异常</strong>。</p><p>如果超类方法没有抛出异常，而子类进行方法覆盖，就需要捕获方法代码中的每一个检查型异常。</p><h3 id="捕获多个异常" tabindex="-1">捕获多个异常 <a class="header-anchor" href="#捕获多个异常" aria-label="Permalink to &quot;捕获多个异常&quot;">​</a></h3><p>如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FileNotFoundException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    emergency action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> missing files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(UnknownHostException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>注意:<strong>捕获多个异常时,异常变量隐含为final变量</strong>。例如,在以下子句体中不能为e赋不同的值:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FileNotFoundException | UnknownHostException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="再次抛出异常与异常链" tabindex="-1">再次抛出异常与异常链 <a class="header-anchor" href="#再次抛出异常与异常链" aria-label="Permalink to &quot;再次抛出异常与异常链&quot;">​</a></h3><p>通常catch语句块用来处理异常，但是也可以在catch中再次抛出一个异常。书上的场景是:有个子系统供其他程序员来调用，<strong>可以使用一个指示子系统故障的异常类型</strong>。 将原始异常设置为新异常的“原因”:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    access the database</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(SQLException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">original</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;database error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   	e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initCause</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(original);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>捕获到异常时，可以使用下面这条语句获取原始异常:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">caughtException.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCause</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>强烈建议使用这种包装技术。这样可以在子系统中抛出高层异常，而不会丢失原始异常的细节。</p><h3 id="finally子句" tabindex="-1">finally子句 <a class="header-anchor" href="#finally子句" aria-label="Permalink to &quot;finally子句&quot;">​</a></h3><p>不管异常是否被捕获,finally中的代码都会被执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    code that might </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> exception</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    show error message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//6</span></span></code></pre></div><p>1.如果没有问题，那么将会是1256;</p><p>2.如果try语句块中抛出异常，那么将会是13456;</p><p>3.如果catch语句块中抛出异常,<strong>那么异常将会抛回到这个方法的调用者</strong>(假设，e.printStackTrace()方法出错，那么将会由方法中所设置的异常处理机制(throws| throw new Exception()))。执行顺序将会是135(也就是说try/catch语句块之外的代码不会执行);</p><p>4.如果代码部分抛出异常，但是没有catch块能够捕获异常。程序将跳过try语句块中的剩余代码，最后执行finally中的代码，并将异常抛回给这个方法的调用者。</p><h3 id="try-with-resource子句" tabindex="-1">try-with-Resource子句 <a class="header-anchor" href="#try-with-resource子句" aria-label="Permalink to &quot;try-with-Resource子句&quot;">​</a></h3><p>假设资源属于一个实现了AutoCloseable接口的类，Java7为这种代码模式提供了一个很有用的快捷方式。AutoCloseable接口有个方法:</p><p>void close() throws Exception</p><p>try-with-Resource(带资源的try语句)的最简形为:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    work with res</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>try块退出时会自动调用res.close()方法。下面是一个简单的例子:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/usr/share/dict/words&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;out.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,StandardCharsets.UTF_8)){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>无论这个块如何退出,in和out都会关闭。</p><h3 id="分析堆栈轨迹元素" tabindex="-1">分析堆栈轨迹元素 <a class="header-anchor" href="#分析堆栈轨迹元素" aria-label="Permalink to &quot;分析堆栈轨迹元素&quot;">​</a></h3><p><strong>堆栈轨迹</strong>是程序执行过程中某个特定点上所有挂起的方法调用的一个列表。</p><p>当Java程序因为一个未捕获的异常而终止时，就会显示堆栈轨迹。</p><p>1.可以调用Throwable类的printStackTrace方法访问堆栈轨迹的文本信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(out));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>2.我们还有另一种方法就是使用StackWalker类,他会生成一个StackWalker.StackFrame实例流,其中每个实例分别描述一个栈帧(stack frame)。可以利用以下调用迭代处理这些栈帧:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StackWalker</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> walker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StackWalker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">walker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(frame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">analyze frame);</span></span></code></pre></div><p>也可以通过懒方式处理Stream&lt;StackWalker.StackFrame&gt;,可以调用:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">walker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">process stream);</span></span></code></pre></div><p>利用StackWalker.StackFrame类的一些方法可以得到所执行代码行的文件名和行号，以及类对象和方法名。</p><h4 id="常用api-1" tabindex="-1">常用API <a class="header-anchor" href="#常用api-1" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-throwable-1" tabindex="-1">java.lang.Throwable <a class="header-anchor" href="#java-lang-throwable-1" aria-label="Permalink to &quot;java.lang.Throwable&quot;">​</a></h5><p>Throwable(Throwable cause)</p><h6 id="throwable-string-message-throwable-cause" tabindex="-1">Throwable(String message,Throwable cause) <a class="header-anchor" href="#throwable-string-message-throwable-cause" aria-label="Permalink to &quot;Throwable(String message,Throwable cause)&quot;">​</a></h6><p>用给定的cause(原因)构造一个Throwable对象。</p><h6 id="throwable-initcase-throwable-cause" tabindex="-1">Throwable initCase(Throwable cause) <a class="header-anchor" href="#throwable-initcase-throwable-cause" aria-label="Permalink to &quot;Throwable initCase(Throwable cause)&quot;">​</a></h6><p>为这个对象设置原因，如果这个对象已经有原因，则抛出一个异常。返回this。</p><h6 id="throwable-getcause" tabindex="-1">Throwable getCause() <a class="header-anchor" href="#throwable-getcause" aria-label="Permalink to &quot;Throwable getCause()&quot;">​</a></h6><p>获得设置的原因对象。</p><h6 id="stacktraceelement-getstacktrace" tabindex="-1">StackTraceElement[] getStackTrace() <a class="header-anchor" href="#stacktraceelement-getstacktrace" aria-label="Permalink to &quot;StackTraceElement[] getStackTrace()&quot;">​</a></h6><p>获得构造这个对象时调用堆栈的轨迹。</p><h6 id="void-addsuppressed-throwable-t" tabindex="-1">void addSuppressed(Throwable t) <a class="header-anchor" href="#void-addsuppressed-throwable-t" aria-label="Permalink to &quot;void addSuppressed(Throwable t)&quot;">​</a></h6><p>为这个异常增加一个“抑制的”异常。这出现在try-with-Resource语句中,其中t是close方法中抛出的一个异常。</p><h6 id="throwable-getsuppressed" tabindex="-1">Throwable[] getSuppressed() <a class="header-anchor" href="#throwable-getsuppressed" aria-label="Permalink to &quot;Throwable[] getSuppressed()&quot;">​</a></h6><p>得到被抑制的异常。</p><h5 id="java-lang-exception" tabindex="-1">java.lang.Exception <a class="header-anchor" href="#java-lang-exception" aria-label="Permalink to &quot;java.lang.Exception&quot;">​</a></h5><p>Exception(Throwable cause)</p><h6 id="exception-string-message-throwable-cause" tabindex="-1">Exception(String message,Throwable cause) <a class="header-anchor" href="#exception-string-message-throwable-cause" aria-label="Permalink to &quot;Exception(String message,Throwable cause)&quot;">​</a></h6><p>用给定的cause构造一个Exception对象。</p><h5 id="java-lang-runtimeexception" tabindex="-1">java.lang.RuntimeException <a class="header-anchor" href="#java-lang-runtimeexception" aria-label="Permalink to &quot;java.lang.RuntimeException&quot;">​</a></h5><p>RuntimeException(Throwable cause)</p><p>RuntimeException(String message,Throwable cause)</p><h5 id="java-lang-stackwalker" tabindex="-1">java.lang.StackWalker <a class="header-anchor" href="#java-lang-stackwalker" aria-label="Permalink to &quot;java.lang.StackWalker&quot;">​</a></h5><p>static StackWalker getInstance()</p><p>static StackWalker getInstance(StackWalker.Option option)</p><h6 id="static-stackwalker-getinstance-set-stackwalker-option-options" tabindex="-1">static StackWalker getInstance(Set&lt;StackWalker.Option&gt; options) <a class="header-anchor" href="#static-stackwalker-getinstance-set-stackwalker-option-options" aria-label="Permalink to &quot;static StackWalker getInstance(Set\\&lt;StackWalker.Option&gt; options)&quot;">​</a></h6><p>得到一个StackWalker实例。</p><h6 id="foreach-consumer-super-stackwalker-stackframe-action" tabindex="-1">forEach(Consumer&lt;? super StackWalker.StackFrame&gt; action) <a class="header-anchor" href="#foreach-consumer-super-stackwalker-stackframe-action" aria-label="Permalink to &quot;forEach(Consumer&lt;? super StackWalker.StackFrame&gt; action)&quot;">​</a></h6><p>在每个栈帧上完成给定的动作，从最近调用的方法开始。</p><h6 id="walk-function-super-stream-stackwalker-stackframe-extends-t-function" tabindex="-1">walk(Function&lt;? super Stream&lt;StackWalker.StackFrame&gt;,? extends T&gt; function) <a class="header-anchor" href="#walk-function-super-stream-stackwalker-stackframe-extends-t-function" aria-label="Permalink to &quot;walk(Function&lt;? super Stream\\&lt;StackWalker.StackFrame&gt;,? extends T&gt; function)&quot;">​</a></h6><p>对一个栈帧流应用给定的函数，返回这个函数的结果。</p><h5 id="java-lang-stackwalker-stackframe" tabindex="-1">java.lang.StackWalker.StackFrame <a class="header-anchor" href="#java-lang-stackwalker-stackframe" aria-label="Permalink to &quot;java.lang.StackWalker.StackFrame&quot;">​</a></h5><h6 id="string-getfilename" tabindex="-1">String getFileName() <a class="header-anchor" href="#string-getfilename" aria-label="Permalink to &quot;String getFileName()&quot;">​</a></h6><p>得到包括该元素执行点的源文件的文件名,如果这个信息不可用则返回null。</p><h6 id="int-getlinenumber" tabindex="-1">int getLineNumber() <a class="header-anchor" href="#int-getlinenumber" aria-label="Permalink to &quot;int getLineNumber()&quot;">​</a></h6><p>得到包含该元素执行点的源文件的行号,如果这个信息不可用则返回-1。</p><h6 id="string-getclassname" tabindex="-1">String getClassName() <a class="header-anchor" href="#string-getclassname" aria-label="Permalink to &quot;String getClassName()&quot;">​</a></h6><p>得到方法包含该元素执行点的类的完全限定名。</p><h6 id="string-getdeclaringclass" tabindex="-1">String getDeclaringClass() <a class="header-anchor" href="#string-getdeclaringclass" aria-label="Permalink to &quot;String getDeclaringClass()&quot;">​</a></h6><p>得到方法包含该元素执行点的类的Class对象。</p><h6 id="string-getmethodname" tabindex="-1">String getMethodName() <a class="header-anchor" href="#string-getmethodname" aria-label="Permalink to &quot;String getMethodName()&quot;">​</a></h6><p>得到包含该元素执行点的方法的方法名。构造器方法名为&lt;init&gt;。静态初始化器的方法名为&lt;clinit&gt;。无法区分同名的重载方法。</p><h6 id="boolean-isnativemethod" tabindex="-1">boolean isNativeMethod() <a class="header-anchor" href="#boolean-isnativemethod" aria-label="Permalink to &quot;boolean isNativeMethod()&quot;">​</a></h6><p>如果这个元素的执行点在一个原声方法中,则返回true。</p><h6 id="string-tostring" tabindex="-1">String toString() <a class="header-anchor" href="#string-tostring" aria-label="Permalink to &quot;String toString()&quot;">​</a></h6><p>返回一个格式化字符串,包含类和方法名、文件名以及行号。</p><h5 id="java-lang-stacktraceelement" tabindex="-1">java.lang.StackTraceElement <a class="header-anchor" href="#java-lang-stacktraceelement" aria-label="Permalink to &quot;java.lang.StackTraceElement&quot;">​</a></h5><p>String getFileName()</p><p>同上</p><p>int getLineNumber()</p><p>String getClassName()</p><p>String getMethodName()</p><p>boolean isNativeMethod()</p><p>String toString()</p><h2 id="使用异常的技巧" tabindex="-1">使用异常的技巧 <a class="header-anchor" href="#使用异常的技巧" aria-label="Permalink to &quot;使用异常的技巧&quot;">​</a></h2><h3 id="_1-使用异常不能代替简单的测试" tabindex="-1">1.使用异常不能代替简单的测试 <a class="header-anchor" href="#_1-使用异常不能代替简单的测试" aria-label="Permalink to &quot;1.使用异常不能代替简单的测试&quot;">​</a></h3><p>理由很简单，捕获异常所用的时间比简单测试所花费的时间多得多。</p><h3 id="_2-不要过分细化异常" tabindex="-1">2.不要过分细化异常 <a class="header-anchor" href="#_2-不要过分细化异常" aria-label="Permalink to &quot;2.不要过分细化异常&quot;">​</a></h3><h3 id="_3-充分利用异常的层次结构" tabindex="-1">3.充分利用异常的层次结构 <a class="header-anchor" href="#_3-充分利用异常的层次结构" aria-label="Permalink to &quot;3.充分利用异常的层次结构&quot;">​</a></h3><p>不要只抛出RuntimeException异常。应该寻找一个适合的子类或创建自己的异常类。</p><p>不要只捕获Throwable异常，否则会使你的代码更难度、更难维护。</p><p>如果能够将一种异常转换成另一种更加适合的异常,那么不要犹豫。</p><h3 id="_4-不要压制异常" tabindex="-1">4. 不要压制异常 <a class="header-anchor" href="#_4-不要压制异常" aria-label="Permalink to &quot;4. 不要压制异常&quot;">​</a></h3><p>如果编写的方法调用了另一个方法，那个方法很久才会抛出一个异常，这时不使用throws列表中声明异常的话，编译器就会报错。</p><p>关闭异常</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Image </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String s){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        code that threatens to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> checked exceptions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//so there</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们可以看到catch语句块中什么也没干,一旦出现异常，这个异常就会被悄无声息地忽略。</p><h3 id="_5-在检测异常时-苛刻-更好" tabindex="-1">5.在检测异常时，“苛刻”更好 <a class="header-anchor" href="#_5-在检测异常时-苛刻-更好" aria-label="Permalink to &quot;5.在检测异常时，“苛刻”更好&quot;">​</a></h3><p>例如，使用无效的参数调用一个方法时，返回一个虚拟值是不是比抛出一个异常好?</p><p>我们认为:最好在出错的地方抛出一个EmptyStackException异常，这要好于以后抛出一个NullPointerException异常。</p><h3 id="_6-不要羞于传递异常" tabindex="-1">6.不要羞于传递异常 <a class="header-anchor" href="#_6-不要羞于传递异常" aria-label="Permalink to &quot;6.不要羞于传递异常&quot;">​</a></h3><p>如果调用了一个抛出异常的方法,例如,FileInputStream构造器或readLine方法,它们就会本能地捕获这些可能产生的异常。其实,最好继续传递这个异常,而不是自己捕获</p><p><strong>5和6可以归纳为&quot;早抛出,晚捕获&quot;</strong>。</p><h2 id="使用断言" tabindex="-1">使用断言 <a class="header-anchor" href="#使用断言" aria-label="Permalink to &quot;使用断言&quot;">​</a></h2><h3 id="断言的概念" tabindex="-1">断言的概念 <a class="header-anchor" href="#断言的概念" aria-label="Permalink to &quot;断言的概念&quot;">​</a></h3><p>断言机制是<strong>允许在代码测试期间加入一些检查</strong>,而在生产代码中会自动删除这些检查。</p><p>Java中引入了关键字assert。这个关键字有两种形式:</p><p>1.assert condition;</p><p>2.assert condition:expression;</p><p>在第二个语句中,表达式将传入AssertionError对象的构造器,并转换成一个消息字符串。</p><p>&quot;表达式&quot;(expression)的唯一目的就是产生消息字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x;</span></span></code></pre></div><h3 id="启用和禁用断言" tabindex="-1">启用和禁用断言 <a class="header-anchor" href="#启用和禁用断言" aria-label="Permalink to &quot;启用和禁用断言&quot;">​</a></h3><p>需要注意的是，<strong>不必重新编译程序来启用或禁用断言</strong>。启用或禁用断言是<strong>类加载器</strong>的功能。</p><p><strong>可以运行程序时用-enableassertions或-ea选项启用断言</strong>:</p><p>java -enableassertions MyApp</p><p>也可以在某个类或整个包中启用断言,例如:</p><p>java -ea:MyClass -ea:com.mycompany.mylib MyApp</p><p>这条命令将为MyClas类以及com.mycompany.mylib包和它的子包的所有类打开断言。x选项ea是打开所有无名包中所有类的断言。</p><p>使用选项-disableassertions或-da在某个特定类和包中禁用断言:</p><p>java -ea:... -da:MyClass MyApp</p><p>有些类不是由类加载器加载,<strong>而是直接由虚拟机加载的</strong>。可以使用这些开关有选择地启用或禁用那些类中的断言。</p><h3 id="使用断言完成参数检查" tabindex="-1">使用断言完成参数检查 <a class="header-anchor" href="#使用断言完成参数检查" aria-label="Permalink to &quot;使用断言完成参数检查&quot;">​</a></h3><h4 id="什么时候使用断言" tabindex="-1">什么时候使用断言 <a class="header-anchor" href="#什么时候使用断言" aria-label="Permalink to &quot;什么时候使用断言&quot;">​</a></h4><p>1.断言失败是不可恢复的;</p><p>2.断言只是在开发和测试阶段打开</p><p>因此，不应该使用断言向程序的其他部分通知发生了可恢复性的错误,不应该利用断言程序与程序用户沟通问题。</p><h3 id="使用断言提供假设文档" tabindex="-1">使用断言提供假设文档 <a class="header-anchor" href="#使用断言提供假设文档" aria-label="Permalink to &quot;使用断言提供假设文档&quot;">​</a></h3><h4 id="常用api-2" tabindex="-1">常用API <a class="header-anchor" href="#常用api-2" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-classloader" tabindex="-1">java.lang.ClassLoader <a class="header-anchor" href="#java-lang-classloader" aria-label="Permalink to &quot;java.lang.ClassLoader&quot;">​</a></h5><p>void setDefaultAssertionStatus(boolean b)</p><p>为通过类加载器加载的类(没有显示的类或包断言状态)启用或禁用断言。</p><p>void setClassAssertionStatus(String className,boolean b)</p><p>为给定的类和它的内部类启用或禁用断言状态。</p><p>void setPackageAssertionStatus(String packageName,boolean b)</p><p>为给定包以及子包中的所有类启用或禁用断言。</p><p>void clearAssertionStatus()</p><p>删除所有显式的类和包断言状态设置，并禁用通过这个类加载器加载的所有类的断言。</p><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><p><strong>日志是一种在程序整个生命周期都可以使用的战略性工具</strong>。</p><p>可以不用使用System.out.print()插入在代码中去打印某些值。</p><p>日志API的优点:</p><p>1.<strong>可以轻易地取消全部日志记录,或者仅取消某个级别一下的日志</strong>,而且可以很容易地再次打开开关;</p><p>2.可以很简单地禁止日志记录,因此,将这些日志代码留在程序中的开销很小;</p><p>3.<strong>日志记录可以被定向到不同的处理器</strong>,如在控制台、写至文件等;</p><p>4.日志记录器和处理器可以对日志进行过滤。可以根据<strong>过滤器实现器指定的标准</strong>丢弃那些无用的记录项;</p><p>5.<strong>日志记录可以采用不同的方式格式化</strong>,例如,纯文本或XML;</p><p>6.应用程序可以使用多个日志记录器,他们使用与包名类似的有层次结构的名字,例如,com.mycompany.myapp;</p><p>7.日志系统的配置由配置文件控制。</p><h3 id="基本日志" tabindex="-1">基本日志 <a class="header-anchor" href="#基本日志" aria-label="Permalink to &quot;基本日志&quot;">​</a></h3><p>生成简单的日志记录,可以使用全局日志记录器(global logger)并调用其info方法: Logger.getGlobal().info(&quot;File-&gt;Open menu item selected&quot;);</p><p>如果在适当的地方(如main方法)调用</p><p>Logger.getGlobal().setLevel(Level.OFF);</p><h3 id="高级日志" tabindex="-1">高级日志 <a class="header-anchor" href="#高级日志" aria-label="Permalink to &quot;高级日志&quot;">​</a></h3><p>在一个专业的应用程序中肯定不能将所有的日志都记录到一个全局日志记录器中。</p><p>可以调用getLogger方法创建或获取日志记录器:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myLogger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>注:未被任何变量引用的日志记录器可能会被垃圾回收。为了防止这种情况发生,要像上面的例子一样,用静态变量存储日志记录器的引用。</p><p>与包名类似,日志记录器也具有层次结构,而且日志具有更强的层次性。对于包来说,包与父包之间没有语义关系,但是日志记录器的父与子之间将共享某些属性。</p><p>通常,日志有</p><h4 id="_7个级别" tabindex="-1">7个级别: <a class="header-anchor" href="#_7个级别" aria-label="Permalink to &quot;7个级别:&quot;">​</a></h4><p>SEVERE(严重)</p><p>WARNING</p><p>INFO</p><p>CONFIG(配置)</p><p>FINE</p><p>FINER</p><p>FINEST</p><p><strong>从下往上级别越来越高,默认情况下,实际上只记录前3个级别</strong>。也可以设置一个不同的级别,例如,</p><p>logger.setLevel(Level.FINE);</p><p>现在,FINE以及所有更高级别的日志都会记录。</p><p>另外,<strong>还可以使用Level.ALL开启所有级别的日志记录,或者使用Level.OFF关闭所有级别的日志记录</strong>。</p><p>所有级别都有日志记录的方法</p><p>logger.warning(message);</p><p>logger.fine(message);</p><p>或者,还可以使用log方法并指定级别,例如:</p><p>logger.log(Level.FINE,message);</p><p><strong>默认的日志记录将显示根据调用堆栈得出的包含日志调用的类名和方法名</strong>。但是<strong>如果虚拟机对执行过程进行了优化,就得不到准确的调用信息</strong>。此时,可以使用logp方法获得调用类和方法的确切位置,这个方法的签名为:</p><p>void logp(Level l,String className,String methodName,String messge);</p><h4 id="有一些用来跟踪执行流的方法" tabindex="-1">有一些用来跟踪执行流的方法: <a class="header-anchor" href="#有一些用来跟踪执行流的方法" aria-label="Permalink to &quot;有一些用来跟踪执行流的方法:&quot;">​</a></h4><p>void entering(String className,String methodName) void entering(String className,String methodName,Object param)</p><p>void entering(String className,String methodName,Object[] params)</p><p>void exiting(String className,String methodName) void exiting(String className,String methodName,Object result)</p><p>例如:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String file,String pattern){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">entering</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.mylib.Reader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;read&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Ojbect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]{file,parttern});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">exiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.mylib.Reader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;read&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这些调用将生成FINER级别而且以字符串ENTRY和RETURN开头的日志记录。</p><p>记录日志的常见用途是记录预料之外的异常。<strong>可以使用下面两个便利方法在日志记录集中包含异常的描述</strong>:</p><h5 id="void-throwing-string-classname-string-methodname-throwable-t" tabindex="-1">void throwing(String className,String methodName,Throwable t) <a class="header-anchor" href="#void-throwing-string-classname-string-methodname-throwable-t" aria-label="Permalink to &quot;void throwing(String className,String methodName,Throwable t)&quot;">​</a></h5><h5 id="void-log-level-l-string-message-throwable-t" tabindex="-1">void log(Level l,String message,Throwable t) <a class="header-anchor" href="#void-log-level-l-string-message-throwable-t" aria-label="Permalink to &quot;void log(Level l,String message,Throwable t)&quot;">​</a></h5><h3 id="修改日志配置" tabindex="-1">修改日志配置 <a class="header-anchor" href="#修改日志配置" aria-label="Permalink to &quot;修改日志配置&quot;">​</a></h3><p>可以通过编辑配置文件来修改日志系统的各个属性。在默认情况下,配置文件位于:</p><p>conf/logging.properties(在Java9之前,位于jdkxxx/jre/lib/logging.properties)</p><p><img src="https://gitee.com/aryangzhu/picture/raw/master/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE.png" alt=""></p><p>要使用另外一个配置文件,就要将<strong>java.util.logging.config.file属性</strong>设置为那个文件的位置，<strong>为此要用以下命令启动应用程序</strong>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -Djava.util.logging.config.file=configFile</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> MainClass</span></span></code></pre></div><p>想要修改默认的日志级别,就需要<strong>编辑配置文件</strong>,并修改以下命令行</p><p>.level=INFO</p><p>可以通过添加下面这一行来指定自定义日志记录器的日志级别</p><p>com.mycompany.myapp.level=FINE(就是说在日志记录器的后面追加后缀.level)</p><p>日志记录器并不将消息发送到控制台,那是处理器的任务。如果想要在控制台看到FINE级别的消息,就需要单独进行设置。</p><p>java.util.logging.ConsoleHandler.level=FINE</p><p>注:<strong>日志管理器(LogManager)配置中的属性设置不是系统属性</strong>,因此,用-Dcom.mycompany.myapp.level=FINE启动程序时不会对日志记录器(Logger)产生任何影响。</p><p><strong>日志管理器在启动虚拟机时初始化,也就是在main方法执行前</strong>。如果想要定制日志属性,但是没有使用java -Djava.util.logging.config.file命令行选项启动应用,也可以在程序中调用<strong>System.setProperty(“java.util.logging.config.file”,file)</strong>,不过这样一来,你就必须使用<strong>LogManager.getLogManager().readConfiguration()重新初始化日志配置</strong>。</p><p>在Java9中,可以通过调用以下方法更新日志配置:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LogManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">updateCOnfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(mapper);</span></span></code></pre></div><p>这样就会从java.util.logging.config.file系统属性指定的位置读取一个新配置。然后<strong>应用到这个映射器来解析新配置或者老配置的所有键的值</strong>。映射器是一个<strong>Function&lt;String,BiFunction&lt;String,String,String&gt;&gt;</strong>。它<strong>将现有配置的键映射到替换函数</strong>。<strong>每个替换函数接收到与键关联的老值和新值(如果没有关联的值则得到null),生成一个替换</strong>(万物皆对象),或者如果要在更新中删除这个键则返回null。</p><p>例如，常见的就是合并新配置和老配置,如果一个键在老配置和新配置中都出现,则优先选择新值。那么，这样一个<strong>映射器</strong>:</p><p>key-&gt;((oldValue,newValue)-&gt;newValue==null?oldValue:newValue)</p><p>上面使用了lambda表达式，key是Function&lt;&gt;函数式接口中前一个参数,而后面的一个参数又是一个函数式接口BiFunciton&lt;&gt;使用lambda表达式实现了方法。</p><p>或者说只想以com.company开头的键,其他的键保持不变:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">startWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.company&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((oldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newValue)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newValue)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((oldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newVaule)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">oldValue)</span></span></code></pre></div><p>也可以使用jconsole程序改变一个正在运行的程序级别。</p><h3 id="本地化" tabindex="-1">本地化 <a class="header-anchor" href="#本地化" aria-label="Permalink to &quot;本地化&quot;">​</a></h3><p>本地化的应用程序包含<strong>资源包</strong>中的本地特定信息。</p><p>一个程序可以包含多个资源包,例如一个用于菜单,另一个用于日志消息。每个资源包都有一个名字(如,&quot;com.mycompany.logmessages&quot;)。要想为资源包增加映射,<strong>需要对应每个本地化环境提供一个文件</strong>(如果没有这个映射文件的话,那么应当先创建一个映射文件;如果映射文件存在,那么应当在映射文件里增加这个映射消息)。英文消息映射位于com/mycompany/logmessages_en.properties文件中;德文消息映射位于com/company/logmessages_de.properties文件中。可以将这些文件与应用程序的类文件放在一起,以便ResourceBundle类自动找到它们。</p><p>下面的都是映射文件(文本文件)的具体条目:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">readingFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Achtung</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Datei wird eingelesen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">renamingFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Datei wird umbenannt</span></span></code></pre></div><p>创建日志记录器的时候可以指定资源包</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loggerName,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.logmessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>然后,<strong>为日志消息指定资源包的键</strong>,而不是实际的日志消息字符串。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>logger.info(&quot;readingFile&quot;);</span></span></code></pre></div><h3 id="处理器" tabindex="-1">处理器 <a class="header-anchor" href="#处理器" aria-label="Permalink to &quot;处理器&quot;">​</a></h3><p>在默认情况下,<strong>日志记录器将记录发送到ConsoleHandler(控制台处理器),并由它输出到System.err流(输出流)</strong>。具体地,<strong>日志记录器会把记录发送到父处理器,而最终的祖先处理器(名为&quot;&quot;)有一个ConsoleHandler</strong>。</p><p>与日志记录器一样,处理器也有日志级别。对于一个要记录的日志记录,它的日志级别必须高于日志记录器和处理器二者的阀值。日志管理器配置文件将默认的控制台处理器的日志级别设置为</p><p>java.util.logging.ConsoleHandler.level=INFO</p><p>我们可以自己修改配置文件中的默认日志记录器级别和处理器级别,也可以绕过配置创建自己的处理器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Level.FINE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setUseParentHandlers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ConsoleHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ConsoleHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Level.FINE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(handler);</span></span></code></pre></div><p>在默认情况下,日志记录器将记录发送的自己的处理器和父日志记录器的处理器。我们的日志记录器是祖先记录器(名为&quot;&quot;)的子类,而这个祖先日志记录器会把所有等于或高于INFO级别的记录发送到控制台。但是，我们并不想两次看到相同的日志记录,所以将useParentHandlers属性设置为false。</p><p>要将日志记录发送到其他地方,就要添加其他的处理器。日志API为此提供了两个非常有用的处理器,一个是FileHandler,另一个是SocketHandler。<strong>SocketHandler将记录发送到指定的主机和端口</strong>。</p><p>例如</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FileHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(handler);</span></span></code></pre></div><p>这些记录被发送到用户主目录的javan.log文件中,n是保证文件唯一的一个编号。如果没有主目录的概念,就会保存到一个默认位置。默认情况下,记录格式会转化成为XML。一个典型的日志记录如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mills</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mills</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sequence</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sequence</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><p>日志管理器的配置文件中有许多不同的参数,下面我们来看几个比较重要而且常用的:</p><p>java.util.logging.FileHander.formatter-&gt;记录格式化器(描述)-&gt;java.util.logging.XMLFormatter(默认值)。</p><p>java.util.logging.FileHandler.pattern-&gt;日志文件名的模式(描述)-&gt;%h/java%u.log(默认值)。</p><p>也有可能不想使用默认的日志文件名,因此,应该使用另一种模式,例如,%h/myapp.log。</p><p>由于接触的比较少,所以我们在这里描述一下</p><h4 id="日志记录文件模式变量" tabindex="-1">日志记录文件模式变量 <a class="header-anchor" href="#日志记录文件模式变量" aria-label="Permalink to &quot;日志记录文件模式变量&quot;">​</a></h4><p>%h-&gt;系统属性user.home的值</p><p>%t-&gt;系统临时目录</p><p>%u-&gt;用于解决冲突的唯一编号</p><p>%g-&gt;循环日志的生成号</p><p>%%-&gt;%字符</p><p>如果多个应用程序使用同一个日志文件,就应该使用append标志。并且要使用%u来方便每个应用程序来创建唯一的副本。‘</p><p>日志文件也可以以循环序列的形式保存(如myapp.log.0,myapp.log.2等)。<strong>只要文件超出了大小限制,最老的文件就会被删除,其他的文件将重新命名,同时创建一个新的文件,其生成号为0</strong>。</p><p>还可以通过扩展Handler类或者StreamHandler类来自定义处理器。例如,</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WindowHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> StreamHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WindowHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      JTextArea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JTextArea</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      setOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> OutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> off</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b,off,len));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>但是上面的方式有一个缺陷就是处理器会缓存日志记录,所以我们需要刷新缓冲区将其写入流中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WindowHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> StreamHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> publish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LogRecord </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(record);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        flush</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="过滤器" tabindex="-1">过滤器 <a class="header-anchor" href="#过滤器" aria-label="Permalink to &quot;过滤器&quot;">​</a></h3><p>默认情况下,会根据日志记录级别进行过滤。每个日志记录器和处理器都有一个可选的过滤器来完成附加的过滤。要定义一个过滤器,需要实现Filter接口并实现以下方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isLoggable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LogRecord record)</span></span></code></pre></div><p>例如,某个过滤器可能只对entering方法和exiting方法生成的消息感兴趣,这个过滤器就可以调用record.getMessage()方法,并检查消息是否以ENTYR和RETURN开头。要想将一个过滤器安装到一个日志记录器或处理器中,<strong>只需调用setFilter方法</strong>就可以了。</p><h3 id="格式化器" tabindex="-1">格式化器 <a class="header-anchor" href="#格式化器" aria-label="Permalink to &quot;格式化器&quot;">​</a></h3><p>ConsoleHandler类和FileHandler类可以生成文本和XML格式的日志记录。你也可以扩展Formatter类并覆盖下面的这个方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LogRecord record)</span></span></code></pre></div><p>可以根据自己的需要以任何方式对记录中的信息进行格式化,并返回字符串。在format方法中,可能会调用下面这个方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">formatMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LogRecord record)</span></span></code></pre></div><p>这个方法对记录中的消息部分进行格式化,将替换参数并应用本地化处理。</p><p>很多文件格式需要在记录的前后添加一个头部和尾部。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHead</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Handler h)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getTail</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Handler h)</span></span></code></pre></div><h3 id="日志技巧" tabindex="-1">日志技巧 <a class="header-anchor" href="#日志技巧" aria-label="Permalink to &quot;日志技巧&quot;">​</a></h3><p>1.对于一个简单的应用,选择一个日志记录器。可以把日志记录器命名为与主应用包一样的名字,例如,com.mycompany.myprog。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getMyLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.myprog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>为了方便起见,<strong>你可能希望为有大量日志活动的类增加静态字段</strong>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;com.mycompany.myprog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>2.默认的日志设置会把级别等于或高于INFO的所有消息记录到控制台。当然，用户可以更改这个设置,更改配置有些过于麻烦。所以,你应当在你的应用中安装更合适的配置。</p><p>下面代码实现了将所有的日志消息放到一个特定的文件中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;java.util.loggging.config.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;java.util.logging.config.file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Level.All);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 	LOG_ROTATION_COUNT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FileHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;%h/myapp.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,LOG_ROTATION_COUNT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LEVEL.SEVERE,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Can&#39;t create log file handler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>3.需要牢记:所有级别为INFO、WARNING和SEVERE的消息都将显示在控制台上。因此,最好只对程序用户有意义的消息设置为这几个级别。</p><p>想要调用System.out.println时,可以替换为发出以下的日志消息:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fine</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;File open dialog canceled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>也可以用来记录意料之外的异常:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(SomeException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Level.FINE,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;explanation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="常用api-3" tabindex="-1">常用API <a class="header-anchor" href="#常用api-3" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-util-logging-logger" tabindex="-1">java.util.logging.Logger <a class="header-anchor" href="#java-util-logging-logger" aria-label="Permalink to &quot;java.util.logging.Logger&quot;">​</a></h5><h6 id="logger-getlogger-string-loggername" tabindex="-1">Logger getLogger(String loggerName) <a class="header-anchor" href="#logger-getlogger-string-loggername" aria-label="Permalink to &quot;Logger getLogger(String loggerName)&quot;">​</a></h6><h6 id="logger-getlogger-string-loggername-string-bundlename" tabindex="-1">Logger getLogger(String loggerName,String bundleName) <a class="header-anchor" href="#logger-getlogger-string-loggername-string-bundlename" aria-label="Permalink to &quot;Logger getLogger(String loggerName,String bundleName)&quot;">​</a></h6><p>获得给定名字的日志记录器。如果这个日志记录器不存在,则创建一个日志记录器。本地化消息位于名为bundleName的资源包中。</p><h6 id="void-exiting-string-classname-string-methodname-object-result" tabindex="-1">void exiting(String className,String methodName,Object result) <a class="header-anchor" href="#void-exiting-string-classname-string-methodname-object-result" aria-label="Permalink to &quot;void exiting(String className,String methodName,Object result)&quot;">​</a></h6><p>记录一个描述进入/退出方法(有给定的参数和返回值)的日志记录。</p><h6 id="void-throwing-string-classname-string-methodname-throwable-t-1" tabindex="-1">void throwing(String className,String methodName,Throwable t) <a class="header-anchor" href="#void-throwing-string-classname-string-methodname-throwable-t-1" aria-label="Permalink to &quot;void throwing(String className,String methodName,Throwable t)&quot;">​</a></h6><p>记录一个描述抛出给定异常对象的日志记录。</p><h6 id="void-log-level-level-string-message-throwable-t" tabindex="-1">void log(Level level,String message,Throwable t) <a class="header-anchor" href="#void-log-level-level-string-message-throwable-t" aria-label="Permalink to &quot;void log(Level level,String message,Throwable t)&quot;">​</a></h6><p>记录一个有给定级别和消息的日志记录,其中可以包括对象或者可抛出对象。要包括对象,消息中必须包含格式化占位符{0}、{1}等。</p><p>void logp(Level level,String className,String methodName,String message,Object[] objs)</p><h6 id="void-logp-level-level-string-classname-string-methodname-string-message-throwable-t" tabindex="-1">void logp(Level level,String className,String methodName,String message,Throwable t) <a class="header-anchor" href="#void-logp-level-level-string-classname-string-methodname-string-message-throwable-t" aria-label="Permalink to &quot;void logp(Level level,String className,String methodName,String message,Throwable t)&quot;">​</a></h6><p>记录一个有给定级别、准确的调用者信息和消息的日志记录,其中可以包括对象或可抛出对象。</p><p>void logrb(Level level,String className,String methodName,ResourceBundle bundle,String message,Object params)</p><h6 id="void-logrb-level-level-string-classname-string-methodname-resourcebundle-bundle-string-message-throwable-thrown" tabindex="-1">void logrb(Level level,String className,String methodName,ResourceBundle bundle,String message,Throwable thrown) <a class="header-anchor" href="#void-logrb-level-level-string-classname-string-methodname-resourcebundle-bundle-string-message-throwable-thrown" aria-label="Permalink to &quot;void logrb(Level level,String className,String methodName,ResourceBundle bundle,String message,Throwable thrown)&quot;">​</a></h6><p>记录一个有给定级别、准确的调用者信息、资源包和消息的日志记录,其中可以包括对象或可抛出对象。</p><h6 id="void-setlevel-level-l" tabindex="-1">void setLevel(Level l) <a class="header-anchor" href="#void-setlevel-level-l" aria-label="Permalink to &quot;void setLevel(Level l)&quot;">​</a></h6><p>获得和设置这个日志记录器的级别。</p><h6 id="void-setparent-logger-l" tabindex="-1">void setParent(Logger l) <a class="header-anchor" href="#void-setparent-logger-l" aria-label="Permalink to &quot;void setParent(Logger l)&quot;">​</a></h6><p>获得和设置这个日志记录器的父日志记录器。</p><h6 id="handler-gethandlers" tabindex="-1">Handler[] getHandlers() <a class="header-anchor" href="#handler-gethandlers" aria-label="Permalink to &quot;Handler[] getHandlers()&quot;">​</a></h6><p>获得这个日志记录器的所有处理器。</p><p>void addHandler(Handler h)</p><h6 id="void-removehandler-handler-h" tabindex="-1">void removeHandler(Handler h) <a class="header-anchor" href="#void-removehandler-handler-h" aria-label="Permalink to &quot;void removeHandler(Handler h)&quot;">​</a></h6><p>增加/删除这个日志记录其中的一个处理器。</p><p>boolean getUseParentHandlers()</p><h6 id="void-setuseparenthandlers-boolean-b" tabindex="-1">void setUseParentHandlers(boolean b) <a class="header-anchor" href="#void-setuseparenthandlers-boolean-b" aria-label="Permalink to &quot;void setUseParentHandlers(boolean b)&quot;">​</a></h6><p>获得和设置“使用父处理器”属性。如果这个属性是true，日志记录器会将全部的日志记录转发给他的父处理器。</p><p>void getFilter()</p><h6 id="void-setfilter-filter-f" tabindex="-1">void setFilter(Filter f) <a class="header-anchor" href="#void-setfilter-filter-f" aria-label="Permalink to &quot;void setFilter(Filter f)&quot;">​</a></h6><h5 id="java-util-logging-handler" tabindex="-1">java.util.logging.Handler <a class="header-anchor" href="#java-util-logging-handler" aria-label="Permalink to &quot;java.util.logging.Handler&quot;">​</a></h5><h6 id="abstract-void-publish-logrecord-record" tabindex="-1">abstract void publish(LogRecord record) <a class="header-anchor" href="#abstract-void-publish-logrecord-record" aria-label="Permalink to &quot;abstract void publish(LogRecord record)&quot;">​</a></h6><p>将日志记录发送到希望的目的地。</p><h6 id="abstract-void-flush" tabindex="-1">abstract void flush() <a class="header-anchor" href="#abstract-void-flush" aria-label="Permalink to &quot;abstract void flush()&quot;">​</a></h6><p>刷新输出所有已缓冲的数据。</p><h6 id="abstract-void-close" tabindex="-1">abstract void close() <a class="header-anchor" href="#abstract-void-close" aria-label="Permalink to &quot;abstract void close()&quot;">​</a></h6><p>刷新输出所有的已缓冲数据,并释放所有相关的资源。</p><p>Filter getFilter()</p><h6 id="void-setfilter-filter-f-1" tabindex="-1">void setFilter(Filter f) <a class="header-anchor" href="#void-setfilter-filter-f-1" aria-label="Permalink to &quot;void setFilter(Filter f)&quot;">​</a></h6><p>获得和设置这个处理器的过滤器。</p><p>Formatter getFormatter()</p><h6 id="void-setformatter-formatter-f" tabindex="-1">void setFormatter(Formatter f) <a class="header-anchor" href="#void-setformatter-formatter-f" aria-label="Permalink to &quot;void setFormatter(Formatter f)&quot;">​</a></h6><p>获得和设置这个处理器的格式化器。</p><p>void getLevel()</p><h6 id="void-setlevel-level-l-1" tabindex="-1">void setLevel(Level l) <a class="header-anchor" href="#void-setlevel-level-l-1" aria-label="Permalink to &quot;void setLevel(Level l)&quot;">​</a></h6><p>获得和设置处理器级别。</p><h5 id="java-logging-consolehandler" tabindex="-1">java.logging.ConsoleHandler <a class="header-anchor" href="#java-logging-consolehandler" aria-label="Permalink to &quot;java.logging.ConsoleHandler&quot;">​</a></h5><h6 id="consolehandler" tabindex="-1">ConsoleHandler() <a class="header-anchor" href="#consolehandler" aria-label="Permalink to &quot;ConsoleHandler()&quot;">​</a></h6><p>构造一个新的控制台处理器。</p><h5 id="java-util-logging-filehandler" tabindex="-1">java.util.logging.FileHandler <a class="header-anchor" href="#java-util-logging-filehandler" aria-label="Permalink to &quot;java.util.logging.FileHandler&quot;">​</a></h5><h6 id="filehandler-string-pattern-long-limit-int-count-boolean-append" tabindex="-1">FileHandler(String pattern,long limit,int count,boolean append) <a class="header-anchor" href="#filehandler-string-pattern-long-limit-int-count-boolean-append" aria-label="Permalink to &quot;FileHandler(String pattern,long limit,int count,boolean append)&quot;">​</a></h6><p>构造一个文件处理器。limit是日志文件可以包含的最大字节数,count是循环文件的数量。</p><h5 id="java-util-logging-logrecord" tabindex="-1">Java.util.logging.LogRecord <a class="header-anchor" href="#java-util-logging-logrecord" aria-label="Permalink to &quot;Java.util.logging.LogRecord&quot;">​</a></h5><h6 id="level-getlevel" tabindex="-1">Level getLevel() <a class="header-anchor" href="#level-getlevel" aria-label="Permalink to &quot;Level getLevel()&quot;">​</a></h6><p>获得这个日志记录的日志级别。</p><h6 id="string-getresourcename" tabindex="-1">String getResourceName() <a class="header-anchor" href="#string-getresourcename" aria-label="Permalink to &quot;String getResourceName()&quot;">​</a></h6><p>获得正在记录这个日志记录的日志记录器的名字。</p><p>ResourceBundle getResourceBundle()</p><h6 id="string-getresourcebundlename" tabindex="-1">String getResourceBundleName() <a class="header-anchor" href="#string-getresourcebundlename" aria-label="Permalink to &quot;String getResourceBundleName()&quot;">​</a></h6><p>获得用于本地化消息的资源或资源包名。</p><h6 id="string-getmessage-1" tabindex="-1">String getMessage() <a class="header-anchor" href="#string-getmessage-1" aria-label="Permalink to &quot;String getMessage()&quot;">​</a></h6><p>获得本地化或格式化之前的&quot;原始&quot;消息。</p><h6 id="object-getparameters" tabindex="-1">Object[] getParameters() <a class="header-anchor" href="#object-getparameters" aria-label="Permalink to &quot;Object[] getParameters()&quot;">​</a></h6><p>获得对象参数。</p><h6 id="throwable-getthrown" tabindex="-1">Throwable getThrown() <a class="header-anchor" href="#throwable-getthrown" aria-label="Permalink to &quot;Throwable getThrown()&quot;">​</a></h6><p>获得所抛出的对象。</p><p>String getResourceClassName()</p><h6 id="string-getresourcemethodname" tabindex="-1">String getResourceMethodName() <a class="header-anchor" href="#string-getresourcemethodname" aria-label="Permalink to &quot;String getResourceMethodName()&quot;">​</a></h6><p>获得记录这个日志记录的代码区域。<strong>这个信息有可能是由日志记录代码提供的,也有可能是自动从运行时堆栈推测出来的</strong>。</p><h6 id="long-getmillis" tabindex="-1">long getMillis() <a class="header-anchor" href="#long-getmillis" aria-label="Permalink to &quot;long getMillis()&quot;">​</a></h6><p>获得创建时间。</p><h6 id="instant-getinstant" tabindex="-1">Instant getInstant() <a class="header-anchor" href="#instant-getinstant" aria-label="Permalink to &quot;Instant getInstant()&quot;">​</a></h6><p>获得创建时间,作为java.time.Instant返回。</p><h6 id="long-getsequencenumber" tabindex="-1">long getSequenceNumber() <a class="header-anchor" href="#long-getsequencenumber" aria-label="Permalink to &quot;long getSequenceNumber()&quot;">​</a></h6><p>获得这个日志记录的唯一序号。</p><h6 id="int-getthreadid" tabindex="-1">int getThreadID() <a class="header-anchor" href="#int-getthreadid" aria-label="Permalink to &quot;int getThreadID()&quot;">​</a></h6><p>获得创建这个日志记录的线程的唯一ID。这些ID是由LogRecord类分配的,与其他线程的ID无关。</p><h5 id="java-util-logging-logmanager" tabindex="-1">java.util.logging.LogManager <a class="header-anchor" href="#java-util-logging-logmanager" aria-label="Permalink to &quot;java.util.logging.LogManager&quot;">​</a></h5><h6 id="static-logmanager-getlogmanager" tabindex="-1">static LogManager getLogManager() <a class="header-anchor" href="#static-logmanager-getlogmanager" aria-label="Permalink to &quot;static LogManager getLogManager()&quot;">​</a></h6><p>获得全局LogManager实例。</p><p>void readConfiguration()</p><h6 id="void-readconfiguration-inputstream-in" tabindex="-1">void readConfiguration(InputStream in) <a class="header-anchor" href="#void-readconfiguration-inputstream-in" aria-label="Permalink to &quot;void readConfiguration(InputStream in)&quot;">​</a></h6><p>从系统属性java.util.logging.config.file指定的文件或者给定的输入流读取日志配置。</p><p>void updateConfiguration(InputStream in,Function&lt;String,BiFunction&lt;String,String,String&gt;&gt; mapper)</p><h6 id="void-updateconfiguration-function-string-bifuntion-string-string-string-mapper" tabindex="-1">void updateConfiguration(Function&lt;String,BiFuntion&lt;String,String,String&gt;&gt; mapper) <a class="header-anchor" href="#void-updateconfiguration-function-string-bifuntion-string-string-string-mapper" aria-label="Permalink to &quot;void updateConfiguration(Function\\&lt;String,BiFuntion\\&lt;String,String,String&gt;&gt; mapper)&quot;">​</a></h6><p>将日志配置与系统属性java.util.logging.configl.file指定的文件或给定的输入流合并。</p><h5 id="java-util-logging-filter" tabindex="-1">java.util.logging.Filter <a class="header-anchor" href="#java-util-logging-filter" aria-label="Permalink to &quot;java.util.logging.Filter&quot;">​</a></h5><h6 id="boolean-isloggable-logrecord-record" tabindex="-1">boolean isLoggable(LogRecord record) <a class="header-anchor" href="#boolean-isloggable-logrecord-record" aria-label="Permalink to &quot;boolean isLoggable(LogRecord record)&quot;">​</a></h6><p>如果给定日志记录需要记录,则返回true。</p><h5 id="java-util-logging-formatter" tabindex="-1">java.util.logging.Formatter <a class="header-anchor" href="#java-util-logging-formatter" aria-label="Permalink to &quot;java.util.logging.Formatter&quot;">​</a></h5><h6 id="abstract-string-format-logrecord-record" tabindex="-1">abstract String format(LogRecord record) <a class="header-anchor" href="#abstract-string-format-logrecord-record" aria-label="Permalink to &quot;abstract String format(LogRecord record)&quot;">​</a></h6><p>返回格式化给定日志记录后得到的字符串。</p><h3 id="调试技巧" tabindex="-1">调试技巧 <a class="header-anchor" href="#调试技巧" aria-label="Permalink to &quot;调试技巧&quot;">​</a></h3><p>1.用下面的方法打印或记录任意变量的值。</p><p>System.out.println(&quot;x=&quot;+x);</p><p>或</p><p>Logger.getGlobal().info(&quot;x=&quot;+x);</p><p>想要获得对象的状态可以打印this</p><p>Logger.getGlobal().info(&quot;this=&quot;+this);</p><p>2.可以在每个类中放置一个单独的main方法。</p><p>对各个文件启用Java虚拟机来运行测试。在运行applet时,这些main方法不会被调用,而运行应用程序时,Java虚拟机只调用启动类的main方法。</p><p>3.使用Junit框架,常见的是就是@Test。</p><p>4.<strong>日志代理</strong>(logging proxy)是一个子类的对象,他可以截获方法调用,记录日志,然后调用超类中的方法。</p><p>例如,使用匿名内部类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> generater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> nextDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;nextDouble&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>5.利用Throwable类的printStack方法,可以从任意的异常对象获得堆栈轨迹。</p><p>下面的代码将捕获任意异常,打印这个异常对象的堆栈轨迹(非常常用的手段)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>并不是非得捕获异常才能生成堆栈轨迹。<strong>只要在代码的某个位置插入下面这条语句就可以获得堆栈轨迹</strong>。</p><p>6.一般来说,堆栈轨迹显示在System.err上。如果想要记录或显示堆栈轨迹,可以如下将它捕获到一个字符串中:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> StringWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(out));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>7.通常,将程序错误记入一个文件会很有用。不过,错误会发送到System.err，而不是System.out。因此,不能通过运行下面的命令来获取:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">java MyProgram </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> errors.txt</span></span></code></pre></div><p>而应当如下捕获错误流:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>java MyProgram 2&gt; errors.txt</span></span></code></pre></div><p>要想在同一个文件中同时捕获System.err和System.out,需要使用一下命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>java MyProgram 1&gt;errors.txt 2&gt;&amp;1</span></span></code></pre></div><p>8.在System.err中显示未捕获的异常的堆栈轨迹并不是一个理想的方法。更好的方法是将这些消息记录到一个文件中。可以用静态方法Thread.setDefaultUncaughtExceptionHandler改变未捕获的异常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setDefaultUncaughtExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">UncaughtExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uncaughtException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Thread t,Throwable t){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          save information in log file;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>9.想要观察类的加载过程,启动Java虚拟机时可以使用-verbose标志。</p><p>10.java -Xlint sourceFiles</p><p>11.Java虚拟机增加了对Java应用程序的<strong>监控</strong>(monitoring)和<strong>管理</strong>(management)支持,允许在虚拟机中安装代理来跟踪内存消耗、线程使用、类加载等情况。</p><p>12.Java任务控制器(Java Mission Control)也很专业。</p>`,462);function C(s,b,v,F,B,E){const n=h,l=r("ClientOnly");return e(),k("div",null,[D,o(l,null,{default:g(()=>{var a,i;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((i=s.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(e(),A(n,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),m])}const w=p(u,[["render",C]]);export{x as __pageData,w as default};
