import{_ as e}from"./chunks/ArticleMetadata.TT7jIO3o.js";import{_ as p,D as k,o as n,c as d,I as r,w as g,k as l,a as o,R as y,b as c,e as C}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const _=JSON.parse('{"title":"Solidity学习随笔","description":"","frontmatter":{"title":"Solidity学习随笔","author":"Ray","date":"2025/02/22 21:30","categories":["web3生态"],"tags":["web3"],"showComment":false},"headers":[],"relativePath":"courses/web3/01-evm/02-Solidity学习随笔.md","filePath":"courses/web3/01-evm/02-Solidity学习随笔.md","lastUpdated":1742735073000}'),A={name:"courses/web3/01-evm/02-Solidity学习随笔.md"},D=l("h1",{id:"solidity学习随笔",tabindex:"-1"},[o("Solidity学习随笔 "),l("a",{class:"header-anchor",href:"#solidity学习随笔","aria-label":'Permalink to "Solidity学习随笔"'},"​")],-1),F=y(`<p><strong>写在前面</strong></p><p>本篇笔记参考的教程是WTF学院的101和102的lab，官方的文档我也有看过但是中文版读起来很奇怪，所以就选择了这个教程。我跟学下来觉得很赞，每一小节都有测验来检查我们吸收的怎么样，强烈推荐。103的lab我看了一下都是各个方向的实际应用讲解，我后面单读写吧，因为我觉得每个方向都还是需要一些基础概念做打底的。</p><h2 id="认识合约" tabindex="-1">认识合约 <a class="header-anchor" href="#认识合约" aria-label="Permalink to &quot;认识合约&quot;">​</a></h2><p>合约就是在区块链基础上运行的程序(数据+操作)，区块链保存交易信息，合约中的操作就相当于交易需要消耗gas，同时区块链中还会保存合约中的状态变量，所以读取合约的状态变量也是交易，也需要消耗gas费用。</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>和其他语言入门一样，Solidity也是从数据类型开始讲起，我学习前端语言(js，ts)和其他后端语言(python)也是如此。</p><h3 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">​</a></h3><h4 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h4><p>常见的写法</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//整数，包括负数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _uint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//无符号整数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20220330</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//256位无符号整数</span></span></code></pre></div><h4 id="布尔类型" tabindex="-1">布尔类型 <a class="header-anchor" href="#布尔类型" aria-label="Permalink to &quot;布尔类型&quot;">​</a></h4><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _bool1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h5 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h5><p>！、&amp;&amp;、||、==、!=</p><h4 id="地址类型" tabindex="-1">地址类型 <a class="header-anchor" href="#地址类型" aria-label="Permalink to &quot;地址类型&quot;">​</a></h4><p>这个算是solidity里面比较特殊的一个了，我们知道合约都是EOA和CA。在合约中我们也需要用到地址，所以就有了这种类型。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> poublic _address1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_address);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">address1.balance;</span></span></code></pre></div><h5 id="普通地址" tabindex="-1">普通地址 <a class="header-anchor" href="#普通地址" aria-label="Permalink to &quot;普通地址&quot;">​</a></h5><p>存储一个20字节的值(以太坊地址)的大小。</p><h5 id="payable-address" tabindex="-1">payable address <a class="header-anchor" href="#payable-address" aria-label="Permalink to &quot;payable address&quot;">​</a></h5><p>比普通地址多了transfer和send(两个都是用于转账的方法)，后面会提到</p><h4 id="定长字节数组" tabindex="-1">定长字节数组 <a class="header-anchor" href="#定长字节数组" aria-label="Permalink to &quot;定长字节数组&quot;">​</a></h4><h5 id="定长字节数组-1" tabindex="-1">定长字节数组 <a class="header-anchor" href="#定长字节数组-1" aria-label="Permalink to &quot;定长字节数组&quot;">​</a></h5><p>声明以后不能改变</p><h5 id="不定长字节数组" tabindex="-1">不定长字节数组 <a class="header-anchor" href="#不定长字节数组" aria-label="Permalink to &quot;不定长字节数组&quot;">​</a></h5><p>属于引用类型，数组长度可更改</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>// 固定长度的字节数组</span></span>
<span class="line"><span>bytes32 public _byte32 = &quot;MiniSolidity&quot;;</span></span></code></pre></div><p>注：byte_其实就是byte32的第一个字节了。</p><h4 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h4><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 用enum将uint 0， 1， 2表示为Buy, Hold, Sell</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ActionSet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Buy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Hold</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sell</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建enum变量 action</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ActionSet action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ActionSet.Buy;</span></span></code></pre></div><h3 id="函数类型-重点" tabindex="-1">函数类型(重点) <a class="header-anchor" href="#函数类型-重点" aria-label="Permalink to &quot;函数类型(重点)&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[, ...]]) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">internal|external|public|private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pure|view|payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">virtual|override</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">modifiers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (&lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">return</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;)]{ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> body</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; }</span></span></code></pre></div><ol><li>函数名</li><li>parameter types[,....]参数</li><li>{internalexternal|public|private}:可见性说明符 public:内外部均可见 private:只能从合约内部访问，继承的也不能用 external:只能从外部访问(但是内部可以通过this.f()来调用) internal:只能从合约内部访问，继承的合约可以用</li><li>[pure|view|payable] 决定函数权限/功能的关键字 被pure修饰的方法里面不能读合约状态变量，也不写 view修饰可读不可写 payalbe就是调用的时候可以转账(默认是往往合约里面转账)，这里教程说的太简单了，其实意思是函数在调用时可以接收函数，我猜测是先转到合约账户里，如果有需要的话转到指定账户地址(方法体中实现)</li><li>[virtual|override] 方法是否可以被重写</li><li><code>&lt;modifiers&gt;</code> 函数修饰器，相当于装饰器模式的在语言中直接体现了</li><li><code>&lt;function body&gt; 函数体。</code></li></ol><h4 id="函数输出" tabindex="-1">函数输出 <a class="header-anchor" href="#函数输出" aria-label="Permalink to &quot;函数输出&quot;">​</a></h4><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 返回多个变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> returnMultiple</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>returns定义了函数应该返回什么样的形式，而return返回了实际的值。</p><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h3><h4 id="数组array" tabindex="-1">数组Array <a class="header-anchor" href="#数组array" aria-label="Permalink to &quot;数组Array&quot;">​</a></h4><p>用来存储一组数据(整数、字节，地址等等)</p><h5 id="固定长度数组" tabindex="-1">固定长度数组 <a class="header-anchor" href="#固定长度数组" aria-label="Permalink to &quot;固定长度数组&quot;">​</a></h5><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 固定长度 Array</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] array1;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] array2;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] array3;</span></span></code></pre></div><h5 id="可变长度数组" tabindex="-1">可变长度数组 <a class="header-anchor" href="#可变长度数组" aria-label="Permalink to &quot;可变长度数组&quot;">​</a></h5><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 可变长度 Array</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] array4;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] array5;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] array6;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> array7;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//bytes比较特殊，是数组，但是不用加[]，单字节要用bytes或者bytes1</span></span></code></pre></div><h5 id="数组常用成员" tabindex="-1">数组常用成员 <a class="header-anchor" href="#数组常用成员" aria-label="Permalink to &quot;数组常用成员&quot;">​</a></h5><p>length、push()、push(x)和pop()</p><h4 id="结构体struct" tabindex="-1">结构体struct <a class="header-anchor" href="#结构体struct" aria-label="Permalink to &quot;结构体struct&quot;">​</a></h4><p>通过结构体的形式定义新的类型。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> score;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="映射类型" tabindex="-1">映射类型 <a class="header-anchor" href="#映射类型" aria-label="Permalink to &quot;映射类型&quot;">​</a></h3><p>非常常见，就是哈希表。</p><h4 id="映射mapping" tabindex="-1">映射Mapping <a class="header-anchor" href="#映射mapping" aria-label="Permalink to &quot;映射Mapping&quot;">​</a></h4><p>声明映射的格式为 <code>mapping(_KeyType =&gt; _ValueType)</code></p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idToAddress; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// id映射到地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> swapPair; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 币对的映射，地址到地址</span></span></code></pre></div><h4 id="映射的规则" tabindex="-1">映射的规则 <a class="header-anchor" href="#映射的规则" aria-label="Permalink to &quot;映射的规则&quot;">​</a></h4><ol><li>_KeyType只能选择Solidity内置的值类型，比如uint，address等。</li><li>映射的存储位置必须是storage,因此用于合约的状态变量(这个存储位置后面我们会提到)</li><li>如果映射声明为public，那么Solidity会自动给你创建一个getter函数，可以通过Key来查询对应的Value。</li><li>给新映射的键值对赋值的语法位_Var[_Key]=_Value;</li></ol><h3 id="常数" tabindex="-1">常数 <a class="header-anchor" href="#常数" aria-label="Permalink to &quot;常数&quot;">​</a></h3><p><code>constant</code>（常量）和 <code>immutable</code>（不变量）。状态变量声明这两个关键字之后，不能在初始化后更改数值。这样做的好处是提升合约的安全性并节省 <code>gas。</code></p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> constant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONSTANT_NUM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//constant需要在声明的时候就初始化</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> immutable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IMMUTABLE_ADDRESS;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//不需要显示初始化，若是显式初始化的话即可声明初始化，也可以构造函数初始化，但是以constructor为准。</span></span></code></pre></div><h2 id="变量数据存储和作用域-重点" tabindex="-1">变量数据存储和作用域(重点) <a class="header-anchor" href="#变量数据存储和作用域-重点" aria-label="Permalink to &quot;变量数据存储和作用域(重点)&quot;">​</a></h2><h3 id="数据位置" tabindex="-1">数据位置 <a class="header-anchor" href="#数据位置" aria-label="Permalink to &quot;数据位置&quot;">​</a></h3><h4 id="storage-重点" tabindex="-1">storage(重点) <a class="header-anchor" href="#storage-重点" aria-label="Permalink to &quot;storage(重点)&quot;">​</a></h4><p>存储在链上，消耗gas最多，也是合约变量中默认的存储位置</p><h4 id="memory-calldata" tabindex="-1">memory&amp;calldata <a class="header-anchor" href="#memory-calldata" aria-label="Permalink to &quot;memory&amp;calldata&quot;">​</a></h4><p>memory:函数里的参数和临时变量一般用memory，存储在内存中，不上链。尤其是<strong>如果返回数据类型是变长的情况下</strong>，必须加memory修饰，例如：string，bytes，array和自定义结构。</p><p>calldata:和memory类似，存储在内存中，不上链。与memory的不同点在<strong>于calldata变量不能修改(immutable)</strong>,一般用户函数的参数。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fCalldata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">calldata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">calldata</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (_x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="数据位置和赋值规则" tabindex="-1">数据位置和赋值规则 <a class="header-anchor" href="#数据位置和赋值规则" aria-label="Permalink to &quot;数据位置和赋值规则&quot;">​</a></h3><p>在不同存储类型相互赋值的时候，有时会产生独立的副本(修改新变量不会影响远变量)，有时会产生引用(修改新变量会影响原变量)，规则如下：</p><ol><li>将storage赋值给storage的时候，会创建引用，改变新变量会影响原变量。<div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 状态变量：数组 x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //声明一个storage的变量 xStorage，指向x。修改xStorage也会影响x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">storage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> xStorage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    xStorage[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li>memory赋值给memory的时候，也会创建引用，修改新变量会影响原变量。</li></ol><p>其他情况下，比如将storage赋值给memory的时候，会创建独立副本，修改新变量不会影响原变量。</p><h3 id="变量作用域" tabindex="-1">变量作用域 <a class="header-anchor" href="#变量作用域" aria-label="Permalink to &quot;变量作用域&quot;">​</a></h3><h4 id="状态变量" tabindex="-1">状态变量 <a class="header-anchor" href="#状态变量" aria-label="Permalink to &quot;状态变量&quot;">​</a></h4><p>存储在链上的变量，所有合约函数都可以访问。这也解释了为什么默认存储位置是storage</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Variables</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="局部变量" tabindex="-1">局部变量 <a class="header-anchor" href="#局部变量" aria-label="Permalink to &quot;局部变量&quot;">​</a></h4><p>函数执行过程中有效的变量，函数退出后，变量无效。不上链，gas低。</p><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h4><p>solidity预留的关键字，他们可以不声明而直接使用。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> blockNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.number;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.data;s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sender,blockNum,datass);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>msg.value 当前交易发送的wei值。</p><p>msg.sender 消息的发送者，也就是调用合约函数的地址。</p><p>msg.data 发起交易的完整calldata。</p><h3 id="全局变量-以太单位和时间单位" tabindex="-1">全局变量-以太单位和时间单位 <a class="header-anchor" href="#全局变量-以太单位和时间单位" aria-label="Permalink to &quot;全局变量-以太单位和时间单位&quot;">​</a></h3><ol><li>以太单位 在基础篇上讲过，solidity中不存在小数点，以0代题为小数点。 wei:1</li><li>时间单位 可以规定一个操作必须在一周内完成</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>seconds: 1</span></span>
<span class="line"><span>minutes: 60 seconds = 60</span></span>
<span class="line"><span>hours: 60 minutes = 3600</span></span>
<span class="line"><span>days: 24 hours = 86400</span></span>
<span class="line"><span>weeks: 7 days = 604800</span></span></code></pre></div><h2 id="变量初始化" tabindex="-1">变量初始化 <a class="header-anchor" href="#变量初始化" aria-label="Permalink to &quot;变量初始化&quot;">​</a></h2><h3 id="值类型默认初始值" tabindex="-1">值类型默认初始值 <a class="header-anchor" href="#值类型默认初始值" aria-label="Permalink to &quot;值类型默认初始值&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _bool; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _string; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _int; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _uint; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _address; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0x0000000000000000000000000000000000000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ActionSet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Buy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Hold</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Sell</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ActionSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _enum; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 第1个内容Buy的索引0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// internal空白函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// external空白函数 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">span</span></span></code></pre></div><h3 id="引用类型默认初始值" tabindex="-1">引用类型默认初始值 <a class="header-anchor" href="#引用类型默认初始值" aria-label="Permalink to &quot;引用类型默认初始值&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Reference Types</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _staticArray; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 所有成员设为其默认值的静态数组[0,0,0,0,0,0,0,0]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _dynamicArray; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// \`[]\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _mapping; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 所有元素都为其默认值的mapping</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 所有成员设为其默认值的结构体 0, 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> score; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> student;</span></span></code></pre></div><p><strong>delete操作符</strong></p><p>delete a会让变量a的值变为初始值</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">boolean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _bool2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _bool2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="控制流" tabindex="-1">控制流 <a class="header-anchor" href="#控制流" aria-label="Permalink to &quot;控制流&quot;">​</a></h2><h3 id="控制流-1" tabindex="-1">控制流 <a class="header-anchor" href="#控制流-1" aria-label="Permalink to &quot;控制流&quot;">​</a></h3><p>if-else</p><p>for循环</p><p>while循环</p><p>do-while循环</p><p>三元运算符</p><h2 id="构造函数和修饰器" tabindex="-1">构造函数和修饰器 <a class="header-anchor" href="#构造函数和修饰器" aria-label="Permalink to &quot;构造函数和修饰器&quot;">​</a></h2><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> owner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> initialOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">initialOwner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="修饰器" tabindex="-1">修饰器 <a class="header-anchor" href="#修饰器" aria-label="Permalink to &quot;修饰器&quot;">​</a></h3><p>对于方法添加判断或者增加一些额外功能</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">modifier</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> onlyOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">owner);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  _</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>代onlyOwner修饰符的函数只能被owner地址调用</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> changeOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _newOwner) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> onlyOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_newOwner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><h3 id="事件-1" tabindex="-1">事件 <a class="header-anchor" href="#事件-1" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>其实就是EVM日志的抽象，它有两个特点：</p><p>响应：应用程序(ethers.js)可以通过RPC接口订阅和监听这些事件，并在前端做响应。</p><p>经济：事件是EVM上比较经济的存储数据的方式，每个大概消耗2000 gas;相比之下，链上存储一个新变量至少需要20000 gas。</p><h3 id="声明事件" tabindex="-1">声明事件 <a class="header-anchor" href="#声明事件" aria-label="Permalink to &quot;声明事件&quot;">​</a></h3><p>事件的声明event关键字开头，接着是事件名称，括号里面写好事件需要记录的变量类型和变量名。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> indexed</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> indexed</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="释放事件" tabindex="-1">释放事件 <a class="header-anchor" href="#释放事件" aria-label="Permalink to &quot;释放事件&quot;">​</a></h3><p>可以在函数里面释放事件。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> amount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _balances[from]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _balances[from]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">amount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _balances[to]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">amount;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(from,to,amount);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="evm日志" tabindex="-1">EVM日志 <a class="header-anchor" href="#evm日志" aria-label="Permalink to &quot;EVM日志&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/rayliu445/blogImage/master/blogImage/evm%E6%97%A5%E5%BF%9720250323.png" alt=""></p><h3 id="主题-数据-data" tabindex="-1">主题&amp;数据&amp;data <a class="header-anchor" href="#主题-数据-data" aria-label="Permalink to &quot;主题&amp;数据&amp;data&quot;">​</a></h3><p>日志的第一部分是主题数组，用于描述事件，长度不能超过 <code>4</code></p><p>除了事件哈希，主题还可以包含至多 <code>3</code>个 <code>indexed</code>参数，也就是 <code>Transfer</code>事件中的 <code>from</code>和 <code>to</code>。</p><p>data中存储了不带indexed的数据</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>继承是面向对象编程很重要的组成部分，可以显著减少重复代码。</p><ul><li><code>virtual</code>: 父合约中的函数，如果希望子合约重写，需要加上 <code>virtual</code>关键字。</li><li><code>override</code>：子合约重写了父合约中的函数，需要加上 <code>override</code>关键字。</li></ul><h3 id="简单继承-多重继承" tabindex="-1">简单继承&amp;多重继承 <a class="header-anchor" href="#简单继承-多重继承" aria-label="Permalink to &quot;简单继承&amp;多重继承&quot;">​</a></h3><p>多重继承就是一个子合约有多个父合约</p><h3 id="修饰器的继承-构造函数的继承" tabindex="-1">修饰器的继承&amp;构造函数的继承 <a class="header-anchor" href="#修饰器的继承-构造函数的继承" aria-label="Permalink to &quot;修饰器的继承&amp;构造函数的继承&quot;">​</a></h3><p>修饰器和方法一样，这里构造函数继承比较特殊</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 构造函数的继承</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _a) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>ss</p><ol><li>在继承时声明父构造函数的参数，例如：<code>contract B is A(1)</code></li><li>在子合约的构造函数中声明构造函数的参数，例如：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>   contract C is A {</span></span>
<span class="line"><span>       constructor(uint _c) A(_c * _c) {}</span></span>
<span class="line"><span>   }</span></span></code></pre></div><h3 id="函数的重载和重写" tabindex="-1">函数的重载和重写 <a class="header-anchor" href="#函数的重载和重写" aria-label="Permalink to &quot;函数的重载和重写&quot;">​</a></h3><p>和Java中一样，也是有重载的概念的，即名字相同但是输入参数类型不同的函数可以同时存在(函数签名不同)</p><h3 id="调用父合约的函数" tabindex="-1">调用父合约的函数 <a class="header-anchor" href="#调用父合约的函数" aria-label="Permalink to &quot;调用父合约的函数&quot;">​</a></h3><ol><li>直接调用<div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Yeye.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li>super关键字<div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callParentSuper</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将调用最近的父合约函数，Baba.pop()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ol><h3 id="钻石继承" tabindex="-1">钻石继承 <a class="header-anchor" href="#钻石继承" aria-label="Permalink to &quot;钻石继承&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* 继承树：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  God</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /  \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">Adam Eve</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> \\  /</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">people</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span></code></pre></div><h2 id="抽象合约和接口" tabindex="-1">抽象合约和接口 <a class="header-anchor" href="#抽象合约和接口" aria-label="Permalink to &quot;抽象合约和接口&quot;">​</a></h2><h3 id="抽象合约" tabindex="-1">抽象合约 <a class="header-anchor" href="#抽象合约" aria-label="Permalink to &quot;抽象合约&quot;">​</a></h3><p>合约里至少有一个未实现的函数，即某个函数缺少主体{}中的内容，则合约必须用abstract修饰。</p><h3 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h3><p>对于一组功能的抽象，不实现任何功能。</p><ol><li>不能包含状态变量</li><li>不能包含构造函数</li><li>不能继承除接口外的其他合约</li><li>所有函数都必须是external且不能有函数体</li><li>继承接口的非抽象合约必须实现接口定义的所有功能</li></ol><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><h3 id="error" tabindex="-1">ERROR <a class="header-anchor" href="#error" aria-label="Permalink to &quot;ERROR&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TransferNotOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> transferOwner1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> tokenId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> newOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       revert</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TransferNotOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   _owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newOwner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="require" tabindex="-1">Require <a class="header-anchor" href="#require" aria-label="Permalink to &quot;Require&quot;">​</a></h3><p>gas随着描述异常的字符串长度增加</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> transferOwner2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> tokenId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> newOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Transfer Not Owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   _owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newOwner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="assert" tabindex="-1">Assert <a class="header-anchor" href="#assert" aria-label="Permalink to &quot;Assert&quot;">​</a></h3><p>不能解释抛出异常的原因</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> transferOwner3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> tokenId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> newOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   _owners[tokenId]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newOwner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="库合约" tabindex="-1">库合约 <a class="header-anchor" href="#库合约" aria-label="Permalink to &quot;库合约&quot;">​</a></h2><p>特殊合约，定义的用的library关键字，是一系列函数的合集，为了提升Solidity代码的复用性和减少gas费用。</p><ol><li>不能存在状态变量</li><li>不能够继承或者被继承</li><li>不能接收以太币</li><li>不可以被销毁。</li></ol><h3 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h3><p>using for</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 利用using for指令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Strings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getString1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 库合约中的函数会自动添加为uint256型变量的成员</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>库合约名称调用函数</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 直接通过库合约名调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getString2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_number);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h2><p>其实我感觉有import就可以了，不知道为啥还需要上面库合约，import其实就是在一个文件中引用另一个文件的内容。</p><h3 id="import用法" tabindex="-1">import用法 <a class="header-anchor" href="#import用法" aria-label="Permalink to &quot;import用法&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h2 id="接收eth和发送eth" tabindex="-1">接收ETH和发送ETH <a class="header-anchor" href="#接收eth和发送eth" aria-label="Permalink to &quot;接收ETH和发送ETH&quot;">​</a></h2><h3 id="接收eth" tabindex="-1">接收ETH <a class="header-anchor" href="#接收eth" aria-label="Permalink to &quot;接收ETH&quot;">​</a></h3><h4 id="接收eth函数receive" tabindex="-1">接收ETH函数receive <a class="header-anchor" href="#接收eth函数receive" aria-label="Permalink to &quot;接收ETH函数receive&quot;">​</a></h4><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Received</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 接收ETH时释放Received事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">receive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Received</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="回退函数fallback" tabindex="-1">回退函数fallback <a class="header-anchor" href="#回退函数fallback" aria-label="Permalink to &quot;回退函数fallback&quot;">​</a></h4><p>会在调用合约不存在的函数时被处罚。可用于接收ETH,也可以用于代理合约proxy contract。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> fallbackCalled</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fallbackCalled</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="receive和fallback的区别" tabindex="-1">receive和fallback的区别 <a class="header-anchor" href="#receive和fallback的区别" aria-label="Permalink to &quot;receive和fallback的区别&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>触发fallback() 还是 receive()?</span></span>
<span class="line"><span>           接收ETH</span></span>
<span class="line"><span>              |</span></span>
<span class="line"><span>         msg.data是空？</span></span>
<span class="line"><span>            /  \\</span></span>
<span class="line"><span>          是    否</span></span>
<span class="line"><span>          /      \\</span></span>
<span class="line"><span>receive()存在?   fallback()</span></span>
<span class="line"><span>        / \\</span></span>
<span class="line"><span>       是  否</span></span>
<span class="line"><span>      /     \\</span></span>
<span class="line"><span>receive()   fallback()</span></span></code></pre></div><h3 id="发送eth" tabindex="-1">发送ETH <a class="header-anchor" href="#发送eth" aria-label="Permalink to &quot;发送ETH&quot;">​</a></h3><ol><li><p>transfer 用法是接收发地址.transfer(发送ETH数额)，限制是2300，足够用于转帐，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑，转帐失败会自动revert</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 用transfer()发送ETH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> transferETH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _to, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _to.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(amount);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p>send</p><p>用法是接收方地址.send(发送ETH数额)，send的限制也是2300，和上面面一样，足够用于转账，但对方合约的fallback()或者receive()函数不能实现太复杂的逻辑，send()如果转账失败，不会revert，send()的返回值是bool，代表着转账成功或者失败，需要额外代码处理一下。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">error</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SendFailed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sendETH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _to,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_to.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(amount);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">success){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       revert</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SendFailed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p>call 用法是接收方地址.call{value:发送ETH数额}(&quot;&quot;)。 call没有gas费用限制，需要手动转账失败情况。</p></li></ol><h2 id="调用其他合约" tabindex="-1">调用其他合约 <a class="header-anchor" href="#调用其他合约" aria-label="Permalink to &quot;调用其他合约&quot;">​</a></h2><h3 id="通过合约地址调用" tabindex="-1">通过合约地址调用 <a class="header-anchor" href="#通过合约地址调用" aria-label="Permalink to &quot;通过合约地址调用&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callSetX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _Address,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    OtherContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_Address).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="传入合约变量调用" tabindex="-1">传入合约变量调用 <a class="header-anchor" href="#传入合约变量调用" aria-label="Permalink to &quot;传入合约变量调用&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callGetX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OtherContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _Address) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_Address.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="将地址参数创建为合约变量调用" tabindex="-1">将地址参数创建为合约变量调用 <a class="header-anchor" href="#将地址参数创建为合约变量调用" aria-label="Permalink to &quot;将地址参数创建为合约变量调用&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callGetX2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _Address) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    OtherContract oc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">OtherContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_Address);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">oc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="调用合约并发送" tabindex="-1">调用合约并发送 <a class="header-anchor" href="#调用合约并发送" aria-label="Permalink to &quot;调用合约并发送&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setXTransferETH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> otherContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">payable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">   OtheContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(otherContract).setX{value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value}(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="call-delegatecall" tabindex="-1">call&amp;Delegatecall <a class="header-anchor" href="#call-delegatecall" aria-label="Permalink to &quot;call&amp;Delegatecall&quot;">​</a></h2><p>call不仅可以转账，还可以用来调用其他合约函数</p><h3 id="call的使用规则" tabindex="-1">call的使用规则 <a class="header-anchor" href="#call的使用规则" aria-label="Permalink to &quot;call的使用规则&quot;">​</a></h3><p>目标合约地址.call(字节码);</p><p>abi.encodeWithSignature(&quot;函数签名&quot;,逗号分隔的具体参数);</p><p>另外call在调用合约时可以指定交易发送的ETH数额和gas数额</p><p>目标合约地址.call{value:发送数额,gas:gas数额}(字节码);</p><p>我们直接通过代码来看吧</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callSetX</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _addr,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> success,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_addr.call{value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value}(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encodeWithSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;seteX(uint256)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="delegatecall使用规则" tabindex="-1">Delegatecall使用规则 <a class="header-anchor" href="#delegatecall使用规则" aria-label="Permalink to &quot;Delegatecall使用规则&quot;">​</a></h3><p>solidity中大型项目为了将逻辑结构和存储结构隔离开，就出现了代理合约。</p><p>delegatecall其实就是委托代理调用，用来增强方法???</p><p>代码更加直观</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">funciton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delegatecallSetVars</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _addr,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _num){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> success,byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data)_addr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delegatecall</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">     abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encodeWithSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;setVars(uint256)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>假如说有A,B,C3个合约，正常A-&gt;B-&gt;C的话，那么c的被调用函数的上下文就是B的，但是如果走了代理那么就是A</p><h2 id="create-create2" tabindex="-1">create&amp;create2 <a class="header-anchor" href="#create-create2" aria-label="Permalink to &quot;create&amp;create2&quot;">​</a></h2><p>去中心化交易所uniswap利用工厂合约(PairFactory)创建了无数的币对合约</p><h3 id="create" tabindex="-1">create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create&quot;">​</a></h3><p>就是通过new一个新合约，并传入新合约构造函数所需的参数</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Contract x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Contract{Value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_value}(params);</span></span></code></pre></div><h3 id="极简uniswap" tabindex="-1">极简Uniswap <a class="header-anchor" href="#极简uniswap" aria-label="Permalink to &quot;极简Uniswap&quot;">​</a></h3><p>有两个核心的合约，UniswapV2Pair:币对合约，用于管理币对地址、流动性和买卖;UninswapV2Factory:工厂合约，用于创建新的币对，并管理币对地址。</p><p>这里代码就不放出来了，不然纯抄了哈哈哈</p><h3 id="create2" tabindex="-1">create2 <a class="header-anchor" href="#create2" aria-label="Permalink to &quot;create2&quot;">​</a></h3><p>新地址 = hash(创建者地址, nonce)，这是传统的地址的计算方式，nonce是递增的，导致每次生成的都不一样</p><h4 id="create2如何计算地址" tabindex="-1">create2如何计算地址 <a class="header-anchor" href="#create2如何计算地址" aria-label="Permalink to &quot;create2如何计算地址&quot;">​</a></h4><ol><li>0xFF:一个常数，避免和CREATE冲突</li><li>CreatorAddress:调用CREATE2的当前合约(创建)地址。</li><li>salt(盐):一个创建者指定的bytes32类型的值，它的主要目的是用来影响新创建的合约的地址。</li><li>initcode:新合约的初始字节码(合约的Creation Code和构造函数的参数) 其实就是预先计算出合约的地址，有些时候我们需要升级或替换现有的合约，使用CREATE2可以保证地址部署在相同的地址上。</li></ol><h2 id="删除合约" tabindex="-1">删除合约 <a class="header-anchor" href="#删除合约" aria-label="Permalink to &quot;删除合约&quot;">​</a></h2><p>selfdestruct(_addr); 将合约剩余数额转至调用者。</p><h2 id="abi编码和解码" tabindex="-1">ABI编码和解码 <a class="header-anchor" href="#abi编码和解码" aria-label="Permalink to &quot;ABI编码和解码&quot;">​</a></h2><p>ABI (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准，给前端的也是这个东西。</p><h3 id="常用函数" tabindex="-1">常用函数 <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数&quot;">​</a></h3><p>abi.encode、abi.encodePacked、abi.encodeWithSignature和abi.encodeWithSelector</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ol><li>在合约中，配合call来实现对合约的底层调用</li></ol><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> selector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.getValue.selector;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encodeWithSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(selector, _x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> success, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> returnedData) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">staticcall</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(success);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(returnedData, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><ol start="2"><li>ethers.js常用ABI来实现合约的导入和函数调用</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> wavePortalContract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ethers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(contractAddress, contractABI, signer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">* Call the getAllWaves method from your Smart Contract</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> waves</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wavePortalContract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAllWaves</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h2 id="哈希" tabindex="-1">哈希 <a class="header-anchor" href="#哈希" aria-label="Permalink to &quot;哈希&quot;">​</a></h2><h3 id="keccak256" tabindex="-1">Keccak256 <a class="header-anchor" href="#keccak256" aria-label="Permalink to &quot;Keccak256&quot;">​</a></h3><p><code>Keccak256</code>函数是 <code>Solidity</code>中最常用的哈希函数，用法非常简单：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>哈希 = keccak256(数据);</span></span></code></pre></div><h2 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h2><h3 id="如何使用-1" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用-1" aria-label="Permalink to &quot;如何使用&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用selector来调用函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callWithSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   // 调用elementaryParamSelector函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> success1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">abi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encodeWithSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0x3ec37834</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="methodid和参数" tabindex="-1">methodId和参数 <a class="header-anchor" href="#methodid和参数" aria-label="Permalink to &quot;methodId和参数&quot;">​</a></h3><p>计算一个方法的methodId</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> mintSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bytes4</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> mSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> bytes4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">keccak256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;mint(address)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="try-catch" tabindex="-1">Try Catch <a class="header-anchor" href="#try-catch" aria-label="Permalink to &quot;Try Catch&quot;">​</a></h2><p>只能用于external函数或者public函数或者创建合约时constructor</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> success</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> even.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">onlyEven</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(amount) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _success){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SuccessEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> _success;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> reason){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CatchEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(reasonßß);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,240);function u(s,B,b,m,E,v){const h=e,t=k("ClientOnly");return n(),d("div",null,[D,r(t,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),c(h,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),F])}const P=p(A,[["render",u]]);export{_ as __pageData,P as default};
