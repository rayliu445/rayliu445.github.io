import{_ as p}from"./chunks/ArticleMetadata.d4_nZKBO.js";import{_ as e,D as k,o as n,c as r,I as d,w as g,k as t,a as o,R as y,b as c,e as A}from"./chunks/framework.FHZ5yb6k.js";import"./chunks/md5.0oexlRJv.js";const x=JSON.parse('{"title":"02-对象和类","description":"","frontmatter":{"title":"02-对象和类","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/02-对象和类.md","filePath":"courses/java/01-Java语法入门/02-对象和类.md","lastUpdated":1745473205000}'),D={name:"courses/java/01-Java语法入门/02-对象和类.md"},C=t("h1",{id:"对象和类",tabindex:"-1"},[o("对象和类 "),t("a",{class:"header-anchor",href:"#对象和类","aria-label":'Permalink to "对象和类"'},"​")],-1),u=y(`<p><strong>面向对象程序设计概述OOP(object-oriented programming,OOP)</strong> 传统程序设计：算法+数据结构。<br> 面向对象：将数据放在第一位，然后再考虑操作数据的算法。</p><h2 id="面向对象程序设计" tabindex="-1">面向对象程序设计 <a class="header-anchor" href="#面向对象程序设计" aria-label="Permalink to &quot;面向对象程序设计&quot;">​</a></h2><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><p>可以理解为一个模板</p><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><p>要想使用对象，首先必须构造对象，并指定其初始状态，然后对对象应用方法。 在Java程序语言中，要使用构造器(constructor,或称构造函数)构造新实例。<strong>构造器是一种特殊的方法，用来构造并初始化对象</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> birthday</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>birthday就是对象变量，而new Date()则是一个对象实例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">　deadline;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//deadline　doesn&#39;t refer to any object;</span></span></code></pre></div><p>定义了一个对象变量deadline,它可以引用Date类型的对象。 要认识到最重要的一点：对象变量并没有实际包含一个对象，<strong>它只是引用一个对象。</strong> Date deadline=new Date(); 可以把Java中的对象变量看做类似于Ｃ++的指针。例如， Date birthday; //Java 实际上，等同于 Date * birthday; //C++ Date*指针只有使用new调用才会初始化。就这一点而言，Ｃ++和Java的语法几乎是一样的。 <strong>Java类库中的localDate类</strong> 不要使用构造器来构造LocalDate类的对象，实际上，应当使用静态工厂方法(factory method)，他会代表你调用构造器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">localDate newYearsEve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1999</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newYearEve.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getYear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//1999</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> month</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newYearEve.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getMonthValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> day</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">newYearEve.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDayOfMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//31</span></span></code></pre></div><h4 id="localdate" tabindex="-1">LocalDate <a class="header-anchor" href="#localdate" aria-label="Permalink to &quot;LocalDate&quot;">​</a></h4><h5 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><p>static LocalDate <strong>now()</strong> 构造一个表示当前日期的对象 static LocalDate <strong>of(int year,int month,int day)</strong> 构造一个表示给定日期的对象 int <strong>getYear()</strong> int <strong>getMonthValue()</strong> int <strong>getDayOfMonth()</strong> 得到当前日期的年、月和日 DayofWeek <strong>getDayOfWeek()</strong> 得到当前日期是星期几，作为DayOfWeek类的一个实例返回。调用<strong>getValue</strong>来得到１-7之间的一个数，表示这是星期几，１表示星期一，７表示星期日 LocalDate <strong>plusDays(int n)</strong> LocalDate <strong>minusDays(int n)</strong> 生成当前日期之后或之前n天的日期</p><h4 id="更改器方法和访问器方法" tabindex="-1">更改器方法和访问器方法 <a class="header-anchor" href="#更改器方法和访问器方法" aria-label="Permalink to &quot;更改器方法和访问器方法&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> aThousandDaysLater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> YearEve.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">plusDays</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>plusDays方法会生成一个新的LocalDate对象，然后把这个新对象赋给aThousandDaysLater变量，原来的对象不做任何改动。 在字符串上调用toUpperCase时，这个字符串仍然保持不变，会返回一个大写的字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GregorianCalender</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> someday</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> GregorianCalendar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1999</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//odd feature of that class:month numbers go from 0 to 11</span></span></code></pre></div><p>与LocalDate.plusDays方法不同，GregorianCalendar.add方法是一个__更改器方法(mutator method)<strong>。调用这个方法之后，他不再是新年前夜 相反，只访问对象而不修改对象的方法有时称为__访问器方法</strong></p><h3 id="识别类" tabindex="-1">识别类 <a class="header-anchor" href="#识别类" aria-label="Permalink to &quot;识别类&quot;">​</a></h3><p>Java语言中，没有所谓的”顶部“，从代码角度来说，我们不用先去写main()方法，而是从类开始，再为各个类添加方法。</p><h3 id="类之间的关系" tabindex="-1">类之间的关系 <a class="header-anchor" href="#类之间的关系" aria-label="Permalink to &quot;类之间的关系&quot;">​</a></h3><p>依赖 聚合 继承</p><h2 id="使用预定义类" tabindex="-1">使用预定义类 <a class="header-anchor" href="#使用预定义类" aria-label="Permalink to &quot;使用预定义类&quot;">​</a></h2><p>Java语言中已经定义好的类，可以直接使用，方便我们快速开发。</p><h2 id="用户自定义类" tabindex="-1">用户自定义类 <a class="header-anchor" href="#用户自定义类" aria-label="Permalink to &quot;用户自定义类&quot;">​</a></h2><p><strong>Employee类</strong><strong>多个源文件的使用</strong><strong>剖析Employee类</strong><strong>从构造器开始</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Empoyee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String n,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> year,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> month,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> day){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    hireDay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(year,month,year);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>构造器与类同名 每个类可以有一个以上的构造器。 构造器可以有０个、１个或者多个参数。 构造器没有返回值。 <strong>构造器总是伴随着new操作符一起使用</strong>。 Java构造器的工作方式与C++一样。但是，要记住<strong>所有的Java对象都是在堆中构造的，构造器总是结合new操作符一起使用</strong>。C++程序员最易犯的错误就是忘记new操作符: Employee number007(&quot;James Bond&quot;,100000,1,1); //C++,not　Java 这条语句在Ｃ++中能够正常运行，但在Java中却不行。 警告：不要在构造器中定义与实例字段同名的局部变量。例如，下面的构造器将不会设置salary。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String n,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">n; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//ERROR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//ERROR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>Java10中，如果可以从变量的初始值推到出他们的类型，那么可以用var关键字声明局部变量，而无须指定类型。例如，可以不这样声明： Employee harry=new Employee(&quot;Harry Hacker&quot;,50000,1989,10,1); var harry =new Employee(&quot;Harry hacker&quot;,50000,1989,10,1); <strong>用var声明局部变量</strong> var harry=new Employee(&quot;Harry Hacker&quot;,5000,1989,10,1); <strong>使用null引用</strong> &quot;宽容型&quot;</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String n,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> year,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> month,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> day){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Objects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">requiredNonNullElse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;unkown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>也就是说，在构造方法中会对name进行检查，会进行提示 &quot;严格型&quot; 干脆拒绝null参数</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String n,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> year,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> month,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> day){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Objects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">requireNonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;The name cannot be null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>隐式参数和显示参数</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> raiseMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> byParent){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> raise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">byParent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">raise;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>number007</strong>.raiseMoney(5); raiseMoney方法有两个参数。第一个参数称为<strong>隐式(implicit)参数，是出现在方法名之前的Employee类型的对象</strong>实例。第二个参数是位于方法名后面括号中的数值，这是一个显式(explicit)参数。(有人把隐式参数称为方法调用的目标或者接收者。) 上面的方法可以改写成如下方式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> raiseMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> byParent){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> raise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">byParent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">raise;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>封装的优点</strong> 想要获得或者设置实例字段的值，需要提供下面三项内容:</p><blockquote><p>一个私有的数据字段 一个公共的字段访问器方法 一个公共的字段更改器方法</p></blockquote><p><strong>注意</strong></p><p>不要编写返回可变引用的的访问器方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hireDay;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Date </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHireDay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   		return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hireDay; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>很明显，我们在Employee中<strong>定义的私有属性hireDay,不希望被外部在位置情况下修改，但是我们getHireDay()方法中返回了hireDay,意味着其他变量可以保存这个引用</strong>，从而导致不安全。 经验来说，如果需要返回一个可变数据字段的副本，就应该使用clone。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Date </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getHireDay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Date)hireDay.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="基于类的权限访问" tabindex="-1">基于类的权限访问 <a class="header-anchor" href="#基于类的权限访问" aria-label="Permalink to &quot;基于类的权限访问&quot;">​</a></h3><p>1.对于public修饰符，它具有最大的访问权限，<strong>可以访问任何一个在CLASSPATH下的类，接口，异常等</strong>。它往往对外也就是对象或者接口的形式。 2.对于protected修饰符，它主要的作用就是用来保护子类的。<strong>子类可以访问,它相当于传递给子类一种继承的东西。</strong> 3.对于default来说，有的时候也称为friendly，它是针对本包访问而设计的，<strong>任何处于本包下的类，接口和异常等</strong>，都可以互相访问，即使是父类没有用protected修饰的成员也可以。 4.对于private来说，<strong>它的访问权限仅限于类的内部，是一种封装的体现</strong>，例如，大多数的成员变量都是修饰为private,他们不希望被其他任何外部的类访问。</p><h3 id="final实例字段" tabindex="-1">final实例字段 <a class="header-anchor" href="#final实例字段" aria-label="Permalink to &quot;final实例字段&quot;">​</a></h3><p>可以将<strong>实例字段定义为final,这样的字段必须在构造对象时初始化</strong>。也就是说，必须确保每一个构造器执行之后，这个字段的值已经设置，并且以后不能再修改这个字段。如下，将Employee类中的name字段设置为final,这个值以后不允许修改，即没有setName方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>final修饰符对于类型为基本类型或者<strong>不可变类</strong>(如果类中的所有方法都不会改变其对象，就称为不可变类)的字段尤为有用。</p><p>对于可变的类，使用final修饰符反而会引起混乱，如下:</p><p>private final StringBuilder evaluations; 它在Employee类的构造初始化为 evaluations=new StringBuilder(); <strong>final关键字只是表示存储在evaluations变量中的对象引用不会再指向另一个不同的StringBuilder对象</strong>。不过这个对象可以更改:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> giveGoldStar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	evaluations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;:Gold star!</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="静态字段和静态方法" tabindex="-1">静态字段和静态方法 <a class="header-anchor" href="#静态字段和静态方法" aria-label="Permalink to &quot;静态字段和静态方法&quot;">​</a></h2><h3 id="静态字段" tabindex="-1">静态字段 <a class="header-anchor" href="#静态字段" aria-label="Permalink to &quot;静态字段&quot;">​</a></h3><p>如果将一个字段定义为static,每个类只有一个这样的字段。什么意思呢，就是说，<strong>对于非静态的实例字段，每个对象在堆中都有自己的一个副本</strong>。但是对于静态字段来说，这个类的所有实例将共享一个nextId字段。即使没有Employee对象，静态字段nextId也存在。它属于类而不属于任何单个的对象(静态字段也被称为类字段)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="静态常量" tabindex="-1">静态常量 <a class="header-anchor" href="#静态常量" aria-label="Permalink to &quot;静态常量&quot;">​</a></h3><p>使用的比较多，例如System.out</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PrintStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">....;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上面使用了final关键字，不允许对out指向新的引用。</p><h3 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><p>静态方法是不在对象上执行的方法。例如,Math类的pow的方法就是一个静态方法，在运行时他不需要Math类的对象(也就是说没有隐式参数)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getNextId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//return static field 返回的是静态字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>静态方法不能访问实例字段，因为它不能在对象上进行操作</strong>。</p><p>可以提供类名来调用这个方法 int n =Employee.getNextId(); 下面两种情况可以使用静态方法 1.方法不需要访问对象状态，因为它需要的所有参数都通过显式参数提供(例如：Math.pow()) 2.方法只需要访问类的静态字段(例如，Employee.getNextId())</p><h3 id="工厂方法" tabindex="-1">工厂方法 <a class="header-anchor" href="#工厂方法" aria-label="Permalink to &quot;工厂方法&quot;">​</a></h3><p>静态方法还有另一种常见的用途，类似LocalDate和NumberFormat的类使用静态工厂方法(factory method)来构造对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">NumberFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currencyFormat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">NumberFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCurrencyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">NumberFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> percentFormat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">NumberFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPercentInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(currencyFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//prints　$0.10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(percentFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//prints 10%</span></span></code></pre></div><p>getCurrencyInstance()就是一个静态方法，生成了一个新的对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> NumberFormat </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCurrencyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Locale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Locale.Category.FORMAT),CURRENCYSTYLE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上面是getInstance的源码，可以看到定义的是final static 为什么不使用构造器？？？</p><p>无法命名构造器，<strong>这里我们希望返回两个实例，一个是货币实例，一个是百分比实例，所以我们需要不同的对象定义</strong>，显然和构造器只能和类同步是相违背的。 使用构造器时，无法改变所构造的对象的实例，而工厂方法实际上将返回<strong>DecimalForamt类的对象</strong>，这是NumberFormat的一个子类</p><h3 id="main方法" tabindex="-1">main方法 <a class="header-anchor" href="#main方法" aria-label="Permalink to &quot;main方法&quot;">​</a></h3><p>这里有两个小技巧</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{zengqiang</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>1.如果只想对Employee进行测试 java Employee 2.如果Empoyee只是程序的一部分，那么 java Application</p><h2 id="方法参数" tabindex="-1">方法参数 <a class="header-anchor" href="#方法参数" aria-label="Permalink to &quot;方法参数&quot;">​</a></h2><p>Java中的参数传递都是按值调用，也就是说，方法得到的是所有参数值的一个副本。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> tripleValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>执行过程</p><p>1.x初始化为percent值的一个副本</p><p>2.执行方法中的操作，但是percent仍然是10</p><p>3.这个方法结束后，参数变量x不再使用 <img src="https://i.loli.net/2021/04/14/dyTMNPl8F5ImuGc.png" alt="选区_153.png"><strong>两种类型的方法参数</strong> 1.基本数据类型(数值、布尔值)</p><p>2.对象引用</p><p>一个方法不能修改基本类型的参数，而对象引用作为参数就不同了，我们可以将对象的状态进行修改</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> tripleSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Employee x){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">raiseSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>当调用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">harry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">tripleSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(harry);</span></span></code></pre></div><p><img src="https://i.loli.net/2021/04/14/PAK3rEXW4Yutw1R.png" alt="选区_154.png"> 执行过程： 1.x初始化为harry的值的一个副本，这里就是一个对象引用,由图上可以看出指向同一个对象;</p><p>2.raiseSalary方法应用于这个对象引用。x和harry同时会引用的那个Employee对象的工资提高了200%;</p><p>3.方法结束后，参数变量x不再使用。当然，对象变量harry继续引用那个工资增至3倍的员工对象。</p><p><strong>交换对象方法，交换的只是对象的引用副本</strong><img src="https://i.loli.net/2021/04/14/m4fDR9PJ1YBKEcp.png" alt="选区_155.png"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">swap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a,b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> swap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Employee x,Employee y){ </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//doesn&#39;t work</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//x refers to Alice,y to Bob</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">temp;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //now x refers to Bob,y to Alice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>这个方法并没有改变存储在变量a和b中的对象引用</strong>。</p><p>方法的参数被初始化为两个对象引用的副本，这个方法调用的是这两个副本，在方法执行完之后，x和y消失。</p><h3 id="对象方法能做什么和不能做什么" tabindex="-1">对象方法能做什么和不能做什么 <a class="header-anchor" href="#对象方法能做什么和不能做什么" aria-label="Permalink to &quot;对象方法能做什么和不能做什么&quot;">​</a></h3><p>1.方法不能修改参数的类型 2.方法可以修改对象的状态 3.方法不能让一个对象参数引用一个新的对象，在上面的案例中，swap方法交换的也只是对象的副本，不难理解。</p><h2 id="对象构造" tabindex="-1">对象构造 <a class="header-anchor" href="#对象构造" aria-label="Permalink to &quot;对象构造&quot;">​</a></h2><h3 id="_1-重载" tabindex="-1">1.重载 <a class="header-anchor" href="#_1-重载" aria-label="Permalink to &quot;1.重载&quot;">​</a></h3><p>如果多个方法出现了<strong>相同的名字、不同的参数</strong>,便出现了重载。</p><p>重载解析：编译器挑选出调用哪个方法，它用<strong>各个方法首部中的参数类型与特定方法调用中所使用的值类型进行匹配来挑选出正确的方法(这句话的意思就是只看重载的参数值类型)</strong>，如果编译器找不到匹配的参数，就会产生编译时的错误，因为根本不存在匹配，或者没有一个比其他的更好。 java允许重载任何方法，而不只是构造器方法。因此，要完整地描述一个方法，需要指定方法名以及参数类型。这叫做方法的签名(signature)</p><h3 id="_2-默认字段初始化" tabindex="-1">2.默认字段初始化 <a class="header-anchor" href="#_2-默认字段初始化" aria-label="Permalink to &quot;2.默认字段初始化&quot;">​</a></h3><p>如果没有在构造器中显示地为字赋初始值，那么就会被自动地赋为默认值：数值为0、布尔值为false、对象引用为null。 <strong>注意：</strong> 这是局部变量和字段的一个重要区别</p><h3 id="_3-无参数的构造器" tabindex="-1">3.无参数的构造器 <a class="header-anchor" href="#_3-无参数的构造器" aria-label="Permalink to &quot;3.无参数的构造器&quot;">​</a></h3><p>如果类中至少提供了一个构造器，但是没有提供无参数的构造器，那么构造对象时如果不提供参数就是不合法的 当没有其他构造函数的时候，你才会得到一个默认的无参构造函数。</p><h3 id="_4-显式字段初始化" tabindex="-1">4.显式字段初始化 <a class="header-anchor" href="#_4-显式字段初始化" aria-label="Permalink to &quot;4.显式字段初始化&quot;">​</a></h3><p>通过重载类的构造方法，可以采用多种形式设置类的实例字段的初始状态</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上面的name就进行了显式初始化，经验告诉我们，显示初始化总是好的 初始值不一定是常量值，下面的例子中，就是利用方法调用初始化一个字段</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">assignId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> assignId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">nextId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_5-参数名" tabindex="-1">5.参数名 <a class="header-anchor" href="#_5-参数名" aria-label="Permalink to &quot;5.参数名&quot;">​</a></h3><h3 id="_6-调用另一个构造器" tabindex="-1">6.调用另一个构造器 <a class="header-anchor" href="#_6-调用另一个构造器" aria-label="Permalink to &quot;6.调用另一个构造器&quot;">​</a></h3><p>this指示一个方法的隐式参数，还有另一个含义 如果构造器的第一个语句形如this(...),这个构造器将调用同一个类的另一个构造器</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> money;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String s,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Employee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] args){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><p>先进入到this调用另一个构造函数中去，最后返回初始化对象 上面的代码执行之后，首先会进行字段默认初始化，如下图 <img src="https://i.loli.net/2021/04/14/NYCUGRpur3IDjvV.png" alt="选区_156.png"></p><h3 id="_7-初始化块" tabindex="-1">7.初始化块 <a class="header-anchor" href="#_7-初始化块" aria-label="Permalink to &quot;7.初始化块&quot;">​</a></h3><p>初始化数据字段的方法(也就是说给字段赋值)</p><p>1.在构造器中设置值 2.显式地声明值 3.初始化块</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    //object initialization block  初始化块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    	id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">nextId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    	name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    	name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>首先运行初始化块，然后才运行构造器的主体部分。</p><h4 id="调用构造器的具体处理步骤" tabindex="-1">调用构造器的具体处理步骤： <a class="header-anchor" href="#调用构造器的具体处理步骤" aria-label="Permalink to &quot;调用构造器的具体处理步骤：&quot;">​</a></h4><p>1.如果调用了另一个构造器，则会基于提供的参数执行第二个构造函数。 2.如果1不成立，</p><pre><code>a.所有的数据字段初始化为其默认值;
b.按照在类中声明的顺序，执行**字段初始化方法**和**初始化块**
</code></pre><p>3.执行构造函数主体代码</p><p>可以通过提供一个初始值，或者使用一个静态的初始化块来给静态字段赋值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>如果静态字段需要复杂的初始化代码，那么可以使用静态的初始化块。</p><p>将代码放在一个块中，并标记为static。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//static initialzation block</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> generator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    nextId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">generator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在类第一次加载的时候，将会进行静态字段的初始化。与实例字段一样，除非将静态字段显式地赋值，否则会默认赋值0，false或者null。<strong>所有的静态字段初始方法以及静态初始化块都将依照类声明中出现的顺序执行</strong>。</p><h5 id="常用api-1" tabindex="-1">常用API <a class="header-anchor" href="#常用api-1" aria-label="Permalink to &quot;常用API&quot;">​</a></h5><h6 id="java-util-random" tabindex="-1">java.util.Random <a class="header-anchor" href="#java-util-random" aria-label="Permalink to &quot;java.util.Random&quot;">​</a></h6><h6 id="random-构造一个新的随机数" tabindex="-1">Random() 构造一个新的随机数 <a class="header-anchor" href="#random-构造一个新的随机数" aria-label="Permalink to &quot;Random() 构造一个新的随机数&quot;">​</a></h6><h6 id="int-nextint-int-n-返回一个0-n-1之间的随机数" tabindex="-1">int nextInt(int n) 返回一个0～n-1之间的随机数 <a class="header-anchor" href="#int-nextint-int-n-返回一个0-n-1之间的随机数" aria-label="Permalink to &quot;int nextInt(int n) 返回一个0～n-1之间的随机数&quot;">​</a></h6><h2 id="包" tabindex="-1">包 <a class="header-anchor" href="#包" aria-label="Permalink to &quot;包&quot;">​</a></h2><h3 id="包名" tabindex="-1">包名 <a class="header-anchor" href="#包名" aria-label="Permalink to &quot;包名&quot;">​</a></h3><p>使用包名是为了类的唯一性。为了保证包名的唯一性，要用一个因特网域名(唯一)的逆序形式来作为包名。</p><h4 id="完全限定名" tabindex="-1">完全限定名 <a class="header-anchor" href="#完全限定名" aria-label="Permalink to &quot;完全限定名&quot;">​</a></h4><p>先考虑一个域名horstman.com,再追加工程名corejava,再将Employee类放在这个包里，这个类的“完全限定名”就是com.horstman.corejava.Employee。</p><h3 id="类的导入" tabindex="-1">类的导入 <a class="header-anchor" href="#类的导入" aria-label="Permalink to &quot;类的导入&quot;">​</a></h3><p>在编译器的角度上java.lang和java.lang.jar是相互独立的(也就是说嵌套的包是独立的)。</p><p>一个类可以使用所属包中的所有类，以及其他包中的公共类。</p><h3 id="静态导入" tabindex="-1">静态导入 <a class="header-anchor" href="#静态导入" aria-label="Permalink to &quot;静态导入&quot;">​</a></h3><p><strong>可以允许导入静态方法和静态字段，而不只是类</strong> import static java.lang.System.*; 就可以使用System类的静态方法和静态字段，而不必加类名前缀 out.println(&quot;Goobye,world!!&quot;); exit(0);</p><h3 id="在包中增加类" tabindex="-1">在包中增加类 <a class="header-anchor" href="#在包中增加类" aria-label="Permalink to &quot;在包中增加类&quot;">​</a></h3><p><strong>如果没有在源文件中放置package语句，这个源文件中类就属于无名包</strong>。 将源文件放到完整包名匹配的子目录中，因为java中的类是强依赖包。例如,com.horstmann.corejava包中所有源文件应该也放置在子目录com/horstman/corejava中(.java文件)。编译器将类文件也放在相同的目录结构中。(.class文件) java命令 src包下的类路径</p><h3 id="类路径" tabindex="-1">类路径 <a class="header-anchor" href="#类路径" aria-label="Permalink to &quot;类路径&quot;">​</a></h3><p>类存储在文件系统的子目录中。<strong>类的路径必须与包名匹配</strong>。</p><p>为了使类能够被多个程序共享，需要做到下面几点：</p><p>1.把类文件放到一个目录中，</p><p>例如/home/user/classdir。需要注意，这个目录是包树状结构的基目录。如果希望增加</p><p>com.horstman.corejava.Employee类，那么Employee类文件就必须位于子目</p><p>录/home/user/classdir/com/horstman/corejava中 2.将JAR文件放在一个目录中，</p><p>例如：/home/user/archives。 3.设置类路径(class path)。</p><p>类路径是所有包含类文件的路径的集合。</p><p>在unix环境中，类路径中的各项之间用冒号(:)分隔：</p><p>/home/user/classdir:.:/home/user/archives/archive.jar</p><p>而在windows环境中，则以分号(;)分隔</p><p>C:|classdir;,;C:\\archives\\archive.jar</p><h3 id="设置类路径" tabindex="-1">设置类路径 <a class="header-anchor" href="#设置类路径" aria-label="Permalink to &quot;设置类路径&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -classpath</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /home/user/classdir:.:/home/user/archives/archive.jar</span></span></code></pre></div><p>总结：<strong>在我们设置了类路径之后，java编译器总是在当前的目录中查找对象，但是jvm虚拟机仅在类路径中包含&quot;.&quot;目录的时候才查看当前目录</strong>。如果没有设置类路径的话，那么默认会在当前目录下进行查找，但是如果设置了类路径但是类路径中没有&quot;.&quot;的话那么类可以编译但无法运行。 虚拟机搜寻com.horstmann.corejava.Employee类文件。它首先会查找Java API类。那里找不到相应的类文件，所以查看类路径。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/home/user/classdir/com/horstmann/corejava/Employee.class(对应上面第一步</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">com/horstmann/corejava/Employee.class(从当前目录开始</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">com/horstmann/corejava/Employee.class(/home/user/archives/archive.jar中</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="jar文件" tabindex="-1">JAR文件 <a class="header-anchor" href="#jar文件" aria-label="Permalink to &quot;JAR文件&quot;">​</a></h2><p><strong>java归档文件</strong>，可以含有类文件和子目录，也可以包含诸如图像和声音等其他类型的文件。此外，JAR文件是压缩的，它使用了我们熟悉的zip压缩格式。</p><p><img src="https://i.loli.net/2021/04/15/yAS6qtJMFbRlDNL.png" alt="选区_157.png"><strong>清单文件</strong> 每个jar包下有一个清单文件，清单文件被命名为MANIFEST.MF，描述归档文件的特殊性，如上图，在META-INF下</p><h3 id="jar命令" tabindex="-1">jar命令 <a class="header-anchor" href="#jar命令" aria-label="Permalink to &quot;jar命令&quot;">​</a></h3><h4 id="创建jar文件" tabindex="-1">创建jar文件 <a class="header-anchor" href="#创建jar文件" aria-label="Permalink to &quot;创建jar文件&quot;">​</a></h4><p>jar cvf jarFileName file1 file2...</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">jar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cvf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> CalculatorClasses.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.class</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> icon.gif</span></span></code></pre></div><p>具体的jar命令参数可以看书来进行学习。</p><h4 id="为jar文件创建清单文件" tabindex="-1">为jar文件创建清单文件 <a class="header-anchor" href="#为jar文件创建清单文件" aria-label="Permalink to &quot;为jar文件创建清单文件&quot;">​</a></h4><p>每个JAR文件害包含一个<strong>清单文件</strong>(manifest),用于描述归档文件的特殊属性。</p><p>清单文件被命名为MANIFEST.MF。它位于JAR文件的一个特殊的META-INF子目录中。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">jar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cfm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> manifest.mf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> com/company/mypkg/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.class</span></span></code></pre></div><p>manifest.md需要自己创建,并且要在文件中写明这两个属性:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Manifest-Version: 1.0</span></span>
<span class="line"><span>Main-class: yourClass</span></span></code></pre></div><p>注意:这个文件必须要以换行符为结尾。</p><p>想要对MANIFEST进行更新的话,那么需要执行以下命令:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">jar ufm MyArchive.jar manifestr.mf</span></span></code></pre></div><h4 id="可执行jar文件" tabindex="-1">可执行jar文件 <a class="header-anchor" href="#可执行jar文件" aria-label="Permalink to &quot;可执行jar文件&quot;">​</a></h4><p>可以使用jar命令中的e选项指定程序的入口点，即<strong>通常需要在调用Java程序启动器时启动器是定的类</strong>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">jar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cvfe</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> MyProgram.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> com.mycompany.mypkg.MainAppClass</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span></span></code></pre></div><p>或者，可以在清单文件中指定程序的主类，包括以下形式的语句:</p><p>Main-Class:com.mycompany.mypkg.MainAppClass</p><p>不论使用哪一种方法，用户可以简单地通过下面的命令来启动程序:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> MyProgram.jar</span></span></code></pre></div><h3 id="多版本jar文件" tabindex="-1">多版本JAR文件 <a class="header-anchor" href="#多版本jar文件" aria-label="Permalink to &quot;多版本JAR文件&quot;">​</a></h3><h2 id="文档注释" tabindex="-1">文档注释 <a class="header-anchor" href="#文档注释" aria-label="Permalink to &quot;文档注释&quot;">​</a></h2><p>使用”//“进行单行注释</p><p>使用“*“进行多行注释</p><h2 id="类设计技巧" tabindex="-1">类设计技巧 <a class="header-anchor" href="#类设计技巧" aria-label="Permalink to &quot;类设计技巧&quot;">​</a></h2><ol><li>一定要数据进行私有化</li><li>一定要对数据进行初始化 切记一定要初始化局部变量</li><li>不要在类中使用过多的基本类型 可以用其他的类来替换多个基本类型</li><li>不是所有的字段都需要单独的字段访问器和字段更改器 例如类中的日期</li><li>分解有过多职责的类</li><li>类名和方法名要体现它的职责</li><li>优先使用不可变的类 LocalDate以及Java.time包中其他的类是不可变的。</li></ol>`,195);function F(s,m,B,v,E,b){const h=p,l=k("ClientOnly");return n(),r("div",null,[C,d(l,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),c(h,{key:0,article:s.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),u])}const P=e(D,[["render",F]]);export{x as __pageData,P as default};
