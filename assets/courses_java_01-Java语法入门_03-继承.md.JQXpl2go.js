import{_ as e}from"./chunks/ArticleMetadata.EniEqKqn.js";import{_ as p,D as k,o as t,c as r,I as d,w as g,k as n,a as o,R as A,b as y,e as c}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const x=JSON.parse('{"title":"03-继承","description":"","frontmatter":{"title":"03-继承","author":"Ray","date":"2020/10/02 21:30","categories":["Java生态"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/03-继承.md","filePath":"courses/java/01-Java语法入门/03-继承.md","lastUpdated":1742489594000}'),C={name:"courses/java/01-Java语法入门/03-继承.md"},D=n("h1",{id:"继承",tabindex:"-1"},[o("继承 "),n("a",{class:"header-anchor",href:"#继承","aria-label":'Permalink to "继承"'},"​")],-1),B=A(`<p>基本思想是可以<strong>基于已有的类创建新的类，因为这样做的话(继承)就可以复用已创建的类的方法，而且可以增加一些新的方法和字段，使新类能够适应新的情况</strong><strong>反射，反射是指在程序运行期间更多地了解类及其属性的能力</strong>，反射是一个功能强大的特性，也是成为高阶程序员的必经之路</p><h2 id="类、超类和子类" tabindex="-1">类、超类和子类 <a class="header-anchor" href="#类、超类和子类" aria-label="Permalink to &quot;类、超类和子类&quot;">​</a></h2><p>Employee只需要领薪水，而Manager完成业绩之后还可以领取奖金，所以我们需要拓展程序功能，但是又要复用原来的类。 关键字<strong>extends</strong>相当于C++的**😗*(冒号)</p><h3 id="定义子类" tabindex="-1">定义子类 <a class="header-anchor" href="#定义子类" aria-label="Permalink to &quot;定义子类&quot;">​</a></h3><p>超类和子类的概念来自于计算机科学与数学理论中集合语言的术语。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bonus;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setBonus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> bonus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">   		this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.bonus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bonus;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以看到Manager中有自己独有的方法setBonus()，这就是在基类上进行拓展，但是子类中也可使用getName和getHireDay等方法，类似的，从超类中还继承了name、salary和hireDay这几个字段，再加上的自己的bonus。</p><h3 id="覆盖方法" tabindex="-1">覆盖方法 <a class="header-anchor" href="#覆盖方法" aria-label="Permalink to &quot;覆盖方法&quot;">​</a></h3><p>超类中的方法不一定适用，需要自己修改 比如，Manager返回薪水和工资的总和</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bonus; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//won&#39;t work</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这样编写代码是不行的，为什么，因为只有类Employee方法才能直接访问Employee类的私有字段。这意味着子类也不能访问salary字段，如果Manager类的方法想要访问那些私有字段，就要使用公共接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baseSalary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//still won&#39;t work</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baseSalary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bonus;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这段代码也存在问题，getSalary()方法，我们想要调用超类中的方法，但是我们自己也有一个这样的方法(而且是正在实现的)，所以就会无限次的调用自己，直到整个程序崩溃 <strong>super关键字</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baseSalary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> baseSalary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bonus;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>重点</strong> 有些人认为super与this引用是类似的概念，实际上，这样并不恰当。因为super不是一个对象的引用，例如，不能将值super赋给另一个对象变量，他只是一个<strong>指示编译器调用超类方法</strong>的特殊关键字。 Java中使用super,而C++中使用::</p><h4 id="方法重写和方法重载的区别" tabindex="-1">方法重写和方法重载的区别 <a class="header-anchor" href="#方法重写和方法重载的区别" aria-label="Permalink to &quot;方法重写和方法重载的区别&quot;">​</a></h4><p>首先我们来看一个方法都有什么要素:</p><p>权限修饰、静态/动态修饰、返回值类型、方法名、参数列表</p><p>重写是在子类中去重新实现父类,所以他需要相同的<strong>返回值类型、方法名和参数列表</strong>，但是<strong>允许子类的权限不超过父类</strong>。</p><p>重载是在一个类中，方法名相同但是参数列表不同。</p><h5 id="为什么重写的子类方法的权限要大于父类方法" tabindex="-1">为什么重写的子类方法的权限要大于父类方法 <a class="header-anchor" href="#为什么重写的子类方法的权限要大于父类方法" aria-label="Permalink to &quot;为什么重写的子类方法的权限要大于父类方法&quot;">​</a></h5><p>因为加入父类是public而子类是private的话,那么后面使用多态</p><p>Employee e=new Mannager();</p><p>就无法准确调用它的方法。</p><h3 id="子类构造器" tabindex="-1">子类构造器 <a class="header-anchor" href="#子类构造器" aria-label="Permalink to &quot;子类构造器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String name,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> year,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> month,itn day){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">	super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name,salary,year,month,day);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    bonus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>super构造器必须是子类构造器的第一条语句或者说<strong>调用构造器的语句只能作为另一个构造器的第一句语句出现</strong>。<strong>构造器的参数可以传给当前类(this) 的其他构造器,也可以传给超类(super)的构造器</strong>。 <strong>重点:如果子类的构造器没有显式地调用超类的构造器，将自动地调用超类的无参构造器</strong>，如果超类没有无参构造器，并且在子类构造器中又没有显示地调用超类的其他构造器，Java编译器就会报错 也就是说，子类在初始化时会自动调用超类的构造器。如果我没有记错的话，应该是静态块先初始化，然后才会执行超类的构造函数。</p><h4 id="this关键字的作用" tabindex="-1">this关键字的作用 <a class="header-anchor" href="#this关键字的作用" aria-label="Permalink to &quot;this关键字的作用&quot;">​</a></h4><ol><li>指示隐式参数的引用</li><li>调用该类的其他构造器</li></ol><h4 id="super关键字的作用" tabindex="-1">super关键字的作用 <a class="header-anchor" href="#super关键字的作用" aria-label="Permalink to &quot;super关键字的作用&quot;">​</a></h4><ol><li>调用超类方法</li><li>调用超类的构造器 对象变量e可以引用Employee对象，也可以引用Manager对象 <strong>虚拟机知道e实际引用的对象类型，因此能够正确地调用相应的方法</strong> 一个对象变量(例如，变量e)可以指示多种实际类型的现象被称为多态，在<strong>运行时能够自动地选择</strong>适当的方法，称为<strong>动态绑定</strong>。</li></ol><h3 id="继承层次" tabindex="-1">继承层次 <a class="header-anchor" href="#继承层次" aria-label="Permalink to &quot;继承层次&quot;">​</a></h3><p>意思就是继承不只是单层的，类似与树一样，在每一层有多个节点，而在继承体系中，某个特定的的类到其祖先的距离称为继承链。</p><h3 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h3><p>多态是<strong>针对对象变量</strong>来说的，我们只能说java中某个对象变量是多态的。 我们可以使用&quot;is-a&quot;来设计类是否能够继承父类，例如每个经理其实都是一名员工，反之不成立；另一个方面，“is-a&quot;也有替换的一位，什么意思呢，父类型变量引用可以被子类型变量替换掉。 <strong>不能将超类的引用赋给子类变量。例如,Manager m=staff[i]</strong>,原因很清楚：不是所有员工都是经理。如果赋值成功，m可能引用了一个不是经理的Employee对象，而在后面有可能会调用m.setBonus(...),这就会发生运行时的错误。 <strong>注意：子类引用的数组可以转换成超类引用的数组，而不需要强制类型转换</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这没什么问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managers;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 超类数组指向子类数组引用,多态的体现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Harry Hacker...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//编译器居然也没有识别出问题，如果这里的引用对象进行了修改，那么原对象变量指向的引用也就发生了改变。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">managers[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setBonus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);将会试图调用一个不存在的实例字段，进而会扰乱相邻存储空间的内容，会引发ArraysStoreException异常。</span></span></code></pre></div><h3 id="理解方法调用" tabindex="-1">理解方法调用 <a class="header-anchor" href="#理解方法调用" aria-label="Permalink to &quot;理解方法调用&quot;">​</a></h3><p>假设要调用x.f(args),隐式参数x声明为类C的一个对象。联想到了this关键字。 1.编译器查看对象的声明类型和方法名。有可能存在多个名字为f但参数类型不一样的方法。例如，f(int)和f(String),<strong>编译器将会一一列举类中所有名为f的方法和超类中所有名为f的方法而且可访问的方法(超类的私有方法不可访问)</strong> 如此一来，编译器就已经知道了所有可能被调用的方的候选方法。 2.接下来，编译器要确定方法调用中提供的参数类型。如果在所有名为f的方法中存在一个与所提供的参数类型完全匹配的方法，就选择这个，这个过程称之为<strong>重载解析</strong>。例如，对于调用x.f(&quot;Hello&quot;),编译器将会挑选f(String),而不是f(int)。但是呢，f(x)中x的类型还可以进行转换，如果编译器没有找到或者经过类型转化之后方法太多，编译器则会报告一个错误。 tips:方法的名字和参数列表称之为方法的签名。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Employee </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBuddy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){......}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Manager </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBuddy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){......}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">返回类型在子类中发生了改变，是超类的子类型，这两个方法有</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">可协变</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">的返回类型。</span></span></code></pre></div><p>3.如果是private方法、static方法和final方法或者构造器，那么编译器将可以准确地知道该调用哪个方法。这称之为<strong>静态绑定</strong>。与此对应的是，如果要调用的的方法依赖于隐式参数的实际类型，那么必须在运行时使用动态绑定。在我们的示例中，编译器会利用动态绑定生成一个调用f(String)的指令。 4.程序运行并且采用<strong>动态绑定</strong>调用方法时，虚拟机必须调用与x所引用对象的实际类型所对应的方法。什么意思呢，就是说，假设D是C的子类，如果调用d.f(x)那么虚拟机首先会在d的类中找f方法，如果找不到才回去c中找f这个方法，如果c中找不到，那么就回去c的超类中找方法。 每次调用方法都要完成一遍这个搜索，时间开销是比较大的。因此，虚拟机预先为每个类计算了一个<strong>方法表(method table)</strong>,其中列出了所有方法的签名(返回类型+参数列表)和要调用的实际方法。等到真正调用的时候，虚拟机直接查这个表就行了。<strong>如果使用的super.f(param)那么将直接在当前类的超类中去寻找。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Harry Hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1989</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        employee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>现在我们来看employee.getSalary()方法，Employee中只有一个getSalary()方法，不用担心方法的重载解析</p><p>1.首先，<strong>虚拟机获取employee的实际类型的方法表</strong>，可能使用Employee也可能是Manager，也可能是其他子类的方法表(比如Manager类型，就会同时获取)。</p><p>2.查找一遍定义了getSalary()签名的类。</p><p>3.最后虚拟机进行调用。</p><p>动态绑定还有一个重要的特性是：无须对现有的代码进行修改就可以对程序进行扩展。假设增加一个新类Executive,并且变量e引用了这个新类，比如说是getSalary()方法，那么就无须重新编译e.getSalay()的代码，而是直接调用Excutive.getSalary()方法。</p><h3 id="阻止继承-final类和方法" tabindex="-1">阻止继承:final类和方法 <a class="header-anchor" href="#阻止继承-final类和方法" aria-label="Permalink to &quot;阻止继承:final类和方法&quot;">​</a></h3><p><strong>final修饰的类不能继承，方法不能覆盖</strong>。 例如，Calendar的getTime和setTime就不允许别的子类来实现，只有Calendar这个类的设计者来实现，大佬果然是大佬。 String没有子类我们都知道，String类型的变量也不允许指向别的引用。 早期Java程序员甚至会使用final修饰方法来减少开销，因为<strong>一个方法很短且不能被覆盖的话那么CPU就能对其进行优化处理</strong>，这个过程称为<strong>内联</strong>。e.getName-&gt;e.name,所幸，现在的虚拟机的即时编译器都很强，它能准确的知道类之间的继承关系，如果方法很短且没有被覆盖，那么<strong>即时编译器</strong>就会将这个方法进行内联处理。如果有子类的话，那么虚拟机将取消内联。又是虚拟机，可见虚拟机在Java体系中的重要意义。</p><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><p>例如</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3.405</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> nx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) x;</span></span></code></pre></div><p>简单来说，就是将<strong>一个类的对象引用转换为另一个对象引用</strong>。要完成对象引用的转换，转换语法与数值表达式的强制类型转换类似，需要用()放在转换对象之前 Manager boss=(Manager)staff[0]; <strong>使用强制类型转换的原因是：要在暂时忽视对象的实际类型之后使用对象的全部功能</strong>。 代码改写</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> boss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">boss;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>如果使用强制类型转换</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff.length;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i为经理) staff[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> staff[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Manager)staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span></code></pre></div><p>我们转换是为了使用Manager下的方法getSalary，不过上面的代码反而脱裤子放屁，更加麻烦。 将一个值存入变量时，编译器会检查你是否承诺过多。 ClassCastException异常 <strong>注意</strong> 1.只能在继承层次内进行强制类型转换。 2.将超类强制转换为子类时建议使用instance of进行检查</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Manager){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">boss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Manager)staff[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="抽象类" tabindex="-1">抽象类 <a class="header-anchor" href="#抽象类" aria-label="Permalink to &quot;抽象类&quot;">​</a></h3><p>自下而上的看，位于上层的类更具有一般性，可能更加抽象。从某种角度看，<strong>祖先类更加具有一般性，人们只将它作为派生其他类的基类</strong>，而不是来构造你想使用的实例。 tip:通用的方法应该放在超类中。 <strong>抽象方法充当着占位方法的角色</strong>，在子类中进行实现： 1.子类中保留抽象方法，但是子类也得为抽象的 2.子类实现抽象方法。 <strong>即使没有抽象方法，类也可以是抽象的，也就是说，能有非抽象方法</strong> 定义抽象类Peson和两个非抽象子类Employee和Student</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">	sout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>p为什么能调用getDescription呢，这是因为由于不能构造抽象类Person的对象，所以变量p永远不会引用person对象，而是引用诸如Employee或Student这样的具体子类的对象，而这些对象中都定义了getDescription方法。</p><h3 id="受保护访问" tabindex="-1">受保护访问 <a class="header-anchor" href="#受保护访问" aria-label="Permalink to &quot;受保护访问&quot;">​</a></h3><p>子类的权限需要比父类更高,因为多态的存在，如果父类为public而子类为private那么当类型声明为父类，就无法体现多态。</p><h2 id="object-所有类的超类" tabindex="-1">Object:所有类的超类 <a class="header-anchor" href="#object-所有类的超类" aria-label="Permalink to &quot;Object:所有类的超类&quot;">​</a></h2><h3 id="oject类型变量" tabindex="-1">Oject类型变量 <a class="header-anchor" href="#oject类型变量" aria-label="Permalink to &quot;Oject类型变量&quot;">​</a></h3><p>在Java中，<strong>只有基本类型不是对象，例如数值、字符和布尔类型的值都不是对象</strong>。 <strong>所有的数组类型，不管是对象数组还是基本类型的数组都扩展了Object类</strong>。</p><h3 id="equals方法" tabindex="-1">equals方法 <a class="header-anchor" href="#equals方法" aria-label="Permalink to &quot;equals方法&quot;">​</a></h3><p>Object中实现的equals方法用于确定两个对象引用是否相等。 覆盖equals方法的基本套路</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">object){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> other</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Employee) object;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(other.name)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">other.salary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hireDay.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(other.hireDay);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><p>getClass将返回一个对象所属的类。</p><p>为了防备name和hireDay可能为null的情况，需要使用Objects.equals方法。如果两个参数都为null,则返回true。如果其中一个为null而另一个不是，则返回false。</p><p>如果有子类的话，那么子类中直接调用超类的方法，如果相等再进行属性比较。</p><h3 id="相等测试与继承" tabindex="-1">相等测试与继承 <a class="header-anchor" href="#相等测试与继承" aria-label="Permalink to &quot;相等测试与继承&quot;">​</a></h3><p>if(!(otherObject instance of Employee))return false; 允许其他类为Object的一个子类 Java规范: 1.自反性:x.equals(x)-true; 2.对称性:x.equlas(y)--y.equals(x) 3.传递性:x、y和z; 4.一致性:反复调用得到相同结果 5.对于非空对象x,x.equals(null）为false; 注意： 1.如果子类可以有自己的相等性概念，则对称性需求将强制使用getClass进行检测。 2.如果由超类决定相等的概念，那么就可以使用instance of检测，这样可以再不同子类的对象中进行相等行比较 说人话就是如果Emeployee和Manager进行比较，那么只用比较对应字段；如果两个Manager进行比较，则需要各个字段都相等，比如说奖金不相等就false,因此，需要使用getClass检测????</p><h3 id="hashcode方法" tabindex="-1">hashcode方法 <a class="header-anchor" href="#hashcode方法" aria-label="Permalink to &quot;hashcode方法&quot;">​</a></h3><p>由对象导出的hash值。 <strong>字符串相同的话有相同散列值</strong>。 String s=&quot;OK&quot;; StringBuilder sb=new StringBuilder(s); String t=new String(&quot;Ok&quot;); StringBuilder tb=new StringBuilder(t);</p><p>s和t的hash值是一样的，而sb和tb的hash值却不相同，Object 类的默认hashCode方法会从对象的存储地址得出散列码。</p><h4 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-object" tabindex="-1">java.lang.Object <a class="header-anchor" href="#java-lang-object" aria-label="Permalink to &quot;java.lang.Object&quot;">​</a></h5><p>int hashCode</p><p>返回对象散列码</p><p>java.util.Objects static int hash(Object ...objects)</p><p>返回一个散列码，有所有对象的hash值组合而成 static int hashCode(Object a)</p><p>如果a为null返回0,否则返回a.hashCode().</p><p>java.lang.(Integer|Long...包装类) static int hashCode(xxxValue)</p><p>返回给定值的散列码</p><p>java.util.Arrays static int hashCode(xxx[] a) 计算数组a的散列码。</p><h3 id="tostring方法" tabindex="-1">toString方法 <a class="header-anchor" href="#tostring方法" aria-label="Permalink to &quot;toString方法&quot;">​</a></h3><p>随处可见toString()方法的主要原因是:只要对象与一个字符串通过字符串&quot;+&quot;连接起来。Java编译器就会自动地调用toString方法来获得这个对象的字符串描述。 tip:在代码编写的过程中我们常常需要打印数组，但是原始的数组toString()的话会打印许I@a46e30这种前缀(这是由于历史原因造成的)，所以我们可以使用Arrays.toString(int[] nums),toString()在我们的日常调试中经常会用，熟练应用百利而无一害。</p><h4 id="常用api-1" tabindex="-1">常用API <a class="header-anchor" href="#常用api-1" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-object-1" tabindex="-1">java.lang.Object <a class="header-anchor" href="#java-lang-object-1" aria-label="Permalink to &quot;java.lang.Object&quot;">​</a></h5><pre><code>Class getClass() 返回包含对象信息的类对象。
boolean equals(Object otherObject) 比较两个对象是否相等，如果两个对象指向同一块存储区域，方法返回true;
String toString() 返回表示该对象值的字符串。
</code></pre><h2 id="泛型数组列表" tabindex="-1">泛型数组列表 <a class="header-anchor" href="#泛型数组列表" aria-label="Permalink to &quot;泛型数组列表&quot;">​</a></h2><p>C/C++中，运行之前就必须规定数组的大小，ArrayList&lt;Object&gt;可以理解成一个<strong>带有类型参数</strong>的泛型，&lt;&gt;指定了列表保存的元素对象的类型。泛型是由编译器来检测我们的集合对象中存放的对象是否符合我们之前的承诺，也就是说，如果定义了List&lt;某种类型对象&gt;，那么编译器就会帮助我们检查我们集合中添加的对象是否符合规范，如果不符合那么就会报错。</p><h3 id="声明数组列表" tabindex="-1">声明数组列表 <a class="header-anchor" href="#声明数组列表" aria-label="Permalink to &quot;声明数组列表&quot;">​</a></h3><p>编译器会检查这个变量、参数或方法的泛型类型，然后将这个类型放在&lt;&gt;中。</p><h4 id="常用api-2" tabindex="-1">常用API <a class="header-anchor" href="#常用api-2" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-util-arraylist-e" tabindex="-1">java.util.ArrayList&lt;E&gt; <a class="header-anchor" href="#java-util-arraylist-e" aria-label="Permalink to &quot;java.util.ArrayList\\&lt;E&gt;&quot;">​</a></h5><pre><code>ArrayList\\&lt;E&gt;() 构造一个空数组列表
ArrayList\\&lt;E&gt;(int initialCapacity) 构造一个定长的数组
boolean add(E obj) 数组列表末尾添加一个元素，永远返回true
int size() 返回存储在数组列表中的元素个数
void ensureCapacity(int capacity) 不进行扩容的情况下确保给定的capacity个元素能够被分配在数组中
void trimToSize() 将数组列表的存储容量削减到当前大小
</code></pre><h3 id="访问数组列表元素" tabindex="-1">访问数组列表元素 <a class="header-anchor" href="#访问数组列表元素" aria-label="Permalink to &quot;访问数组列表元素&quot;">​</a></h3><p>自动扩容有利有弊，数组列表自动扩容的便利也增加了访问元素语法的复杂程度,其原因是ArrayList并不是Java程序设计语言的一部分；它只是由某个人编写并在标准库中提供的一个实用工具类。 []不能使用，而要使用get和set方法 例如，staff.set(i,harry); 等价于对数组a的元素赋值(与数组一样，下标值从0开始) 警告: 1.只有当数组的size大于i时，才能使用set方法 2.没有泛型类时，就是说如果集合&lt;&gt;中没有规定对象类型，那么默认的就是返回object类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Employee)staff.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//如果需要在数组列表的中间插入元素，为此可以使用方法add方法并提供一个索引参数。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">staff.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n,e);</span></span></code></pre></div><h4 id="常用api-3" tabindex="-1">常用API <a class="header-anchor" href="#常用api-3" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-util-arraylist-e-1" tabindex="-1">java.util.ArrayList&lt;E&gt; <a class="header-anchor" href="#java-util-arraylist-e-1" aria-label="Permalink to &quot;java.util.ArrayList\\&lt;E&gt;&quot;">​</a></h5><pre><code>E set(int index,E obj) 将值obj放置在数组列表的指定索引位置，返回之前的索引
E get(int index)　得到指定索引为值的内容
void add(itn index,E obj)　后移元素从而将obj插入到指定索引位置
E remove(int index)　删除指定索引位置的元素，并将后面的所有元素前移
</code></pre><h3 id="类型化与原始数组的兼容性" tabindex="-1">类型化与原始数组的兼容性 <a class="header-anchor" href="#类型化与原始数组的兼容性" aria-label="Permalink to &quot;类型化与原始数组的兼容性&quot;">​</a></h3><p>处于兼容性的考虑，编译器检查到<strong>没有发现违反规则</strong>的现象之后，就将所有的类型化数组列表转换为原始的ArrayList对象。在程序运行时，所有的数组列表都是一样的，即虚拟机中没有类型参数。</p><h2 id="对象包装器和自动装箱" tabindex="-1">对象包装器和自动装箱 <a class="header-anchor" href="#对象包装器和自动装箱" aria-label="Permalink to &quot;对象包装器和自动装箱&quot;">​</a></h2><p>有时，需要将int这样的基本类型转换为对象。所有基本类型都有对应包装器类型，包装器是<strong>不可改变的，即一旦构造了包装器，就不允许更改包装在其中的值</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//将会自动变换成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ValueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p>相反的，将一个Integer对象赋给int值时,将会自动地拆箱。也就是说,编<strong>译器将int n=list.get(i);转换为int n=list.get(i).intValue()</strong>; <strong>注意</strong>自动装箱规范要求boolean、byte、char&lt;=127,介于-128和127之间,我们也称作缓冲区，short和int相同的值被包装到固定的对象中。我们可以和String类型的常量池进行一个比较，其实他们的作用是一样的。 另外，如果在一个表达式中混合使用Integer和Double类型,Integer值就会拆箱，提升为double,在装箱为Double。同时,我们需要清楚<strong>装箱和拆箱是编译器要做的工作</strong>,而不是虚拟机。</p><h4 id="常用api-4" tabindex="-1">常用API <a class="header-anchor" href="#常用api-4" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-integer" tabindex="-1">java.lang.Integer <a class="header-anchor" href="#java-lang-integer" aria-label="Permalink to &quot;java.lang.Integer&quot;">​</a></h5><h6 id="int-intvalue" tabindex="-1">int intValue() <a class="header-anchor" href="#int-intvalue" aria-label="Permalink to &quot;int intValue()&quot;">​</a></h6><p>将这个Integer对象的值作为一个int值返回。(覆盖Number类中的intValue方法。</p><h6 id="static-string-tostring" tabindex="-1">static String toString() <a class="header-anchor" href="#static-string-tostring" aria-label="Permalink to &quot;static String toString()&quot;">​</a></h6><p>返回一个新的String对象，表示指定的数值i的十进制表示</p><h6 id="static-string-tostring-int-i-int-radix" tabindex="-1">static String toString(int i,int radix) <a class="header-anchor" href="#static-string-tostring-int-i-int-radix" aria-label="Permalink to &quot;static String toString(int i,int radix)&quot;">​</a></h6><p>返回数值i基于radix参数指定进制的表示</p><h6 id="static-int-parseint-string-s" tabindex="-1">static int parseInt(String s) <a class="header-anchor" href="#static-int-parseint-string-s" aria-label="Permalink to &quot;static int parseInt(String s)&quot;">​</a></h6><h6 id="static-int-parseint-string-s-int-radix" tabindex="-1">static int parseInt(String s,int radix) <a class="header-anchor" href="#static-int-parseint-string-s-int-radix" aria-label="Permalink to &quot;static int parseInt(String s,int radix)&quot;">​</a></h6><p>返回字符串s表示的整数，指定字符串必须表示一个十进制整数(第一种方法),或者采用radix参数指定的进制(第二种方法)</p><h6 id="static-integer-valueof-string-s" tabindex="-1">static Integer valueOf(String s) <a class="header-anchor" href="#static-integer-valueof-string-s" aria-label="Permalink to &quot;static Integer valueOf(String s)&quot;">​</a></h6><h6 id="static-integer-valueof-string-s-int-radix" tabindex="-1">static Integer valueOf(String s,int radix) <a class="header-anchor" href="#static-integer-valueof-string-s-int-radix" aria-label="Permalink to &quot;static Integer valueOf(String s,int radix)&quot;">​</a></h6><p>返回一个新的Integer对象，用字符串s表示的整数初始化，默认十进制，或者采用radix参数指定的进制</p><h2 id="参数数量和可变的方法" tabindex="-1">参数数量和可变的方法 <a class="header-anchor" href="#参数数量和可变的方法" aria-label="Permalink to &quot;参数数量和可变的方法&quot;">​</a></h2><h2 id="枚举类" tabindex="-1">枚举类 <a class="header-anchor" href="#枚举类" aria-label="Permalink to &quot;枚举类&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SMALL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MEDIUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">LARGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">EXTA_LARGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>声明的时候用的enum</strong> 实际上，<strong>这个声明定义的类型是一个类，它刚好有4个实例</strong>,不可能构造新的对象。枚举的构造器总是私有的，如果使用其他修饰符那么就会出现语法错误。 枚举类型下有一个静态的values方法，它将返回一个包含全部枚举值的数组。 Size[] values=Size.values(); <strong>常用API</strong> java.lang.Enum&lt;E&gt; static Enum valueOf(Class enumClass,String name) 返回给定类中有指定名字的枚举常量 String toString() 返回枚举常量名 int ordinal() 返回枚举常量在enum声明中的位置,位置从0开始计数。 int compareTo(E other) 如果枚举常量出现在other之前，返回一个负整数;如果this==other，则返回0;否则,返回一个正整数。枚举常量的出现次序在enum声明中给出。</p><h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h2><p>**反射库(reflection library)提供了一个丰富且精巧的工具集，可以用来编写能够动态操作Java代码的程序。 <strong>能够分析类能力的程序称为反射</strong> 在运行时分析类的能力,在运行时检查对象，例如，编写一个适用于所有类的toString方法 实现泛型数组操作代码 利用Method对象，<strong>这个对象很像C++中的函数指针</strong> 总结来说反射是一种功能强大且复杂的机制。</p><h3 id="class类" tabindex="-1">Class类 <a class="header-anchor" href="#class类" aria-label="Permalink to &quot;Class类&quot;">​</a></h3><p>Java运行时系统为每个对象维护<strong>一个运行时类标识</strong>，这个信息会跟踪对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法。</p><p>Java中有一个特殊的类访问这些信息，要保存这些信息的类名为Class，这个名字可能让然有些困惑。</p><p><strong>1.Object下有一个getClass()方法，返回的是一个Class类型的对象实例。</strong> Employee e; Class class=e.getClass();</p><p>就像Employee对象描述一个特定员工的属性一样，Class对象会描述一个特定类的属性。可能最常用的Class方法就是getName,这个方法将返回类的名字。</p><p><strong>2.还可以使用静态方法forName获得类名对应的class对象。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;java.util.Random&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(className);</span></span></code></pre></div><p>如果类名保存在一个字符串中，这个字符串会在运行时变化，就可以使用这个方法。 <strong>3.T.class</strong> 例如</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Random.class;</span></span></code></pre></div><p>这种方法得到的其实是<strong>泛型类</strong>，例如Employee.class得到的其实是Class&lt;Employee&gt; <strong>虚拟机为每个类管理一个唯一的Class对象</strong>，也就是说我们可以使用==来进行比较。</p><p>e instanceof Employee比较条件下，如果e是某个子类则比较成功，但是在.class比较时不成立。</p><p><strong>如果有一个Class类型的对象，可以用它来构造类的实例</strong>。调用getConstructor方法即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(className);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h4 id="常用api-5" tabindex="-1">常用API <a class="header-anchor" href="#常用api-5" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-class" tabindex="-1">java.lang.Class <a class="header-anchor" href="#java-lang-class" aria-label="Permalink to &quot;java.lang.Class&quot;">​</a></h5><pre><code>static Class forName(String className)
返回一个Class对象，表示名为className的类
Constructor getConstructor(class..parameter Types)
生成一个对象,描述有指定参数类型的构造器。
</code></pre><h5 id="java-lang-reflect-constructor" tabindex="-1">java.lang.reflect.Constructor <a class="header-anchor" href="#java-lang-reflect-constructor" aria-label="Permalink to &quot;java.lang.reflect.Constructor&quot;">​</a></h5><pre><code>Ojbect newInstance(Object..params)
将params传递到构造器，来构造这个构造器声明类的一个新实例
</code></pre><h5 id="java-lang-throwable" tabindex="-1">java.lang.Throwable <a class="header-anchor" href="#java-lang-throwable" aria-label="Permalink to &quot;java.lang.Throwable&quot;">​</a></h5><pre><code>void printStackTrace()
将Throwable对象和堆栈轨迹打印到标准流程错误
</code></pre><h3 id="声明异常入门" tabindex="-1">声明异常入门 <a class="header-anchor" href="#声明异常入门" aria-label="Permalink to &quot;声明异常入门&quot;">​</a></h3><p>程序运行错误时就会抛出一个异常，因为有一个<strong>处理器</strong>能够“捕获”并处理这个异常。</p><p>异常有两种：<strong>非检查型异常</strong>(unchecked)和<strong>检查型异常</strong>(checked)。非检查性异常指的是编译器并不期望你为这些异常提供处理器，例如数组越界和空引用。而<strong>对于检查型异常而言，编译器将会检查你是否知道这个异常并做好准备来处理后果</strong>。</p><p>不是所有的错误都是可以避免的。如果竭尽全力还是可能会发生异常，大多数Java API都会抛出一个检查型异常。如果一个方法包含一条可能抛出检查型异常的语句，则在方法上增加一个throws子句。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> doSomethingWithClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String name) throws ReflectOperationException{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> something cl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>调用这个方法的任何方法也都需要一个throws声明，这也包括main方法。</p><h3 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h3><p>Class类中提供了查找资源文件的，但是得遵循以下步骤: 1.获得拥有资源的类的Class对象，ResourceTest.Class 2.有些方法需要描述资源位置的URL。 URL url=cl.getResource(&quot;about.gif&quot;); 我们通常将程序中可能会使用的文件等放在同一个报下，那么虚拟机就会自动的为我们进行搜索。这就是文件的自动装载，是利用资源加载特性完成的。 <strong>常用API</strong> java.lang.Class URL getResource(String name) InputStream getResourceAsStream(String name) 找到与类位于同一位置的资源，返回一个可以用来加载资源的URL或者输入流。如果没有找到，则返回null。</p><h3 id="利用反射分析类的能力" tabindex="-1">利用反射分析类的能力 <a class="header-anchor" href="#利用反射分析类的能力" aria-label="Permalink to &quot;利用反射分析类的能力&quot;">​</a></h3><p>在java.lang.relect包下有三个类Field、Method和Constrcutor,这里在Spring容器中运用的非常多，所以我们需要认真学。 这三个类都有<strong>getName()<strong>的方法，分别用来返回</strong>字段、方法或者构造器的名称</strong>。 Field类下比较重要的是getType方法，用来返回<strong>某个字段的类型对象，类肯定就是Class</strong>。 Constructor类和Method类有报告参数类型的方法，Method类还有一个<strong>报告返回类型的方法</strong>，这三个类都有一个名为<strong>getModifiers的方法，它将返回一个整数，用不同的0/1位来描述修饰符</strong>，如public和static。另外，还有<strong>Modifier类</strong>中isPublic、isPrivate和isFinal判断方法或者构造器是何种修饰符。 Class类中的getFileds、getMethods和getConstructors方法<strong>将分别返回这个类支持的公共字段、方法和构造器的数组,其中包括超类的公共成员</strong>。</p><p>Class类中的getDeclaredFields、getDeclaredMethods和geteclaredConstructors方法将分别返回类中<strong>声明的全部字段、方法和构造器的数组</strong>。</p><p>例如</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Class cl) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        Method</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDeclaredMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> methods) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> retType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//方法返回类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//方法名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> modifiers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getModifiers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//获取修饰符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (modifiers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(modifiers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(retType.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            //获取方法参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            Class</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">paramTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getParameterTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> paramTypes.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(paramTypes[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><h4 id="常用api-6" tabindex="-1">常用API <a class="header-anchor" href="#常用api-6" aria-label="Permalink to &quot;常用API&quot;">​</a></h4><h5 id="java-lang-class-1" tabindex="-1">java.lang.Class <a class="header-anchor" href="#java-lang-class-1" aria-label="Permalink to &quot;java.lang.Class&quot;">​</a></h5><p>Field[] getFilelds()</p><p>Field[] getDeclaredFields() getFields方法将返回一个包含当前类和超类的公共字段。</p><pre><code>getDeclaredField方法也返回包Field对象的数组，这些对象对应这个类的全部字段。
</code></pre><p>Method[] getMethods()</p><p>Method[] getDeclaredMethods(()</p><pre><code>返回包含Method对象的数组:getMethods将返回所有的公共方法，包括继承的公共方法。而getDeclareMethods方法只能返回当前类或者接口的全部方法。
</code></pre><p>Constructor[] getConstructors() Constructor[] geteclaredConstructors() 返回包含Constructor对象的数组 String getPackageName() 得到包名。</p><h5 id="java-lang-reflect-constructor-1" tabindex="-1">java.lang.reflect.Constructor <a class="header-anchor" href="#java-lang-reflect-constructor-1" aria-label="Permalink to &quot;java.lang.reflect.Constructor&quot;">​</a></h5><p>Class getDeclaringClass()</p><p>返回一个Class对象，表示定义了这个构造器、方法或字段的类</p><p>Class getExceptionTypes()</p><p>Class getModifiers() 返回一个数，用来描述这个构造器、方法或字段的修饰符。用Modifier类中的方法来分析这个返回值。</p><p>String getName()</p><p>Class getParameterTypes()(在Constructor和Method classes类中)</p><p>返回一个数组，用来表示方法或构造器中参数的类型</p><p>Class getReturnType()(在Method类中)</p><p>返回一个用于表示返回类型的Class对象</p><h5 id="java-lang-reflect-modifer" tabindex="-1">java.lang.reflect.Modifer <a class="header-anchor" href="#java-lang-reflect-modifer" aria-label="Permalink to &quot;java.lang.reflect.Modifer&quot;">​</a></h5><p>static String toString(int modifiers)</p><p>返回一个字符串，包含对应modifiers中设置的修饰符。</p><h3 id="使用反射在运行时分析对象" tabindex="-1">使用反射在运行时分析对象 <a class="header-anchor" href="#使用反射在运行时分析对象" aria-label="Permalink to &quot;使用反射在运行时分析对象&quot;">​</a></h3><p><strong>在运行时获得任意对象数据字段字段的名字和类型</strong> 1.获得对应的Class对象 2.在这个Class对象上调用getDeclaredFields。 如果知道想要查看的字段名称和类型，那么查看就很简单。而利用反射机制，就可以知道编译时不知道的对象字段。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> harry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Harry Hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">50000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1989</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">harry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//代表Employee的类对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Field</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//f是Employee下name的字段对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(harry);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//harry是obj,v的值应该是“Harry Hacker“</span></span></code></pre></div><p>上面的代码中我们中我们不知道是否存在name这个字段，但是我们可以使用getDeclaredField()得到一个Field对象，再用f.get(obj)方法,返回的将是obj的当前字段值。</p><p><strong>由于name是一个私有字段，所以get和set方法会抛出一个IllegalAccessException。只能对可以访问的字段使用get和set方法</strong>。</p><p><strong>注意</strong>:Java安全机制允许查看一个对象有哪些字段，但是除非是访问权限，否则不允许进行读写。但是可以使用f.setAccessible(true)；覆盖Java的访问控制。</p><h3 id="使用反射编写泛型数组代码" tabindex="-1">使用反射编写泛型数组代码 <a class="header-anchor" href="#使用反射编写泛型数组代码" aria-label="Permalink to &quot;使用反射编写泛型数组代码&quot;">​</a></h3><p>java.lang.reflect包中的Array类允许动态地创建数组。例如，Array类中的copyOf方法实现就使用了这个类。</p><h3 id="调用任意方法和构造器" tabindex="-1">调用任意方法和构造器 <a class="header-anchor" href="#调用任意方法和构造器" aria-label="Permalink to &quot;调用任意方法和构造器&quot;">​</a></h3><p>回想一下，可以用Field类的get方法查看一个对象的字段。与之类似，<strong>Method</strong>类中的 Object <strong>invoke</strong>(Object obj,Object args)作用是<strong>用来调用包装在当前Method对象中的方法</strong>。 第一个参数是隐式参数，其余的则提供了显式参数,<strong>对于静态方法来说，第一个参数可以忽略</strong>。</p><p>例如，用m1来表示Employee类的getName()方法，下面显示了如何调用这个方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String)m1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(harry);</span></span></code></pre></div><p><strong>如果返回的是基本类型，invoke方法将会返回包装器类型</strong>。</p><p>注意我们在使用这个方法的时候必须进行强制的类型转换，最后则会进行自动拆箱。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Double)m2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>建议在绝对有必要的时候才在你自己的程序中使用Method对象。</p><h2 id="继承设计的技巧" tabindex="-1">继承设计的技巧 <a class="header-anchor" href="#继承设计的技巧" aria-label="Permalink to &quot;继承设计的技巧&quot;">​</a></h2><ol><li>将公共操作放在超类中。</li><li>不要使用受保护的字段 <ol><li>子类是无限的，任何一个人都可以编写子类来访问protected实例字段</li><li>同一个包下也能够访问protected实例字段。 这也解释了为什么在那么多的代码中没有见过用protected修饰字段</li></ol></li><li>思考继承有没有被滥用 书上的例子是钟点工有个时薪的属性，我们在设计时会考虑继承Employee,然后添加一个时薪字段。然而，如果我们需要打印工资和薪水的时候，那么就得对二者做以区分，如果再计算税率，那么就更加复杂，还不如直接用employee类，再单独处理时薪(我的理解是这样式儿的)。</li><li>除非继承的方法有意义，否则不要继承。 例子更加直观，如果想实现Holiday，正常思路去继承GregorianCalendar 在设计的时候GregorianCalendar中已经有个公共的add(用来将假日转换成非假日)的方法了，无法确保假日集合的封闭性，也就是说任何人能够访通过这个操作来进行修改，显然这是不太安全的。</li><li>在覆盖方法时，不要更改预期的行为。</li><li>使用多态，而不要使用类型信息。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s is of type </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">acition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x is of type </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,205);function u(s,F,E,b,m,v){const h=e,l=k("ClientOnly");return t(),r("div",null,[D,d(l,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),y(h,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),B])}const S=p(C,[["render",u]]);export{x as __pageData,S as default};
